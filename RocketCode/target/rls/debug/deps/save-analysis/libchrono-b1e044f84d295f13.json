{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19","program":"C:\\Users\\trexx\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","chrono","C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"clock\"","--cfg","feature=\"libc\"","--cfg","feature=\"std\"","--cfg","feature=\"winapi\"","-C","metadata=b1e044f84d295f13","-C","extra-filename=-b1e044f84d295f13","--out-dir","c:\\Users\\trexx\\Documents\\PYTHON CODE LOL\\PersonalWebsite\\Personal-platypus-website\\RocketCode\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\trexx\\Documents\\PYTHON CODE LOL\\PersonalWebsite\\Personal-platypus-website\\RocketCode\\target\\rls\\debug\\deps","--extern","libc=c:\\Users\\trexx\\Documents\\PYTHON CODE LOL\\PersonalWebsite\\Personal-platypus-website\\RocketCode\\target\\rls\\debug\\deps\\liblibc-adc0b250841731a7.rmeta","--extern","num_integer=c:\\Users\\trexx\\Documents\\PYTHON CODE LOL\\PersonalWebsite\\Personal-platypus-website\\RocketCode\\target\\rls\\debug\\deps\\libnum_integer-6552a047d081e8e9.rmeta","--extern","num_traits=c:\\Users\\trexx\\Documents\\PYTHON CODE LOL\\PersonalWebsite\\Personal-platypus-website\\RocketCode\\target\\rls\\debug\\deps\\libnum_traits-888350da3a7e8df0.rmeta","--extern","winapi=c:\\Users\\trexx\\Documents\\PYTHON CODE LOL\\PersonalWebsite\\Personal-platypus-website\\RocketCode\\target\\rls\\debug\\deps\\libwinapi-d143078910716771.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\trexx\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\trexx\\Documents\\PYTHON CODE LOL\\PersonalWebsite\\Personal-platypus-website\\RocketCode\\target\\rls\\debug\\deps\\libchrono-b1e044f84d295f13.rmeta"},"prelude":{"crate_id":{"name":"chrono","disambiguator":[18107421762587778431,0]},"crate_root":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src","external_crates":[{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[13015713666403456114,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[1507510987272037120,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3803325750332457499,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4223354511651166533,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15700094508901508366,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12632183332710247155,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[18262169243471273054,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15664785966706829415,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[3895343934390880989,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1841993658411810574,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[1117248029108287081,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[14646112292732085519,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[11979428506951486581,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[2104796995944127881,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[4084207378877276393,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":16,"id":{"name":"libc","disambiguator":[4245277395814316444,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":17,"id":{"name":"winapi","disambiguator":[12261641486033521270,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":18,"id":{"name":"num_integer","disambiguator":[8320479789536828156,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":19,"id":{"name":"num_traits","disambiguator":[414960613347606594,0]}}],"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":76,"byte_end":55909,"line_start":4,"line_end":1535,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":2294},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22135,"byte_end":22143,"line_start":486,"line_end":486,"column_start":18,"column_end":26},"alias_span":null,"name":"Duration","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2543},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22161,"byte_end":22165,"line_start":488,"line_end":488,"column_start":16,"column_end":20},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1319},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22167,"byte_end":22175,"line_start":488,"line_end":488,"column_start":22,"column_end":30},"alias_span":null,"name":"MAX_DATE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1318},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22177,"byte_end":22185,"line_start":488,"line_end":488,"column_start":32,"column_end":40},"alias_span":null,"name":"MIN_DATE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2574},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22289,"byte_end":22297,"line_start":491,"line_end":491,"column_start":20,"column_end":28},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2550},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22299,"byte_end":22312,"line_start":491,"line_end":491,"column_start":30,"column_end":43},"alias_span":null,"name":"SecondsFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1533},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22314,"byte_end":22326,"line_start":491,"line_end":491,"column_start":45,"column_end":57},"alias_span":null,"name":"MAX_DATETIME","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1532},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22328,"byte_end":22340,"line_start":491,"line_end":491,"column_start":59,"column_end":71},"alias_span":null,"name":"MIN_DATETIME","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2788},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22439,"byte_end":22449,"line_start":495,"line_end":495,"column_start":18,"column_end":28},"alias_span":null,"name":"ParseError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1764},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22451,"byte_end":22462,"line_start":495,"line_end":495,"column_start":30,"column_end":41},"alias_span":null,"name":"ParseResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2510},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22499,"byte_end":22506,"line_start":497,"line_end":497,"column_start":17,"column_end":24},"alias_span":null,"name":"IsoWeek","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2395},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22508,"byte_end":22517,"line_start":497,"line_end":497,"column_start":26,"column_end":35},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2456},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22519,"byte_end":22532,"line_start":497,"line_end":497,"column_start":37,"column_end":50},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2526},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22534,"byte_end":22543,"line_start":497,"line_end":497,"column_start":52,"column_end":61},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2377},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22606,"byte_end":22611,"line_start":500,"line_end":500,"column_start":17,"column_end":22},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2378},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22606,"byte_end":22611,"line_start":500,"line_end":500,"column_start":17,"column_end":22},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2362},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22648,"byte_end":22659,"line_start":502,"line_end":502,"column_start":18,"column_end":29},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2328},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22661,"byte_end":22672,"line_start":502,"line_end":502,"column_start":31,"column_end":42},"alias_span":null,"name":"LocalResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":358},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22674,"byte_end":22680,"line_start":502,"line_end":502,"column_start":44,"column_end":50},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":360},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22682,"byte_end":22690,"line_start":502,"line_end":502,"column_start":52,"column_end":60},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2384},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22692,"byte_end":22695,"line_start":502,"line_end":502,"column_start":62,"column_end":65},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2385},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22692,"byte_end":22695,"line_start":502,"line_end":502,"column_start":62,"column_end":65},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2220},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22714,"byte_end":22727,"line_start":503,"line_end":503,"column_start":17,"column_end":30},"alias_span":null,"name":"DurationRound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2889},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22729,"byte_end":22742,"line_start":503,"line_end":503,"column_start":32,"column_end":45},"alias_span":null,"name":"RoundingError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2212},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22744,"byte_end":22755,"line_start":503,"line_end":503,"column_start":47,"column_end":58},"alias_span":null,"name":"SubsecRound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2543},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22894,"byte_end":22898,"line_start":508,"line_end":508,"column_start":13,"column_end":17},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":234}},{"kind":"Use","ref_id":{"krate":0,"index":2377},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22964,"byte_end":22969,"line_start":511,"line_end":511,"column_start":13,"column_end":18},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":234}},{"kind":"Use","ref_id":{"krate":0,"index":2378},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22964,"byte_end":22969,"line_start":511,"line_end":511,"column_start":13,"column_end":18},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":234}},{"kind":"Use","ref_id":{"krate":0,"index":2212},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23088,"byte_end":23099,"line_start":516,"line_end":516,"column_start":13,"column_end":24},"alias_span":null,"name":"SubsecRound","value":"","parent":{"krate":0,"index":234}},{"kind":"Use","ref_id":{"krate":0,"index":2574},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23136,"byte_end":23144,"line_start":518,"line_end":518,"column_start":14,"column_end":22},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":234}},{"kind":"Use","ref_id":{"krate":0,"index":2550},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23146,"byte_end":23159,"line_start":518,"line_end":518,"column_start":24,"column_end":37},"alias_span":null,"name":"SecondsFormat","value":"","parent":{"krate":0,"index":234}},{"kind":"Use","ref_id":{"krate":0,"index":2262},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23197,"byte_end":23205,"line_start":520,"line_end":520,"column_start":14,"column_end":22},"alias_span":null,"name":"Datelike","value":"","parent":{"krate":0,"index":234}},{"kind":"Use","ref_id":{"krate":0,"index":2951},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23207,"byte_end":23212,"line_start":520,"line_end":520,"column_start":24,"column_end":29},"alias_span":null,"name":"Month","value":"","parent":{"krate":0,"index":234}},{"kind":"Use","ref_id":{"krate":0,"index":2281},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23214,"byte_end":23222,"line_start":520,"line_end":520,"column_start":31,"column_end":39},"alias_span":null,"name":"Timelike","value":"","parent":{"krate":0,"index":234}},{"kind":"Use","ref_id":{"krate":0,"index":2907},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23224,"byte_end":23231,"line_start":520,"line_end":520,"column_start":41,"column_end":48},"alias_span":null,"name":"Weekday","value":"","parent":{"krate":0,"index":234}},{"kind":"Use","ref_id":{"krate":0,"index":2362},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23269,"byte_end":23280,"line_start":522,"line_end":522,"column_start":14,"column_end":25},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":234}},{"kind":"Use","ref_id":{"krate":0,"index":2384},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23282,"byte_end":23285,"line_start":522,"line_end":522,"column_start":27,"column_end":30},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":234}},{"kind":"Use","ref_id":{"krate":0,"index":2385},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23282,"byte_end":23285,"line_start":522,"line_end":522,"column_start":27,"column_end":30},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":234}},{"kind":"Use","ref_id":{"krate":0,"index":2395},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23323,"byte_end":23332,"line_start":524,"line_end":524,"column_start":14,"column_end":23},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":234}},{"kind":"Use","ref_id":{"krate":0,"index":2456},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23334,"byte_end":23347,"line_start":524,"line_end":524,"column_start":25,"column_end":38},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":234}},{"kind":"Use","ref_id":{"krate":0,"index":2526},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23349,"byte_end":23358,"line_start":524,"line_end":524,"column_start":40,"column_end":49},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":234}},{"kind":"Use","ref_id":{"krate":0,"index":358},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23396,"byte_end":23402,"line_start":526,"line_end":526,"column_start":14,"column_end":20},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":234}},{"kind":"Use","ref_id":{"krate":0,"index":360},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23404,"byte_end":23412,"line_start":526,"line_end":526,"column_start":22,"column_end":30},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":234}},{"kind":"Use","ref_id":{"krate":0,"index":2362},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":110072,"byte_end":110083,"line_start":469,"line_end":469,"column_start":22,"column_end":33},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":303}},{"kind":"Use","ref_id":{"krate":0,"index":2377},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":110132,"byte_end":110137,"line_start":471,"line_end":471,"column_start":22,"column_end":27},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":303}},{"kind":"Use","ref_id":{"krate":0,"index":2378},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":110132,"byte_end":110137,"line_start":471,"line_end":471,"column_start":22,"column_end":27},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":303}},{"kind":"Use","ref_id":{"krate":0,"index":2384},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":110158,"byte_end":110161,"line_start":472,"line_end":472,"column_start":20,"column_end":23},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":303}},{"kind":"Use","ref_id":{"krate":0,"index":2385},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":110158,"byte_end":110161,"line_start":472,"line_end":472,"column_start":20,"column_end":23},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":303}},{"kind":"Use","ref_id":{"krate":0,"index":2395},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23994,"byte_end":24003,"line_start":554,"line_end":554,"column_start":26,"column_end":35},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":595}},{"kind":"Use","ref_id":{"krate":0,"index":697},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":24005,"byte_end":24013,"line_start":554,"line_end":554,"column_start":37,"column_end":45},"alias_span":null,"name":"MAX_DATE","value":"","parent":{"krate":0,"index":595}},{"kind":"Use","ref_id":{"krate":0,"index":696},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":24015,"byte_end":24023,"line_start":554,"line_end":554,"column_start":47,"column_end":55},"alias_span":null,"name":"MIN_DATE","value":"","parent":{"krate":0,"index":595}},{"kind":"Use","ref_id":{"krate":0,"index":2456},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":24176,"byte_end":24189,"line_start":558,"line_end":558,"column_start":30,"column_end":43},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":595}},{"kind":"Use","ref_id":{"krate":0,"index":898},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":24191,"byte_end":24203,"line_start":558,"line_end":558,"column_start":45,"column_end":57},"alias_span":null,"name":"MAX_DATETIME","value":"","parent":{"krate":0,"index":595}},{"kind":"Use","ref_id":{"krate":0,"index":897},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":24205,"byte_end":24217,"line_start":558,"line_end":558,"column_start":59,"column_end":71},"alias_span":null,"name":"MIN_DATETIME","value":"","parent":{"krate":0,"index":595}},{"kind":"Use","ref_id":{"krate":0,"index":2510},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":24247,"byte_end":24254,"line_start":559,"line_end":559,"column_start":28,"column_end":35},"alias_span":null,"name":"IsoWeek","value":"","parent":{"krate":0,"index":595}},{"kind":"Use","ref_id":{"krate":0,"index":2526},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":24280,"byte_end":24289,"line_start":560,"line_end":560,"column_start":25,"column_end":34},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":595}},{"kind":"Use","ref_id":{"krate":0,"index":2030},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":536152,"byte_end":536157,"line_start":42,"line_end":42,"column_start":22,"column_end":27},"alias_span":null,"name":"parse","value":"","parent":{"krate":0,"index":1692}},{"kind":"Use","ref_id":{"krate":0,"index":2829},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":536181,"byte_end":536187,"line_start":43,"line_end":43,"column_start":23,"column_end":29},"alias_span":null,"name":"Parsed","value":"","parent":{"krate":0,"index":1692}},{"kind":"Use","ref_id":{"krate":0,"index":2860},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":536213,"byte_end":536226,"line_start":44,"line_end":44,"column_start":25,"column_end":38},"alias_span":null,"name":"StrftimeItems","value":"","parent":{"krate":0,"index":1692}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":76,"byte_end":55909,"line_start":4,"line_end":1535,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":166},{"krate":0,"index":169},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":176},{"krate":0,"index":179},{"krate":0,"index":182},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":189},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":196},{"krate":0,"index":199},{"krate":0,"index":202},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":212},{"krate":0,"index":215},{"krate":0,"index":218},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":228},{"krate":0,"index":231},{"krate":0,"index":234},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":303},{"krate":0,"index":595},{"krate":0,"index":1254},{"krate":0,"index":1427},{"krate":0,"index":1692},{"krate":0,"index":2180},{"krate":0,"index":2907},{"krate":0,"index":2929},{"krate":0,"index":2930},{"krate":0,"index":2932},{"krate":0,"index":2933},{"krate":0,"index":2935},{"krate":0,"index":2936},{"krate":0,"index":2938},{"krate":0,"index":2940},{"krate":0,"index":2234},{"krate":0,"index":2241},{"krate":0,"index":2243},{"krate":0,"index":2246},{"krate":0,"index":2943},{"krate":0,"index":2945},{"krate":0,"index":2947},{"krate":0,"index":2948},{"krate":0,"index":2249},{"krate":0,"index":2951},{"krate":0,"index":2988},{"krate":0,"index":2989},{"krate":0,"index":2991},{"krate":0,"index":2992},{"krate":0,"index":2994},{"krate":0,"index":2995},{"krate":0,"index":2997},{"krate":0,"index":2999},{"krate":0,"index":2251},{"krate":0,"index":2256},{"krate":0,"index":3002},{"krate":0,"index":3004},{"krate":0,"index":3006},{"krate":0,"index":3007},{"krate":0,"index":2260},{"krate":0,"index":2262},{"krate":0,"index":2281},{"krate":0,"index":2292}],"decl_id":null,"docs":" # Chrono: Date and Time for Rust","sig":null,"attributes":[{"value":"/ # Chrono: Date and Time for Rust","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":76,"byte_end":112,"line_start":4,"line_end":4,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":113,"byte_end":116,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ It aims to be a feature-complete superset of","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":117,"byte_end":165,"line_start":6,"line_end":6,"column_start":1,"column_end":49}},{"value":"/ the [time](https://github.com/rust-lang-deprecated/time) library.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":166,"byte_end":235,"line_start":7,"line_end":7,"column_start":1,"column_end":70}},{"value":"/ In particular,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":236,"byte_end":254,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":255,"byte_end":258,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ * Chrono strictly adheres to ISO 8601.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":259,"byte_end":301,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"/ * Chrono is timezone-aware by default, with separate timezone-naive types.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":302,"byte_end":380,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/ * Chrono is space-optimal and (while not being the primary goal) reasonably efficient.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":381,"byte_end":471,"line_start":12,"line_end":12,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":472,"byte_end":475,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ There were several previous attempts to bring a good date and time library to Rust,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":476,"byte_end":563,"line_start":14,"line_end":14,"column_start":1,"column_end":88}},{"value":"/ which Chrono builds upon and should acknowledge:","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":564,"byte_end":616,"line_start":15,"line_end":15,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":617,"byte_end":620,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ * [Initial research on","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":621,"byte_end":647,"line_start":17,"line_end":17,"column_start":1,"column_end":27}},{"value":"/    the wiki](https://github.com/rust-lang/rust-wiki-backup/blob/master/Lib-datetime.md)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":648,"byte_end":739,"line_start":18,"line_end":18,"column_start":1,"column_end":92}},{"value":"/ * Dietrich Epp's [datetime-rs](https://github.com/depp/datetime-rs)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":740,"byte_end":811,"line_start":19,"line_end":19,"column_start":1,"column_end":72}},{"value":"/ * Luis de Bethencourt's [rust-datetime](https://github.com/luisbg/rust-datetime)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":812,"byte_end":896,"line_start":20,"line_end":20,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":897,"byte_end":900,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Any significant changes to Chrono are documented in","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":901,"byte_end":956,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"/ the [`CHANGELOG.md`](https://github.com/chronotope/chrono/blob/main/CHANGELOG.md) file.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":957,"byte_end":1048,"line_start":23,"line_end":23,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1049,"byte_end":1052,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1053,"byte_end":1065,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1066,"byte_end":1069,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Put this in your `Cargo.toml`:","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1070,"byte_end":1104,"line_start":27,"line_end":27,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1105,"byte_end":1108,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1109,"byte_end":1120,"line_start":29,"line_end":29,"column_start":1,"column_end":12}},{"value":"/ [dependencies]","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1121,"byte_end":1139,"line_start":30,"line_end":30,"column_start":1,"column_end":19}},{"value":"/ chrono = \"0.4\"","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1140,"byte_end":1158,"line_start":31,"line_end":31,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1159,"byte_end":1166,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1167,"byte_end":1170,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ### Features","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1171,"byte_end":1187,"line_start":34,"line_end":34,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1188,"byte_end":1191,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Chrono supports various runtime environments and operating systems, and has","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1192,"byte_end":1271,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/ several features that may be enabled or disabled.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1272,"byte_end":1325,"line_start":37,"line_end":37,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1326,"byte_end":1329,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Default features:","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1330,"byte_end":1351,"line_start":39,"line_end":39,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1352,"byte_end":1355,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ - `alloc`: Enable features that depend on allocation (primarily string formatting)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1356,"byte_end":1442,"line_start":41,"line_end":41,"column_start":1,"column_end":87}},{"value":"/ - `std`: Enables functionality that depends on the standard library. This","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1443,"byte_end":1520,"line_start":42,"line_end":42,"column_start":1,"column_end":78}},{"value":"/   is a superset of `alloc` and adds interoperation with standard library types","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1521,"byte_end":1603,"line_start":43,"line_end":43,"column_start":1,"column_end":83}},{"value":"/   and traits.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1604,"byte_end":1621,"line_start":44,"line_end":44,"column_start":1,"column_end":18}},{"value":"/ - `clock`: enables reading the system time (`now`), independent of whether","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1622,"byte_end":1700,"line_start":45,"line_end":45,"column_start":1,"column_end":79}},{"value":"/   `std::time::SystemTime` is present, depends on having a libc.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1701,"byte_end":1768,"line_start":46,"line_end":46,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1769,"byte_end":1772,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Optional features:","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1773,"byte_end":1795,"line_start":48,"line_end":48,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1796,"byte_end":1799,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ - `wasmbind`: Enable integration with [wasm-bindgen][] and its `js-sys` project","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1800,"byte_end":1883,"line_start":50,"line_end":50,"column_start":1,"column_end":84}},{"value":"/ - [`serde`][]: Enable serialization/deserialization via serde.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1884,"byte_end":1950,"line_start":51,"line_end":51,"column_start":1,"column_end":67}},{"value":"/ - `unstable-locales`: Enable localization. This adds various methods with a","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1951,"byte_end":2030,"line_start":52,"line_end":52,"column_start":1,"column_end":80}},{"value":"/   `_localized` suffix. The implementation and API may change or even be","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2031,"byte_end":2106,"line_start":53,"line_end":53,"column_start":1,"column_end":76}},{"value":"/   removed in a patch release. Feedback welcome.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2107,"byte_end":2158,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2159,"byte_end":2162,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ [`serde`]: https://github.com/serde-rs/serde","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2163,"byte_end":2211,"line_start":56,"line_end":56,"column_start":1,"column_end":49}},{"value":"/ [wasm-bindgen]: https://github.com/rustwasm/wasm-bindgen","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2212,"byte_end":2272,"line_start":57,"line_end":57,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2273,"byte_end":2276,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ See the [cargo docs][] for examples of specifying features.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2277,"byte_end":2340,"line_start":59,"line_end":59,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2341,"byte_end":2344,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ [cargo docs]: https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choosing-features","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2345,"byte_end":2451,"line_start":61,"line_end":61,"column_start":1,"column_end":107}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2452,"byte_end":2455,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ ## Overview","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2456,"byte_end":2471,"line_start":63,"line_end":63,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2472,"byte_end":2475,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ ### Duration","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2476,"byte_end":2492,"line_start":65,"line_end":65,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2493,"byte_end":2496,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ Chrono currently uses its own [`Duration`] type to represent the magnitude","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2497,"byte_end":2575,"line_start":67,"line_end":67,"column_start":1,"column_end":79}},{"value":"/ of a time span. Since this has the same name as the newer, standard type for","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2576,"byte_end":2656,"line_start":68,"line_end":68,"column_start":1,"column_end":81}},{"value":"/ duration, the reference will refer this type as `OldDuration`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2657,"byte_end":2723,"line_start":69,"line_end":69,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2724,"byte_end":2727,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ Note that this is an \"accurate\" duration represented as seconds and","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2728,"byte_end":2799,"line_start":71,"line_end":71,"column_start":1,"column_end":72}},{"value":"/ nanoseconds and does not represent \"nominal\" components such as days or","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2800,"byte_end":2875,"line_start":72,"line_end":72,"column_start":1,"column_end":76}},{"value":"/ months.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2876,"byte_end":2887,"line_start":73,"line_end":73,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2888,"byte_end":2891,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ When the `oldtime` feature is enabled, [`Duration`] is an alias for the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2892,"byte_end":2967,"line_start":75,"line_end":75,"column_start":1,"column_end":76}},{"value":"/ [`time::Duration`](https://docs.rs/time/0.1.40/time/struct.Duration.html)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2968,"byte_end":3045,"line_start":76,"line_end":76,"column_start":1,"column_end":78}},{"value":"/ type from v0.1 of the time crate. time v0.1 is deprecated, so new code","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3046,"byte_end":3120,"line_start":77,"line_end":77,"column_start":1,"column_end":75}},{"value":"/ should disable the `oldtime` feature and use the `chrono::Duration` type","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3121,"byte_end":3197,"line_start":78,"line_end":78,"column_start":1,"column_end":77}},{"value":"/ instead. The `oldtime` feature is enabled by default for backwards","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3198,"byte_end":3268,"line_start":79,"line_end":79,"column_start":1,"column_end":71}},{"value":"/ compatibility, but future versions of Chrono are likely to remove the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3269,"byte_end":3342,"line_start":80,"line_end":80,"column_start":1,"column_end":74}},{"value":"/ feature entirely.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3343,"byte_end":3364,"line_start":81,"line_end":81,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3365,"byte_end":3368,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ Chrono does not yet natively support","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3369,"byte_end":3409,"line_start":83,"line_end":83,"column_start":1,"column_end":41}},{"value":"/ the standard [`Duration`](https://doc.rust-lang.org/std/time/struct.Duration.html) type,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3410,"byte_end":3502,"line_start":84,"line_end":84,"column_start":1,"column_end":93}},{"value":"/ but it will be supported in the future.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3503,"byte_end":3546,"line_start":85,"line_end":85,"column_start":1,"column_end":44}},{"value":"/ Meanwhile you can convert between two types with","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3547,"byte_end":3599,"line_start":86,"line_end":86,"column_start":1,"column_end":53}},{"value":"/ [`Duration::from_std`](https://docs.rs/time/0.1.40/time/struct.Duration.html#method.from_std)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3600,"byte_end":3697,"line_start":87,"line_end":87,"column_start":1,"column_end":98}},{"value":"/ and","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3698,"byte_end":3705,"line_start":88,"line_end":88,"column_start":1,"column_end":8}},{"value":"/ [`Duration::to_std`](https://docs.rs/time/0.1.40/time/struct.Duration.html#method.to_std)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3706,"byte_end":3799,"line_start":89,"line_end":89,"column_start":1,"column_end":94}},{"value":"/ methods.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3800,"byte_end":3812,"line_start":90,"line_end":90,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3813,"byte_end":3816,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ ### Date and Time","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3817,"byte_end":3838,"line_start":92,"line_end":92,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3839,"byte_end":3842,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ Chrono provides a","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3843,"byte_end":3864,"line_start":94,"line_end":94,"column_start":1,"column_end":22}},{"value":"/ [**`DateTime`**](./struct.DateTime.html)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3865,"byte_end":3909,"line_start":95,"line_end":95,"column_start":1,"column_end":45}},{"value":"/ type to represent a date and a time in a timezone.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3910,"byte_end":3964,"line_start":96,"line_end":96,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3965,"byte_end":3968,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ For more abstract moment-in-time tracking such as internal timekeeping","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3969,"byte_end":4043,"line_start":98,"line_end":98,"column_start":1,"column_end":75}},{"value":"/ that is unconcerned with timezones, consider","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4044,"byte_end":4092,"line_start":99,"line_end":99,"column_start":1,"column_end":49}},{"value":"/ [`time::SystemTime`](https://doc.rust-lang.org/std/time/struct.SystemTime.html),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4093,"byte_end":4177,"line_start":100,"line_end":100,"column_start":1,"column_end":85}},{"value":"/ which tracks your system clock, or","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4178,"byte_end":4216,"line_start":101,"line_end":101,"column_start":1,"column_end":39}},{"value":"/ [`time::Instant`](https://doc.rust-lang.org/std/time/struct.Instant.html), which","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4217,"byte_end":4301,"line_start":102,"line_end":102,"column_start":1,"column_end":85}},{"value":"/ is an opaque but monotonically-increasing representation of a moment in time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4302,"byte_end":4383,"line_start":103,"line_end":103,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4384,"byte_end":4387,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ `DateTime` is timezone-aware and must be constructed from","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4388,"byte_end":4449,"line_start":105,"line_end":105,"column_start":1,"column_end":62}},{"value":"/ the [**`TimeZone`**](./offset/trait.TimeZone.html) object,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4450,"byte_end":4512,"line_start":106,"line_end":106,"column_start":1,"column_end":63}},{"value":"/ which defines how the local date is converted to and back from the UTC date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4513,"byte_end":4593,"line_start":107,"line_end":107,"column_start":1,"column_end":81}},{"value":"/ There are three well-known `TimeZone` implementations:","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4594,"byte_end":4652,"line_start":108,"line_end":108,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4653,"byte_end":4656,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ * [**`Utc`**](./offset/struct.Utc.html) specifies the UTC time zone. It is most efficient.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4657,"byte_end":4751,"line_start":110,"line_end":110,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4752,"byte_end":4755,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ * [**`Local`**](./offset/struct.Local.html) specifies the system local time zone.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4756,"byte_end":4841,"line_start":112,"line_end":112,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4842,"byte_end":4845,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ * [**`FixedOffset`**](./offset/struct.FixedOffset.html) specifies","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4846,"byte_end":4915,"line_start":114,"line_end":114,"column_start":1,"column_end":70}},{"value":"/   an arbitrary, fixed time zone such as UTC+09:00 or UTC-10:30.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4916,"byte_end":4983,"line_start":115,"line_end":115,"column_start":1,"column_end":68}},{"value":"/   This often results from the parsed textual date and time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4984,"byte_end":5047,"line_start":116,"line_end":116,"column_start":1,"column_end":64}},{"value":"/   Since it stores the most information and does not depend on the system environment,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5048,"byte_end":5137,"line_start":117,"line_end":117,"column_start":1,"column_end":90}},{"value":"/   you would want to normalize other `TimeZone`s into this type.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5138,"byte_end":5205,"line_start":118,"line_end":118,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5206,"byte_end":5209,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ `DateTime`s with different `TimeZone` types are distinct and do not mix,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5210,"byte_end":5286,"line_start":120,"line_end":120,"column_start":1,"column_end":77}},{"value":"/ but can be converted to each other using","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5287,"byte_end":5331,"line_start":121,"line_end":121,"column_start":1,"column_end":45}},{"value":"/ the [`DateTime::with_timezone`](./struct.DateTime.html#method.with_timezone) method.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5332,"byte_end":5420,"line_start":122,"line_end":122,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5421,"byte_end":5424,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ You can get the current date and time in the UTC time zone","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5425,"byte_end":5487,"line_start":124,"line_end":124,"column_start":1,"column_end":63}},{"value":"/ ([`Utc::now()`](./offset/struct.Utc.html#method.now))","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5488,"byte_end":5545,"line_start":125,"line_end":125,"column_start":1,"column_end":58}},{"value":"/ or in the local time zone","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5546,"byte_end":5575,"line_start":126,"line_end":126,"column_start":1,"column_end":30}},{"value":"/ ([`Local::now()`](./offset/struct.Local.html#method.now)).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5576,"byte_end":5638,"line_start":127,"line_end":127,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5639,"byte_end":5642,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5643,"byte_end":5654,"line_start":129,"line_end":129,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5655,"byte_end":5682,"line_start":130,"line_end":130,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5683,"byte_end":5686,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ let utc: DateTime<Utc> = Utc::now();       // e.g. `2014-11-28T12:45:59.324310806Z`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5687,"byte_end":5774,"line_start":132,"line_end":132,"column_start":1,"column_end":88}},{"value":"/ let local: DateTime<Local> = Local::now(); // e.g. `2014-11-28T21:45:59.324310806+09:00`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5775,"byte_end":5867,"line_start":133,"line_end":133,"column_start":1,"column_end":93}},{"value":"/ # let _ = utc; let _ = local;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5868,"byte_end":5901,"line_start":134,"line_end":134,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5902,"byte_end":5909,"line_start":135,"line_end":135,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5910,"byte_end":5913,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ Alternatively, you can create your own date and time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5914,"byte_end":5971,"line_start":137,"line_end":137,"column_start":1,"column_end":58}},{"value":"/ This is a bit verbose due to Rust's lack of function and method overloading,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5972,"byte_end":6052,"line_start":138,"line_end":138,"column_start":1,"column_end":81}},{"value":"/ but in turn we get a rich combination of initialization methods.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6053,"byte_end":6121,"line_start":139,"line_end":139,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6122,"byte_end":6125,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6126,"byte_end":6137,"line_start":141,"line_end":141,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6138,"byte_end":6165,"line_start":142,"line_end":142,"column_start":1,"column_end":28}},{"value":"/ use chrono::offset::LocalResult;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6166,"byte_end":6202,"line_start":143,"line_end":143,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6203,"byte_end":6206,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2014, 7, 8).and_hms(9, 10, 11); // `2014-07-08T09:10:11Z`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6207,"byte_end":6285,"line_start":145,"line_end":145,"column_start":1,"column_end":79}},{"value":"/ // July 8 is 188th day of the year 2014 (`o` for \"ordinal\")","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6286,"byte_end":6349,"line_start":146,"line_end":146,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(dt, Utc.yo(2014, 189).and_hms(9, 10, 11));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6350,"byte_end":6407,"line_start":147,"line_end":147,"column_start":1,"column_end":58}},{"value":"/ // July 8 is Tuesday in ISO week 28 of the year 2014.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6408,"byte_end":6465,"line_start":148,"line_end":148,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(dt, Utc.isoywd(2014, 28, Weekday::Tue).and_hms(9, 10, 11));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6466,"byte_end":6540,"line_start":149,"line_end":149,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6541,"byte_end":6544,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2014, 7, 8).and_hms_milli(9, 10, 11, 12); // `2014-07-08T09:10:11.012Z`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6545,"byte_end":6637,"line_start":151,"line_end":151,"column_start":1,"column_end":93}},{"value":"/ assert_eq!(dt, Utc.ymd(2014, 7, 8).and_hms_micro(9, 10, 11, 12_000));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6638,"byte_end":6711,"line_start":152,"line_end":152,"column_start":1,"column_end":74}},{"value":"/ assert_eq!(dt, Utc.ymd(2014, 7, 8).and_hms_nano(9, 10, 11, 12_000_000));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6712,"byte_end":6788,"line_start":153,"line_end":153,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6789,"byte_end":6792,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ // dynamic verification","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6793,"byte_end":6820,"line_start":155,"line_end":155,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(Utc.ymd_opt(2014, 7, 8).and_hms_opt(21, 15, 33),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6821,"byte_end":6884,"line_start":156,"line_end":156,"column_start":1,"column_end":64}},{"value":"/            LocalResult::Single(Utc.ymd(2014, 7, 8).and_hms(21, 15, 33)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6885,"byte_end":6962,"line_start":157,"line_end":157,"column_start":1,"column_end":78}},{"value":"/ assert_eq!(Utc.ymd_opt(2014, 7, 8).and_hms_opt(80, 15, 33), LocalResult::None);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6963,"byte_end":7046,"line_start":158,"line_end":158,"column_start":1,"column_end":84}},{"value":"/ assert_eq!(Utc.ymd_opt(2014, 7, 38).and_hms_opt(21, 15, 33), LocalResult::None);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7047,"byte_end":7131,"line_start":159,"line_end":159,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7132,"byte_end":7135,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ // other time zone objects can be used to construct a local datetime.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7136,"byte_end":7209,"line_start":161,"line_end":161,"column_start":1,"column_end":74}},{"value":"/ // obviously, `local_dt` is normally different from `dt`, but `fixed_dt` should be identical.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7210,"byte_end":7307,"line_start":162,"line_end":162,"column_start":1,"column_end":98}},{"value":"/ let local_dt = Local.ymd(2014, 7, 8).and_hms_milli(9, 10, 11, 12);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7308,"byte_end":7378,"line_start":163,"line_end":163,"column_start":1,"column_end":71}},{"value":"/ let fixed_dt = FixedOffset::east(9 * 3600).ymd(2014, 7, 8).and_hms_milli(18, 10, 11, 12);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7379,"byte_end":7472,"line_start":164,"line_end":164,"column_start":1,"column_end":94}},{"value":"/ assert_eq!(dt, fixed_dt);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7473,"byte_end":7502,"line_start":165,"line_end":165,"column_start":1,"column_end":30}},{"value":"/ # let _ = local_dt;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7503,"byte_end":7526,"line_start":166,"line_end":166,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7527,"byte_end":7534,"line_start":167,"line_end":167,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7535,"byte_end":7538,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ Various properties are available to the date and time, and can be altered individually.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7539,"byte_end":7630,"line_start":169,"line_end":169,"column_start":1,"column_end":92}},{"value":"/ Most of them are defined in the traits [`Datelike`](./trait.Datelike.html) and","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7631,"byte_end":7713,"line_start":170,"line_end":170,"column_start":1,"column_end":83}},{"value":"/ [`Timelike`](./trait.Timelike.html) which you should `use` before.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7714,"byte_end":7784,"line_start":171,"line_end":171,"column_start":1,"column_end":71}},{"value":"/ Addition and subtraction is also supported.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7785,"byte_end":7832,"line_start":172,"line_end":172,"column_start":1,"column_end":48}},{"value":"/ The following illustrates most supported operations to the date and time:","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7833,"byte_end":7910,"line_start":173,"line_end":173,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7911,"byte_end":7914,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7915,"byte_end":7926,"line_start":175,"line_end":175,"column_start":1,"column_end":12}},{"value":"/ # extern crate chrono;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7927,"byte_end":7953,"line_start":176,"line_end":176,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7954,"byte_end":7957,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7958,"byte_end":7975,"line_start":178,"line_end":178,"column_start":1,"column_end":18}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7976,"byte_end":8003,"line_start":179,"line_end":179,"column_start":1,"column_end":28}},{"value":"/ use chrono::Duration;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8004,"byte_end":8029,"line_start":180,"line_end":180,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8030,"byte_end":8033,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ // assume this returned `2014-11-28T21:45:59.324310806+09:00`:","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8034,"byte_end":8100,"line_start":182,"line_end":182,"column_start":1,"column_end":67}},{"value":"/ let dt = FixedOffset::east(9*3600).ymd(2014, 11, 28).and_hms_nano(21, 45, 59, 324310806);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8101,"byte_end":8194,"line_start":183,"line_end":183,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8195,"byte_end":8198,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ // property accessors","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8199,"byte_end":8224,"line_start":185,"line_end":185,"column_start":1,"column_end":26}},{"value":"/ assert_eq!((dt.year(), dt.month(), dt.day()), (2014, 11, 28));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8225,"byte_end":8291,"line_start":186,"line_end":186,"column_start":1,"column_end":67}},{"value":"/ assert_eq!((dt.month0(), dt.day0()), (10, 27)); // for unfortunate souls","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8292,"byte_end":8368,"line_start":187,"line_end":187,"column_start":1,"column_end":77}},{"value":"/ assert_eq!((dt.hour(), dt.minute(), dt.second()), (21, 45, 59));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8369,"byte_end":8437,"line_start":188,"line_end":188,"column_start":1,"column_end":69}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Fri);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8438,"byte_end":8481,"line_start":189,"line_end":189,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(dt.weekday().number_from_monday(), 5); // Mon=1, ..., Sun=7","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8482,"byte_end":8556,"line_start":190,"line_end":190,"column_start":1,"column_end":75}},{"value":"/ assert_eq!(dt.ordinal(), 332); // the day of year","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8557,"byte_end":8610,"line_start":191,"line_end":191,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(dt.num_days_from_ce(), 735565); // the number of days from and including Jan 1, 1","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8611,"byte_end":8707,"line_start":192,"line_end":192,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8708,"byte_end":8711,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ // time zone accessor and manipulation","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8712,"byte_end":8754,"line_start":194,"line_end":194,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(dt.offset().fix().local_minus_utc(), 9 * 3600);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8755,"byte_end":8817,"line_start":195,"line_end":195,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(dt.timezone(), FixedOffset::east(9 * 3600));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8818,"byte_end":8877,"line_start":196,"line_end":196,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(dt.with_timezone(&Utc), Utc.ymd(2014, 11, 28).and_hms_nano(12, 45, 59, 324310806));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8878,"byte_end":8976,"line_start":197,"line_end":197,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8977,"byte_end":8980,"line_start":198,"line_end":198,"column_start":1,"column_end":4}},{"value":"/ // a sample of property manipulations (validates dynamically)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8981,"byte_end":9046,"line_start":199,"line_end":199,"column_start":1,"column_end":66}},{"value":"/ assert_eq!(dt.with_day(29).unwrap().weekday(), Weekday::Sat); // 2014-11-29 is Saturday","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9047,"byte_end":9138,"line_start":200,"line_end":200,"column_start":1,"column_end":92}},{"value":"/ assert_eq!(dt.with_day(32), None);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9139,"byte_end":9177,"line_start":201,"line_end":201,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(dt.with_year(-300).unwrap().num_days_from_ce(), -109606); // November 29, 301 BCE","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9178,"byte_end":9274,"line_start":202,"line_end":202,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9275,"byte_end":9278,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ // arithmetic operations","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9279,"byte_end":9307,"line_start":204,"line_end":204,"column_start":1,"column_end":29}},{"value":"/ let dt1 = Utc.ymd(2014, 11, 14).and_hms(8, 9, 10);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9308,"byte_end":9362,"line_start":205,"line_end":205,"column_start":1,"column_end":55}},{"value":"/ let dt2 = Utc.ymd(2014, 11, 14).and_hms(10, 9, 8);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9363,"byte_end":9417,"line_start":206,"line_end":206,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(dt1.signed_duration_since(dt2), Duration::seconds(-2 * 3600 + 2));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9418,"byte_end":9499,"line_start":207,"line_end":207,"column_start":1,"column_end":82}},{"value":"/ assert_eq!(dt2.signed_duration_since(dt1), Duration::seconds(2 * 3600 - 2));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9500,"byte_end":9580,"line_start":208,"line_end":208,"column_start":1,"column_end":81}},{"value":"/ assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 0, 0) + Duration::seconds(1_000_000_000),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9581,"byte_end":9668,"line_start":209,"line_end":209,"column_start":1,"column_end":88}},{"value":"/            Utc.ymd(2001, 9, 9).and_hms(1, 46, 40));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9669,"byte_end":9724,"line_start":210,"line_end":210,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 0, 0) - Duration::seconds(1_000_000_000),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9725,"byte_end":9812,"line_start":211,"line_end":211,"column_start":1,"column_end":88}},{"value":"/            Utc.ymd(1938, 4, 24).and_hms(22, 13, 20));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9813,"byte_end":9870,"line_start":212,"line_end":212,"column_start":1,"column_end":58}},{"value":"/ # }","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9871,"byte_end":9878,"line_start":213,"line_end":213,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9879,"byte_end":9886,"line_start":214,"line_end":214,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9887,"byte_end":9890,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ ### Formatting and Parsing","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9891,"byte_end":9921,"line_start":216,"line_end":216,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9922,"byte_end":9925,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ Formatting is done via the [`format`](./struct.DateTime.html#method.format) method,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9926,"byte_end":10013,"line_start":218,"line_end":218,"column_start":1,"column_end":88}},{"value":"/ which format is equivalent to the familiar `strftime` format.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10014,"byte_end":10079,"line_start":219,"line_end":219,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10080,"byte_end":10083,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ See [`format::strftime`](./format/strftime/index.html#specifiers)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10084,"byte_end":10153,"line_start":221,"line_end":221,"column_start":1,"column_end":70}},{"value":"/ documentation for full syntax and list of specifiers.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10154,"byte_end":10211,"line_start":222,"line_end":222,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10212,"byte_end":10215,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ The default `to_string` method and `{:?}` specifier also give a reasonable representation.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10216,"byte_end":10310,"line_start":224,"line_end":224,"column_start":1,"column_end":95}},{"value":"/ Chrono also provides [`to_rfc2822`](./struct.DateTime.html#method.to_rfc2822) and","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10311,"byte_end":10396,"line_start":225,"line_end":225,"column_start":1,"column_end":86}},{"value":"/ [`to_rfc3339`](./struct.DateTime.html#method.to_rfc3339) methods","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10397,"byte_end":10465,"line_start":226,"line_end":226,"column_start":1,"column_end":69}},{"value":"/ for well-known formats.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10466,"byte_end":10493,"line_start":227,"line_end":227,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10494,"byte_end":10497,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ Chrono now also provides date formatting in almost any language without the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10498,"byte_end":10577,"line_start":229,"line_end":229,"column_start":1,"column_end":80}},{"value":"/ help of an additional C library. This functionality is under the feature","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10578,"byte_end":10654,"line_start":230,"line_end":230,"column_start":1,"column_end":77}},{"value":"/ `unstable-locales`:","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10655,"byte_end":10678,"line_start":231,"line_end":231,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10679,"byte_end":10682,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10683,"byte_end":10694,"line_start":233,"line_end":233,"column_start":1,"column_end":12}},{"value":"/ chrono { version = \"0.4\", features = [\"unstable-locales\"]","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10695,"byte_end":10756,"line_start":234,"line_end":234,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10757,"byte_end":10764,"line_start":235,"line_end":235,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10765,"byte_end":10768,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ The `unstable-locales` feature requires and implies at least the `alloc` feature.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10769,"byte_end":10854,"line_start":237,"line_end":237,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10855,"byte_end":10858,"line_start":238,"line_end":238,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10859,"byte_end":10870,"line_start":239,"line_end":239,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10871,"byte_end":10898,"line_start":240,"line_end":240,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10899,"byte_end":10902,"line_start":241,"line_end":241,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2014, 11, 28).and_hms(12, 0, 9);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10903,"byte_end":10956,"line_start":242,"line_end":242,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(), \"2014-11-28 12:00:09\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10957,"byte_end":11039,"line_start":243,"line_end":243,"column_start":1,"column_end":83}},{"value":"/ assert_eq!(dt.format(\"%a %b %e %T %Y\").to_string(), \"Fri Nov 28 12:00:09 2014\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11040,"byte_end":11124,"line_start":244,"line_end":244,"column_start":1,"column_end":85}},{"value":"/ assert_eq!(dt.format_localized(\"%A %e %B %Y, %T\", Locale::fr_BE).to_string(), \"vendredi 28 novembre 2014, 12:00:09\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11125,"byte_end":11246,"line_start":245,"line_end":245,"column_start":1,"column_end":122}},{"value":"/ assert_eq!(dt.format(\"%a %b %e %T %Y\").to_string(), dt.format(\"%c\").to_string());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11247,"byte_end":11332,"line_start":246,"line_end":246,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11333,"byte_end":11336,"line_start":247,"line_end":247,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(dt.to_string(), \"2014-11-28 12:00:09 UTC\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11337,"byte_end":11395,"line_start":248,"line_end":248,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(dt.to_rfc2822(), \"Fri, 28 Nov 2014 12:00:09 +0000\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11396,"byte_end":11463,"line_start":249,"line_end":249,"column_start":1,"column_end":68}},{"value":"/ assert_eq!(dt.to_rfc3339(), \"2014-11-28T12:00:09+00:00\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11464,"byte_end":11525,"line_start":250,"line_end":250,"column_start":1,"column_end":62}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2014-11-28T12:00:09Z\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11526,"byte_end":11586,"line_start":251,"line_end":251,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11587,"byte_end":11590,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ // Note that milli/nanoseconds are only printed if they are non-zero","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11591,"byte_end":11663,"line_start":253,"line_end":253,"column_start":1,"column_end":73}},{"value":"/ let dt_nano = Utc.ymd(2014, 11, 28).and_hms_nano(12, 0, 9, 1);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11664,"byte_end":11730,"line_start":254,"line_end":254,"column_start":1,"column_end":67}},{"value":"/ assert_eq!(format!(\"{:?}\", dt_nano), \"2014-11-28T12:00:09.000000001Z\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11731,"byte_end":11806,"line_start":255,"line_end":255,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11807,"byte_end":11814,"line_start":256,"line_end":256,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11815,"byte_end":11818,"line_start":257,"line_end":257,"column_start":1,"column_end":4}},{"value":"/ Parsing can be done with three methods:","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11819,"byte_end":11862,"line_start":258,"line_end":258,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11863,"byte_end":11866,"line_start":259,"line_end":259,"column_start":1,"column_end":4}},{"value":"/ 1. The standard [`FromStr`](https://doc.rust-lang.org/std/str/trait.FromStr.html) trait","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11867,"byte_end":11958,"line_start":260,"line_end":260,"column_start":1,"column_end":92}},{"value":"/    (and [`parse`](https://doc.rust-lang.org/std/primitive.str.html#method.parse) method","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11959,"byte_end":12050,"line_start":261,"line_end":261,"column_start":1,"column_end":92}},{"value":"/    on a string) can be used for parsing `DateTime<FixedOffset>`, `DateTime<Utc>` and","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":12051,"byte_end":12139,"line_start":262,"line_end":262,"column_start":1,"column_end":89}},{"value":"/    `DateTime<Local>` values. This parses what the `{:?}`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":12140,"byte_end":12200,"line_start":263,"line_end":263,"column_start":1,"column_end":61}},{"value":"/    ([`std::fmt::Debug`](https://doc.rust-lang.org/std/fmt/trait.Debug.html))","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":12201,"byte_end":12281,"line_start":264,"line_end":264,"column_start":1,"column_end":81}},{"value":"/    format specifier prints, and requires the offset to be present.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":12282,"byte_end":12352,"line_start":265,"line_end":265,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":12353,"byte_end":12356,"line_start":266,"line_end":266,"column_start":1,"column_end":4}},{"value":"/ 2. [`DateTime::parse_from_str`](./struct.DateTime.html#method.parse_from_str) parses","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":12357,"byte_end":12445,"line_start":267,"line_end":267,"column_start":1,"column_end":89}},{"value":"/    a date and time with offsets and returns `DateTime<FixedOffset>`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":12446,"byte_end":12518,"line_start":268,"line_end":268,"column_start":1,"column_end":73}},{"value":"/    This should be used when the offset is a part of input and the caller cannot guess that.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":12519,"byte_end":12614,"line_start":269,"line_end":269,"column_start":1,"column_end":96}},{"value":"/    It *cannot* be used when the offset can be missing.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":12615,"byte_end":12673,"line_start":270,"line_end":270,"column_start":1,"column_end":59}},{"value":"/    [`DateTime::parse_from_rfc2822`](./struct.DateTime.html#method.parse_from_rfc2822)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":12674,"byte_end":12763,"line_start":271,"line_end":271,"column_start":1,"column_end":90}},{"value":"/    and","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":12764,"byte_end":12774,"line_start":272,"line_end":272,"column_start":1,"column_end":11}},{"value":"/    [`DateTime::parse_from_rfc3339`](./struct.DateTime.html#method.parse_from_rfc3339)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":12775,"byte_end":12864,"line_start":273,"line_end":273,"column_start":1,"column_end":90}},{"value":"/    are similar but for well-known formats.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":12865,"byte_end":12911,"line_start":274,"line_end":274,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":12912,"byte_end":12915,"line_start":275,"line_end":275,"column_start":1,"column_end":4}},{"value":"/ 3. [`Offset::datetime_from_str`](./offset/trait.TimeZone.html#method.datetime_from_str) is","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":12916,"byte_end":13010,"line_start":276,"line_end":276,"column_start":1,"column_end":95}},{"value":"/    similar but returns `DateTime` of given offset.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13011,"byte_end":13065,"line_start":277,"line_end":277,"column_start":1,"column_end":55}},{"value":"/    When the explicit offset is missing from the input, it simply uses given offset.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13066,"byte_end":13153,"line_start":278,"line_end":278,"column_start":1,"column_end":88}},{"value":"/    It issues an error when the input contains an explicit offset different","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13154,"byte_end":13232,"line_start":279,"line_end":279,"column_start":1,"column_end":79}},{"value":"/    from the current offset.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13233,"byte_end":13264,"line_start":280,"line_end":280,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13265,"byte_end":13268,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ More detailed control over the parsing process is available via","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13269,"byte_end":13336,"line_start":282,"line_end":282,"column_start":1,"column_end":68}},{"value":"/ [`format`](./format/index.html) module.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13337,"byte_end":13380,"line_start":283,"line_end":283,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13381,"byte_end":13384,"line_start":284,"line_end":284,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13385,"byte_end":13396,"line_start":285,"line_end":285,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13397,"byte_end":13424,"line_start":286,"line_end":286,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13425,"byte_end":13428,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2014, 11, 28).and_hms(12, 0, 9);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13429,"byte_end":13482,"line_start":288,"line_end":288,"column_start":1,"column_end":54}},{"value":"/ let fixed_dt = dt.with_timezone(&FixedOffset::east(9*3600));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13483,"byte_end":13547,"line_start":289,"line_end":289,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13548,"byte_end":13551,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ // method 1","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13552,"byte_end":13567,"line_start":291,"line_end":291,"column_start":1,"column_end":16}},{"value":"/ assert_eq!(\"2014-11-28T12:00:09Z\".parse::<DateTime<Utc>>(), Ok(dt.clone()));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13568,"byte_end":13648,"line_start":292,"line_end":292,"column_start":1,"column_end":81}},{"value":"/ assert_eq!(\"2014-11-28T21:00:09+09:00\".parse::<DateTime<Utc>>(), Ok(dt.clone()));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13649,"byte_end":13734,"line_start":293,"line_end":293,"column_start":1,"column_end":86}},{"value":"/ assert_eq!(\"2014-11-28T21:00:09+09:00\".parse::<DateTime<FixedOffset>>(), Ok(fixed_dt.clone()));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13735,"byte_end":13834,"line_start":294,"line_end":294,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13835,"byte_end":13838,"line_start":295,"line_end":295,"column_start":1,"column_end":4}},{"value":"/ // method 2","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13839,"byte_end":13854,"line_start":296,"line_end":296,"column_start":1,"column_end":16}},{"value":"/ assert_eq!(DateTime::parse_from_str(\"2014-11-28 21:00:09 +09:00\", \"%Y-%m-%d %H:%M:%S %z\"),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13855,"byte_end":13949,"line_start":297,"line_end":297,"column_start":1,"column_end":95}},{"value":"/            Ok(fixed_dt.clone()));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13950,"byte_end":13987,"line_start":298,"line_end":298,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(DateTime::parse_from_rfc2822(\"Fri, 28 Nov 2014 21:00:09 +0900\"),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13988,"byte_end":14067,"line_start":299,"line_end":299,"column_start":1,"column_end":80}},{"value":"/            Ok(fixed_dt.clone()));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14068,"byte_end":14105,"line_start":300,"line_end":300,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(DateTime::parse_from_rfc3339(\"2014-11-28T21:00:09+09:00\"), Ok(fixed_dt.clone()));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14106,"byte_end":14202,"line_start":301,"line_end":301,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14203,"byte_end":14206,"line_start":302,"line_end":302,"column_start":1,"column_end":4}},{"value":"/ // method 3","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14207,"byte_end":14222,"line_start":303,"line_end":303,"column_start":1,"column_end":16}},{"value":"/ assert_eq!(Utc.datetime_from_str(\"2014-11-28 12:00:09\", \"%Y-%m-%d %H:%M:%S\"), Ok(dt.clone()));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14223,"byte_end":14321,"line_start":304,"line_end":304,"column_start":1,"column_end":99}},{"value":"/ assert_eq!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09 2014\", \"%a %b %e %T %Y\"), Ok(dt.clone()));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14322,"byte_end":14422,"line_start":305,"line_end":305,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14423,"byte_end":14426,"line_start":306,"line_end":306,"column_start":1,"column_end":4}},{"value":"/ // oops, the year is missing!","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14427,"byte_end":14460,"line_start":307,"line_end":307,"column_start":1,"column_end":34}},{"value":"/ assert!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09\", \"%a %b %e %T %Y\").is_err());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14461,"byte_end":14546,"line_start":308,"line_end":308,"column_start":1,"column_end":86}},{"value":"/ // oops, the format string does not include the year at all!","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14547,"byte_end":14611,"line_start":309,"line_end":309,"column_start":1,"column_end":65}},{"value":"/ assert!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09\", \"%a %b %e %T\").is_err());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14612,"byte_end":14694,"line_start":310,"line_end":310,"column_start":1,"column_end":83}},{"value":"/ // oops, the weekday is incorrect!","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14695,"byte_end":14733,"line_start":311,"line_end":311,"column_start":1,"column_end":39}},{"value":"/ assert!(Utc.datetime_from_str(\"Sat Nov 28 12:00:09 2014\", \"%a %b %e %T %Y\").is_err());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14734,"byte_end":14824,"line_start":312,"line_end":312,"column_start":1,"column_end":91}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14825,"byte_end":14832,"line_start":313,"line_end":313,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14833,"byte_end":14836,"line_start":314,"line_end":314,"column_start":1,"column_end":4}},{"value":"/ Again : See [`format::strftime`](./format/strftime/index.html#specifiers)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14837,"byte_end":14914,"line_start":315,"line_end":315,"column_start":1,"column_end":78}},{"value":"/ documentation for full syntax and list of specifiers.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14915,"byte_end":14972,"line_start":316,"line_end":316,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14973,"byte_end":14976,"line_start":317,"line_end":317,"column_start":1,"column_end":4}},{"value":"/ ### Conversion from and to EPOCH timestamps","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14977,"byte_end":15024,"line_start":318,"line_end":318,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15025,"byte_end":15028,"line_start":319,"line_end":319,"column_start":1,"column_end":4}},{"value":"/ Use [`Utc.timestamp(seconds, nanoseconds)`](./offset/trait.TimeZone.html#method.timestamp)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15029,"byte_end":15123,"line_start":320,"line_end":320,"column_start":1,"column_end":95}},{"value":"/ to construct a [`DateTime<Utc>`](./struct.DateTime.html) from a UNIX timestamp","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15124,"byte_end":15206,"line_start":321,"line_end":321,"column_start":1,"column_end":83}},{"value":"/ (seconds, nanoseconds that passed since January 1st 1970).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15207,"byte_end":15269,"line_start":322,"line_end":322,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15270,"byte_end":15273,"line_start":323,"line_end":323,"column_start":1,"column_end":4}},{"value":"/ Use [`DateTime.timestamp`](./struct.DateTime.html#method.timestamp) to get the timestamp (in seconds)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15274,"byte_end":15379,"line_start":324,"line_end":324,"column_start":1,"column_end":106}},{"value":"/ from a [`DateTime`](./struct.DateTime.html). Additionally, you can use","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15380,"byte_end":15454,"line_start":325,"line_end":325,"column_start":1,"column_end":75}},{"value":"/ [`DateTime.timestamp_subsec_nanos`](./struct.DateTime.html#method.timestamp_subsec_nanos)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15455,"byte_end":15548,"line_start":326,"line_end":326,"column_start":1,"column_end":94}},{"value":"/ to get the number of additional number of nanoseconds.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15549,"byte_end":15607,"line_start":327,"line_end":327,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15608,"byte_end":15611,"line_start":328,"line_end":328,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15612,"byte_end":15623,"line_start":329,"line_end":329,"column_start":1,"column_end":12}},{"value":"/ // We need the trait in scope to use Utc::timestamp().","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15624,"byte_end":15682,"line_start":330,"line_end":330,"column_start":1,"column_end":59}},{"value":"/ use chrono::{DateTime, TimeZone, Utc};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15683,"byte_end":15725,"line_start":331,"line_end":331,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15726,"byte_end":15729,"line_start":332,"line_end":332,"column_start":1,"column_end":4}},{"value":"/ // Construct a datetime from epoch:","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15730,"byte_end":15769,"line_start":333,"line_end":333,"column_start":1,"column_end":40}},{"value":"/ let dt = Utc.timestamp(1_500_000_000, 0);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15770,"byte_end":15815,"line_start":334,"line_end":334,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(dt.to_rfc2822(), \"Fri, 14 Jul 2017 02:40:00 +0000\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15816,"byte_end":15883,"line_start":335,"line_end":335,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15884,"byte_end":15887,"line_start":336,"line_end":336,"column_start":1,"column_end":4}},{"value":"/ // Get epoch value from a datetime:","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15888,"byte_end":15927,"line_start":337,"line_end":337,"column_start":1,"column_end":40}},{"value":"/ let dt = DateTime::parse_from_rfc2822(\"Fri, 14 Jul 2017 02:40:00 +0000\").unwrap();","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15928,"byte_end":16014,"line_start":338,"line_end":338,"column_start":1,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp(), 1_500_000_000);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16015,"byte_end":16061,"line_start":339,"line_end":339,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16062,"byte_end":16069,"line_start":340,"line_end":340,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16070,"byte_end":16073,"line_start":341,"line_end":341,"column_start":1,"column_end":4}},{"value":"/ ### Individual date","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16074,"byte_end":16097,"line_start":342,"line_end":342,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16098,"byte_end":16101,"line_start":343,"line_end":343,"column_start":1,"column_end":4}},{"value":"/ Chrono also provides an individual date type ([**`Date`**](./struct.Date.html)).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16102,"byte_end":16186,"line_start":344,"line_end":344,"column_start":1,"column_end":85}},{"value":"/ It also has time zones attached, and have to be constructed via time zones.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16187,"byte_end":16266,"line_start":345,"line_end":345,"column_start":1,"column_end":80}},{"value":"/ Most operations available to `DateTime` are also available to `Date` whenever appropriate.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16267,"byte_end":16361,"line_start":346,"line_end":346,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16362,"byte_end":16365,"line_start":347,"line_end":347,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16366,"byte_end":16377,"line_start":348,"line_end":348,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16378,"byte_end":16405,"line_start":349,"line_end":349,"column_start":1,"column_end":28}},{"value":"/ use chrono::offset::LocalResult;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16406,"byte_end":16442,"line_start":350,"line_end":350,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16443,"byte_end":16446,"line_start":351,"line_end":351,"column_start":1,"column_end":4}},{"value":"/ # // these *may* fail, but only very rarely. just rerun the test if you were that unfortunate ;)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16447,"byte_end":16547,"line_start":352,"line_end":352,"column_start":1,"column_end":101}},{"value":"/ assert_eq!(Utc::today(), Utc::now().date());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16548,"byte_end":16596,"line_start":353,"line_end":353,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(Local::today(), Local::now().date());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16597,"byte_end":16649,"line_start":354,"line_end":354,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16650,"byte_end":16653,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(Utc.ymd(2014, 11, 28).weekday(), Weekday::Fri);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16654,"byte_end":16716,"line_start":356,"line_end":356,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(Utc.ymd_opt(2014, 11, 31), LocalResult::None);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16717,"byte_end":16778,"line_start":357,"line_end":357,"column_start":1,"column_end":62}},{"value":"/ assert_eq!(Utc.ymd(2014, 11, 28).and_hms_milli(7, 8, 9, 10).format(\"%H%M%S\").to_string(),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16779,"byte_end":16872,"line_start":358,"line_end":358,"column_start":1,"column_end":94}},{"value":"/            \"070809\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16873,"byte_end":16898,"line_start":359,"line_end":359,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16899,"byte_end":16906,"line_start":360,"line_end":360,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16907,"byte_end":16910,"line_start":361,"line_end":361,"column_start":1,"column_end":4}},{"value":"/ There is no timezone-aware `Time` due to the lack of usefulness and also the complexity.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16911,"byte_end":17003,"line_start":362,"line_end":362,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17004,"byte_end":17007,"line_start":363,"line_end":363,"column_start":1,"column_end":4}},{"value":"/ `DateTime` has [`date`](./struct.DateTime.html#method.date) method","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17008,"byte_end":17078,"line_start":364,"line_end":364,"column_start":1,"column_end":71}},{"value":"/ which returns a `Date` which represents its date component.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17079,"byte_end":17142,"line_start":365,"line_end":365,"column_start":1,"column_end":64}},{"value":"/ There is also a [`time`](./struct.DateTime.html#method.time) method,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17143,"byte_end":17215,"line_start":366,"line_end":366,"column_start":1,"column_end":73}},{"value":"/ which simply returns a naive local time described below.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17216,"byte_end":17276,"line_start":367,"line_end":367,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17277,"byte_end":17280,"line_start":368,"line_end":368,"column_start":1,"column_end":4}},{"value":"/ ### Naive date and time","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17281,"byte_end":17308,"line_start":369,"line_end":369,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17309,"byte_end":17312,"line_start":370,"line_end":370,"column_start":1,"column_end":4}},{"value":"/ Chrono provides naive counterparts to `Date`, (non-existent) `Time` and `DateTime`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17313,"byte_end":17399,"line_start":371,"line_end":371,"column_start":1,"column_end":87}},{"value":"/ as [**`NaiveDate`**](./naive/struct.NaiveDate.html),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17400,"byte_end":17456,"line_start":372,"line_end":372,"column_start":1,"column_end":57}},{"value":"/ [**`NaiveTime`**](./naive/struct.NaiveTime.html) and","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17457,"byte_end":17513,"line_start":373,"line_end":373,"column_start":1,"column_end":57}},{"value":"/ [**`NaiveDateTime`**](./naive/struct.NaiveDateTime.html) respectively.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17514,"byte_end":17588,"line_start":374,"line_end":374,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17589,"byte_end":17592,"line_start":375,"line_end":375,"column_start":1,"column_end":4}},{"value":"/ They have almost equivalent interfaces as their timezone-aware twins,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17593,"byte_end":17666,"line_start":376,"line_end":376,"column_start":1,"column_end":74}},{"value":"/ but are not associated to time zones obviously and can be quite low-level.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17667,"byte_end":17745,"line_start":377,"line_end":377,"column_start":1,"column_end":79}},{"value":"/ They are mostly useful for building blocks for higher-level types.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17746,"byte_end":17816,"line_start":378,"line_end":378,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17817,"byte_end":17820,"line_start":379,"line_end":379,"column_start":1,"column_end":4}},{"value":"/ Timezone-aware `DateTime` and `Date` types have two methods returning naive versions:","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17821,"byte_end":17910,"line_start":380,"line_end":380,"column_start":1,"column_end":90}},{"value":"/ [`naive_local`](./struct.DateTime.html#method.naive_local) returns","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17911,"byte_end":17981,"line_start":381,"line_end":381,"column_start":1,"column_end":71}},{"value":"/ a view to the naive local time,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17982,"byte_end":18017,"line_start":382,"line_end":382,"column_start":1,"column_end":36}},{"value":"/ and [`naive_utc`](./struct.DateTime.html#method.naive_utc) returns","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18018,"byte_end":18088,"line_start":383,"line_end":383,"column_start":1,"column_end":71}},{"value":"/ a view to the naive UTC time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18089,"byte_end":18122,"line_start":384,"line_end":384,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18123,"byte_end":18126,"line_start":385,"line_end":385,"column_start":1,"column_end":4}},{"value":"/ ## Limitations","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18127,"byte_end":18145,"line_start":386,"line_end":386,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18146,"byte_end":18149,"line_start":387,"line_end":387,"column_start":1,"column_end":4}},{"value":"/ Only proleptic Gregorian calendar (i.e. extended to support older dates) is supported.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18150,"byte_end":18240,"line_start":388,"line_end":388,"column_start":1,"column_end":91}},{"value":"/ Be very careful if you really have to deal with pre-20C dates, they can be in Julian or others.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18241,"byte_end":18340,"line_start":389,"line_end":389,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18341,"byte_end":18344,"line_start":390,"line_end":390,"column_start":1,"column_end":4}},{"value":"/ Date types are limited in about +/- 262,000 years from the common epoch.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18345,"byte_end":18421,"line_start":391,"line_end":391,"column_start":1,"column_end":77}},{"value":"/ Time types are limited in the nanosecond accuracy.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18422,"byte_end":18476,"line_start":392,"line_end":392,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18477,"byte_end":18480,"line_start":393,"line_end":393,"column_start":1,"column_end":4}},{"value":"/ [Leap seconds are supported in the representation but","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18481,"byte_end":18538,"line_start":394,"line_end":394,"column_start":1,"column_end":58}},{"value":"/ Chrono doesn't try to make use of them](./naive/struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18539,"byte_end":18635,"line_start":395,"line_end":395,"column_start":1,"column_end":97}},{"value":"/ (The main reason is that leap seconds are not really predictable.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18636,"byte_end":18706,"line_start":396,"line_end":396,"column_start":1,"column_end":71}},{"value":"/ Almost *every* operation over the possible leap seconds will ignore them.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18707,"byte_end":18784,"line_start":397,"line_end":397,"column_start":1,"column_end":78}},{"value":"/ Consider using `NaiveDateTime` with the implicit TAI (International Atomic Time) scale","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18785,"byte_end":18875,"line_start":398,"line_end":398,"column_start":1,"column_end":91}},{"value":"/ if you want.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18876,"byte_end":18892,"line_start":399,"line_end":399,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18893,"byte_end":18896,"line_start":400,"line_end":400,"column_start":1,"column_end":4}},{"value":"/ Chrono inherently does not support an inaccurate or partial date and time representation.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18897,"byte_end":18990,"line_start":401,"line_end":401,"column_start":1,"column_end":94}},{"value":"/ Any operation that can be ambiguous will return `None` in such cases.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18991,"byte_end":19064,"line_start":402,"line_end":402,"column_start":1,"column_end":74}},{"value":"/ For example, \"a month later\" of 2014-01-30 is not well-defined","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":19065,"byte_end":19131,"line_start":403,"line_end":403,"column_start":1,"column_end":67}},{"value":"/ and consequently `Utc.ymd(2014, 1, 30).with_month(2)` returns `None`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":19132,"byte_end":19205,"line_start":404,"line_end":404,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":19206,"byte_end":19209,"line_start":405,"line_end":405,"column_start":1,"column_end":4}},{"value":"/ Non ISO week handling is not yet supported.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":19210,"byte_end":19257,"line_start":406,"line_end":406,"column_start":1,"column_end":48}},{"value":"/ For now you can use the [chrono_ext](https://crates.io/crates/chrono_ext)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":19258,"byte_end":19335,"line_start":407,"line_end":407,"column_start":1,"column_end":78}},{"value":"/ crate ([sources](https://github.com/bcourtine/chrono-ext/)).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":19336,"byte_end":19400,"line_start":408,"line_end":408,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":19401,"byte_end":19404,"line_start":409,"line_end":409,"column_start":1,"column_end":4}},{"value":"/ Advanced time zone handling is not yet supported.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":19405,"byte_end":19458,"line_start":410,"line_end":410,"column_start":1,"column_end":54}},{"value":"/ For now you can try the [Chrono-tz](https://github.com/chronotope/chrono-tz/) crate instead.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":19459,"byte_end":19555,"line_start":411,"line_end":411,"column_start":1,"column_end":97}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":19704,"byte_end":19726,"line_start":415,"line_end":415,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":19727,"byte_end":19766,"line_start":416,"line_end":416,"column_start":1,"column_end":40}},{"value":"deny(dead_code)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":19767,"byte_end":19786,"line_start":417,"line_end":417,"column_start":1,"column_end":20}},{"value":"allow(unknown_lints)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":19836,"byte_end":19860,"line_start":419,"line_end":419,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":2294},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":57645,"byte_end":57653,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"name":"Duration","qualname":"::oldtime::Duration","value":"Duration {  }","parent":null,"children":[{"krate":0,"index":2295},{"krate":0,"index":2296}],"decl_id":null,"docs":" ISO 8601 time duration with nanosecond precision.\n This also allows for the negative duration; see individual methods for details.\n","sig":null,"attributes":[{"value":"/ ISO 8601 time duration with nanosecond precision.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":57434,"byte_end":57487,"line_start":47,"line_end":47,"column_start":1,"column_end":54}},{"value":"/ This also allows for the negative duration; see individual methods for details.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":57488,"byte_end":57571,"line_start":48,"line_end":48,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":58398,"byte_end":58403,"line_start":72,"line_end":72,"column_start":12,"column_end":17},"name":"weeks","qualname":"<Duration>::weeks","value":"pub fn weeks(i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of weeks.\n Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\n Panics when the duration is out of bounds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of weeks.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":58177,"byte_end":58231,"line_start":68,"line_end":68,"column_start":5,"column_end":59}},{"value":"/ Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":58236,"byte_end":58321,"line_start":69,"line_end":69,"column_start":5,"column_end":90}},{"value":"/ Panics when the duration is out of bounds.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":58326,"byte_end":58372,"line_start":70,"line_end":70,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":58377,"byte_end":58386,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":58781,"byte_end":58785,"line_start":81,"line_end":81,"column_start":12,"column_end":16},"name":"days","qualname":"<Duration>::days","value":"pub fn days(i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of days.\n Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\n Panics when the duration is out of bounds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of days.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":58566,"byte_end":58619,"line_start":77,"line_end":77,"column_start":5,"column_end":58}},{"value":"/ Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":58624,"byte_end":58704,"line_start":78,"line_end":78,"column_start":5,"column_end":85}},{"value":"/ Panics when the duration is out of bounds.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":58709,"byte_end":58755,"line_start":79,"line_end":79,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":58760,"byte_end":58769,"line_start":80,"line_end":80,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":59156,"byte_end":59161,"line_start":90,"line_end":90,"column_start":12,"column_end":17},"name":"hours","qualname":"<Duration>::hours","value":"pub fn hours(i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of hours.\n Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\n Panics when the duration is out of bounds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of hours.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":58944,"byte_end":58998,"line_start":86,"line_end":86,"column_start":5,"column_end":59}},{"value":"/ Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":59003,"byte_end":59079,"line_start":87,"line_end":87,"column_start":5,"column_end":81}},{"value":"/ Panics when the duration is out of bounds.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":59084,"byte_end":59130,"line_start":88,"line_end":88,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":59135,"byte_end":59144,"line_start":89,"line_end":89,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":59535,"byte_end":59542,"line_start":99,"line_end":99,"column_start":12,"column_end":19},"name":"minutes","qualname":"<Duration>::minutes","value":"pub fn minutes(i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of minutes.\n Equivalent to `Duration::seconds(minutes * 60)` with overflow checks.\n Panics when the duration is out of bounds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of minutes.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":59324,"byte_end":59380,"line_start":95,"line_end":95,"column_start":5,"column_end":61}},{"value":"/ Equivalent to `Duration::seconds(minutes * 60)` with overflow checks.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":59385,"byte_end":59458,"line_start":96,"line_end":96,"column_start":5,"column_end":78}},{"value":"/ Panics when the duration is out of bounds.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":59463,"byte_end":59509,"line_start":97,"line_end":97,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":59514,"byte_end":59523,"line_start":98,"line_end":98,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":59901,"byte_end":59908,"line_start":108,"line_end":108,"column_start":12,"column_end":19},"name":"seconds","qualname":"<Duration>::seconds","value":"pub fn seconds(i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of seconds.\n Panics when the duration is more than `i64::MAX` seconds\n or less than `i64::MIN` seconds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of seconds.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":59713,"byte_end":59769,"line_start":104,"line_end":104,"column_start":5,"column_end":61}},{"value":"/ Panics when the duration is more than `i64::MAX` seconds","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":59774,"byte_end":59834,"line_start":105,"line_end":105,"column_start":5,"column_end":65}},{"value":"/ or less than `i64::MIN` seconds.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":59839,"byte_end":59875,"line_start":106,"line_end":106,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":59880,"byte_end":59889,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":60196,"byte_end":60208,"line_start":118,"line_end":118,"column_start":12,"column_end":24},"name":"milliseconds","qualname":"<Duration>::milliseconds","value":"pub fn milliseconds(i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of milliseconds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of milliseconds.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":60109,"byte_end":60170,"line_start":116,"line_end":116,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":60175,"byte_end":60184,"line_start":117,"line_end":117,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":60516,"byte_end":60528,"line_start":126,"line_end":126,"column_start":12,"column_end":24},"name":"microseconds","qualname":"<Duration>::microseconds","value":"pub fn microseconds(i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of microseconds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of microseconds.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":60429,"byte_end":60490,"line_start":124,"line_end":124,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":60495,"byte_end":60504,"line_start":125,"line_end":125,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":60835,"byte_end":60846,"line_start":134,"line_end":134,"column_start":12,"column_end":23},"name":"nanoseconds","qualname":"<Duration>::nanoseconds","value":"pub fn nanoseconds(i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of nanoseconds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of nanoseconds.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":60749,"byte_end":60809,"line_start":132,"line_end":132,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":60814,"byte_end":60823,"line_start":133,"line_end":133,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":61098,"byte_end":61107,"line_start":141,"line_end":141,"column_start":12,"column_end":21},"name":"num_weeks","qualname":"<Duration>::num_weeks","value":"pub fn num_weeks(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole weeks in the duration.\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole weeks in the duration.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":61012,"byte_end":61072,"line_start":139,"line_end":139,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":61077,"byte_end":61086,"line_start":140,"line_end":140,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":61234,"byte_end":61242,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"num_days","qualname":"<Duration>::num_days","value":"pub fn num_days(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole days in the duration.\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole days in the duration.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":61163,"byte_end":61222,"line_start":145,"line_end":145,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":61398,"byte_end":61407,"line_start":152,"line_end":152,"column_start":12,"column_end":21},"name":"num_hours","qualname":"<Duration>::num_hours","value":"pub fn num_hours(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole hours in the duration.\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole hours in the duration.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":61312,"byte_end":61372,"line_start":150,"line_end":150,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":61377,"byte_end":61386,"line_start":151,"line_end":151,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":61566,"byte_end":61577,"line_start":158,"line_end":158,"column_start":12,"column_end":23},"name":"num_minutes","qualname":"<Duration>::num_minutes","value":"pub fn num_minutes(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole minutes in the duration.\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole minutes in the duration.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":61478,"byte_end":61540,"line_start":156,"line_end":156,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":61545,"byte_end":61554,"line_start":157,"line_end":157,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":61724,"byte_end":61735,"line_start":163,"line_end":163,"column_start":12,"column_end":23},"name":"num_seconds","qualname":"<Duration>::num_seconds","value":"pub fn num_seconds(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole seconds in the duration.\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole seconds in the duration.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":61650,"byte_end":61712,"line_start":162,"line_end":162,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":62388,"byte_end":62404,"line_start":184,"line_end":184,"column_start":12,"column_end":28},"name":"num_milliseconds","qualname":"<Duration>::num_milliseconds","value":"pub fn num_milliseconds(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole milliseconds in the duration,\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole milliseconds in the duration,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":62309,"byte_end":62376,"line_start":183,"line_end":183,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":62896,"byte_end":62912,"line_start":194,"line_end":194,"column_start":12,"column_end":28},"name":"num_microseconds","qualname":"<Duration>::num_microseconds","value":"pub fn num_microseconds(&Self) -> Option<i64>","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole microseconds in the duration,\n or `None` on overflow (exceeding 2^63 microseconds in either direction).\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole microseconds in the duration,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":62736,"byte_end":62803,"line_start":192,"line_end":192,"column_start":5,"column_end":72}},{"value":"/ or `None` on overflow (exceeding 2^63 microseconds in either direction).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":62808,"byte_end":62884,"line_start":193,"line_end":193,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":63302,"byte_end":63317,"line_start":202,"line_end":202,"column_start":12,"column_end":27},"name":"num_nanoseconds","qualname":"<Duration>::num_nanoseconds","value":"pub fn num_nanoseconds(&Self) -> Option<i64>","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole nanoseconds in the duration,\n or `None` on overflow (exceeding 2^63 nanoseconds in either direction).\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole nanoseconds in the duration,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":63144,"byte_end":63210,"line_start":200,"line_end":200,"column_start":5,"column_end":71}},{"value":"/ or `None` on overflow (exceeding 2^63 nanoseconds in either direction).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":63215,"byte_end":63290,"line_start":201,"line_end":201,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":63610,"byte_end":63621,"line_start":209,"line_end":209,"column_start":12,"column_end":23},"name":"checked_add","qualname":"<Duration>::checked_add","value":"pub fn checked_add(&Self, &Duration) -> Option<Duration>","parent":null,"children":[],"decl_id":null,"docs":" Add two durations, returning `None` if overflow occurred.\n","sig":null,"attributes":[{"value":"/ Add two durations, returning `None` if overflow occurred.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":63537,"byte_end":63598,"line_start":208,"line_end":208,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":64264,"byte_end":64275,"line_start":227,"line_end":227,"column_start":12,"column_end":23},"name":"checked_sub","qualname":"<Duration>::checked_sub","value":"pub fn checked_sub(&Self, &Duration) -> Option<Duration>","parent":null,"children":[],"decl_id":null,"docs":" Subtract two durations, returning `None` if overflow occurred.\n","sig":null,"attributes":[{"value":"/ Subtract two durations, returning `None` if overflow occurred.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":64186,"byte_end":64252,"line_start":226,"line_end":226,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":64914,"byte_end":64917,"line_start":246,"line_end":246,"column_start":12,"column_end":15},"name":"abs","qualname":"<Duration>::abs","value":"pub fn abs(&Self) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Returns the duration as an absolute (non-negative) value.\n","sig":null,"attributes":[{"value":"/ Returns the duration as an absolute (non-negative) value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":64827,"byte_end":64888,"line_start":244,"line_end":244,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":64893,"byte_end":64902,"line_start":245,"line_end":245,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":65099,"byte_end":65108,"line_start":252,"line_end":252,"column_start":12,"column_end":21},"name":"min_value","qualname":"<Duration>::min_value","value":"pub fn min_value() -> Duration","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `Duration`: `i64::MIN` milliseconds.\n","sig":null,"attributes":[{"value":"/ The minimum possible `Duration`: `i64::MIN` milliseconds.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":65012,"byte_end":65073,"line_start":250,"line_end":250,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":65078,"byte_end":65087,"line_start":251,"line_end":251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":65235,"byte_end":65244,"line_start":258,"line_end":258,"column_start":12,"column_end":21},"name":"max_value","qualname":"<Duration>::max_value","value":"pub fn max_value() -> Duration","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `Duration`: `i64::MAX` milliseconds.\n","sig":null,"attributes":[{"value":"/ The maximum possible `Duration`: `i64::MAX` milliseconds.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":65148,"byte_end":65209,"line_start":256,"line_end":256,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":65214,"byte_end":65223,"line_start":257,"line_end":257,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":65384,"byte_end":65388,"line_start":264,"line_end":264,"column_start":12,"column_end":16},"name":"zero","qualname":"<Duration>::zero","value":"pub fn zero() -> Duration","parent":null,"children":[],"decl_id":null,"docs":" A duration where the stored seconds and nanoseconds are equal to zero.\n","sig":null,"attributes":[{"value":"/ A duration where the stored seconds and nanoseconds are equal to zero.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":65284,"byte_end":65358,"line_start":262,"line_end":262,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":65363,"byte_end":65372,"line_start":263,"line_end":263,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":65542,"byte_end":65549,"line_start":270,"line_end":270,"column_start":12,"column_end":19},"name":"is_zero","qualname":"<Duration>::is_zero","value":"pub fn is_zero(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the duration equals `Duration::zero()`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the duration equals `Duration::zero()`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":65455,"byte_end":65516,"line_start":268,"line_end":268,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":65521,"byte_end":65530,"line_start":269,"line_end":269,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":65822,"byte_end":65830,"line_start":278,"line_end":278,"column_start":12,"column_end":20},"name":"from_std","qualname":"<Duration>::from_std","value":"pub fn from_std(StdDuration) -> Result<Duration, OutOfRangeError>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `time::Duration` object from `std::time::Duration`","sig":null,"attributes":[{"value":"/ Creates a `time::Duration` object from `std::time::Duration`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":65620,"byte_end":65684,"line_start":274,"line_end":274,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":65689,"byte_end":65692,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ This function errors when original duration is larger than the maximum","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":65697,"byte_end":65771,"line_start":276,"line_end":276,"column_start":5,"column_end":79}},{"value":"/ value supported for this type.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":65776,"byte_end":65810,"line_start":277,"line_end":277,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":66487,"byte_end":66493,"line_start":294,"line_end":294,"column_start":12,"column_end":18},"name":"to_std","qualname":"<Duration>::to_std","value":"pub fn to_std(&Self) -> Result<StdDuration, OutOfRangeError>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `std::time::Duration` object from `time::Duration`","sig":null,"attributes":[{"value":"/ Creates a `std::time::Duration` object from `time::Duration`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":66263,"byte_end":66327,"line_start":290,"line_end":290,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":66332,"byte_end":66335,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ This function errors when duration is less than zero. As standard","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":66340,"byte_end":66409,"line_start":292,"line_end":292,"column_start":5,"column_end":74}},{"value":"/ library implementation is limited to non-negative values.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":66414,"byte_end":66475,"line_start":293,"line_end":293,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":2313},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":70110,"byte_end":70125,"line_start":413,"line_end":413,"column_start":12,"column_end":27},"name":"OutOfRangeError","qualname":"::oldtime::OutOfRangeError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Represents error when converting `Duration` to/from a standard library\n implementation","sig":null,"attributes":[{"value":"/ Represents error when converting `Duration` to/from a standard library","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":69787,"byte_end":69861,"line_start":406,"line_end":406,"column_start":1,"column_end":75}},{"value":"/ implementation","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":69862,"byte_end":69880,"line_start":407,"line_end":407,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":69881,"byte_end":69884,"line_start":408,"line_end":408,"column_start":1,"column_end":4}},{"value":"/ The `std::time::Duration` supports a range from zero to `u64::MAX`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":69885,"byte_end":69955,"line_start":409,"line_end":409,"column_start":1,"column_end":71}},{"value":"/ *seconds*, while this module supports signed range of up to","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":69956,"byte_end":70019,"line_start":410,"line_end":410,"column_start":1,"column_end":64}},{"value":"/ `i64::MAX` of *milliseconds*.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":70020,"byte_end":70053,"line_start":411,"line_end":411,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":234},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22850,"byte_end":22857,"line_start":506,"line_end":506,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":235},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":241},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":248},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":255},{"krate":0,"index":258},{"krate":0,"index":261},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":275},{"krate":0,"index":278},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":285}],"decl_id":null,"docs":" A convenience module appropriate for glob imports (`use chrono::prelude::*;`).\n","sig":null,"attributes":[{"value":"/ A convenience module appropriate for glob imports (`use chrono::prelude::*;`).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22759,"byte_end":22841,"line_start":505,"line_end":505,"column_start":1,"column_end":83}}]},{"kind":"Mod","id":{"krate":0,"index":303},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"offset","qualname":"::offset","value":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","parent":null,"children":[{"krate":0,"index":304},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":311},{"krate":0,"index":314},{"krate":0,"index":317},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":324},{"krate":0,"index":327},{"krate":0,"index":330},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":337},{"krate":0,"index":2328},{"krate":0,"index":2339},{"krate":0,"index":2342},{"krate":0,"index":2344},{"krate":0,"index":2348},{"krate":0,"index":2351},{"krate":0,"index":2353},{"krate":0,"index":2355},{"krate":0,"index":2358},{"krate":0,"index":340},{"krate":0,"index":348},{"krate":0,"index":355},{"krate":0,"index":358},{"krate":0,"index":360},{"krate":0,"index":385},{"krate":0,"index":470},{"krate":0,"index":532},{"krate":0,"index":586},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":592},{"krate":0,"index":593}],"decl_id":null,"docs":" The time zone, which calculates offsets from the local time to UTC.","sig":null,"attributes":[{"value":"/ The time zone, which calculates offsets from the local time to UTC.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":91756,"byte_end":91827,"line_start":4,"line_end":4,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":91828,"byte_end":91831,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ There are four operations provided by the `TimeZone` trait:","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":91832,"byte_end":91895,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":91896,"byte_end":91899,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ 1. Converting the local `NaiveDateTime` to `DateTime<Tz>`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":91900,"byte_end":91961,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"/ 2. Converting the UTC `NaiveDateTime` to `DateTime<Tz>`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":91962,"byte_end":92021,"line_start":9,"line_end":9,"column_start":1,"column_end":60}},{"value":"/ 3. Converting `DateTime<Tz>` to the local `NaiveDateTime`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":92022,"byte_end":92083,"line_start":10,"line_end":10,"column_start":1,"column_end":62}},{"value":"/ 4. Constructing `DateTime<Tz>` objects from various offsets","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":92084,"byte_end":92147,"line_start":11,"line_end":11,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":92148,"byte_end":92151,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ 1 is used for constructors. 2 is used for the `with_timezone` method of date and time types.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":92152,"byte_end":92248,"line_start":13,"line_end":13,"column_start":1,"column_end":97}},{"value":"/ 3 is used for other methods, e.g. `year()` or `format()`, and provided by an associated type","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":92249,"byte_end":92345,"line_start":14,"line_end":14,"column_start":1,"column_end":97}},{"value":"/ which implements `Offset` (which then passed to `TimeZone` for actual implementations).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":92346,"byte_end":92437,"line_start":15,"line_end":15,"column_start":1,"column_end":92}},{"value":"/ Technically speaking `TimeZone` has a total knowledge about given timescale,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":92438,"byte_end":92518,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/ but `Offset` is used as a cache to avoid the repeated conversion","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":92519,"byte_end":92587,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"/ and provides implementations for 1 and 3.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":92588,"byte_end":92633,"line_start":18,"line_end":18,"column_start":1,"column_end":46}},{"value":"/ An `TimeZone` instance can be reconstructed from the corresponding `Offset` instance.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":92634,"byte_end":92723,"line_start":19,"line_end":19,"column_start":1,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2330},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":93177,"byte_end":93181,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"None","qualname":"::offset::LocalResult::None","value":"LocalResult::None","parent":{"krate":0,"index":2328},"children":[],"decl_id":null,"docs":" Given local time representation is invalid.\n This can occur when, for example, the positive timezone transition.\n","sig":null,"attributes":[{"value":"/ Given local time representation is invalid.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":93049,"byte_end":93096,"line_start":31,"line_end":31,"column_start":5,"column_end":52}},{"value":"/ This can occur when, for example, the positive timezone transition.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":93101,"byte_end":93172,"line_start":32,"line_end":32,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2332},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":93255,"byte_end":93261,"line_start":35,"line_end":35,"column_start":5,"column_end":11},"name":"Single","qualname":"::offset::LocalResult::Single","value":"LocalResult::Single(T)","parent":{"krate":0,"index":2328},"children":[],"decl_id":null,"docs":" Given local time representation has a single unique result.\n","sig":null,"attributes":[{"value":"/ Given local time representation has a single unique result.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":93187,"byte_end":93250,"line_start":34,"line_end":34,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2335},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":93427,"byte_end":93436,"line_start":38,"line_end":38,"column_start":5,"column_end":14},"name":"Ambiguous","qualname":"::offset::LocalResult::Ambiguous","value":"LocalResult::Ambiguous(T, T)","parent":{"krate":0,"index":2328},"children":[],"decl_id":null,"docs":" Given local time representation has multiple results and thus ambiguous.\n This can occur when, for example, the negative timezone transition.\n","sig":null,"attributes":[{"value":"/ Given local time representation has multiple results and thus ambiguous.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":93270,"byte_end":93346,"line_start":36,"line_end":36,"column_start":5,"column_end":81}},{"value":"/ This can occur when, for example, the negative timezone transition.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":93351,"byte_end":93422,"line_start":37,"line_end":37,"column_start":5,"column_end":76}}]},{"kind":"Enum","id":{"krate":0,"index":2328},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":93028,"byte_end":93039,"line_start":30,"line_end":30,"column_start":10,"column_end":21},"name":"LocalResult","qualname":"::offset::LocalResult","value":"pub enum LocalResult<T> { None, Single(T), Ambiguous(T, T), }","parent":null,"children":[{"krate":0,"index":2330},{"krate":0,"index":2332},{"krate":0,"index":2335}],"decl_id":null,"docs":" The conversion result from the local time to the timezone-aware datetime types.\n","sig":null,"attributes":[{"value":"/ The conversion result from the local time to the timezone-aware datetime types.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":92884,"byte_end":92967,"line_start":28,"line_end":28,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":93586,"byte_end":93592,"line_start":43,"line_end":43,"column_start":12,"column_end":18},"name":"single","qualname":"<LocalResult<T>>::single","value":"pub fn single(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` only when the conversion result is unique, or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `Some` only when the conversion result is unique, or `None` otherwise.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":93492,"byte_end":93574,"line_start":42,"line_end":42,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":93820,"byte_end":93828,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"earliest","qualname":"<LocalResult<T>>::earliest","value":"pub fn earliest(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the earliest possible conversion result, or `None` if none.\n","sig":null,"attributes":[{"value":"/ Returns `Some` for the earliest possible conversion result, or `None` if none.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":93726,"byte_end":93808,"line_start":50,"line_end":50,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":94085,"byte_end":94091,"line_start":59,"line_end":59,"column_start":12,"column_end":18},"name":"latest","qualname":"<LocalResult<T>>::latest","value":"pub fn latest(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the latest possible conversion result, or `None` if none.\n","sig":null,"attributes":[{"value":"/ Returns `Some` for the latest possible conversion result, or `None` if none.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":93993,"byte_end":94073,"line_start":58,"line_end":58,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":94338,"byte_end":94341,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"map","qualname":"<LocalResult<T>>::map","value":"pub fn map<U, F: FnMut(T) -> U>(Self, F) -> LocalResult<U>","parent":null,"children":[],"decl_id":null,"docs":" Maps a `LocalResult<T>` into `LocalResult<U>` with given function.\n","sig":null,"attributes":[{"value":"/ Maps a `LocalResult<T>` into `LocalResult<U>` with given function.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":94256,"byte_end":94326,"line_start":66,"line_end":66,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":94916,"byte_end":94924,"line_start":82,"line_end":82,"column_start":12,"column_end":20},"name":"and_time","qualname":"<LocalResult<Date<Tz>>>::and_time","value":"pub fn and_time(Self, NaiveTime) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date and given `NaiveTime`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":94691,"byte_end":94762,"line_start":77,"line_end":77,"column_start":5,"column_end":76}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":94767,"byte_end":94815,"line_start":78,"line_end":78,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":94820,"byte_end":94823,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":94828,"byte_end":94890,"line_start":80,"line_end":80,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":94895,"byte_end":94904,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":95419,"byte_end":95430,"line_start":96,"line_end":96,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_opt","value":"pub fn and_hms_opt(Self, u32, u32, u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":95191,"byte_end":95265,"line_start":91,"line_end":91,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":95270,"byte_end":95318,"line_start":92,"line_end":92,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":95323,"byte_end":95326,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":95331,"byte_end":95393,"line_start":94,"line_end":94,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":95398,"byte_end":95407,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":96050,"byte_end":96067,"line_start":111,"line_end":111,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_milli_opt","value":"pub fn and_hms_milli_opt(Self, u32, u32, u32, u32)\n-> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":95724,"byte_end":95811,"line_start":105,"line_end":105,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":95816,"byte_end":95896,"line_start":106,"line_end":106,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":95901,"byte_end":95949,"line_start":107,"line_end":107,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":95954,"byte_end":95957,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":95962,"byte_end":96024,"line_start":109,"line_end":109,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":96029,"byte_end":96038,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":96766,"byte_end":96783,"line_start":132,"line_end":132,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_micro_opt","value":"pub fn and_hms_micro_opt(Self, u32, u32, u32, u32)\n-> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":96436,"byte_end":96523,"line_start":126,"line_end":126,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":96528,"byte_end":96612,"line_start":127,"line_end":127,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":96617,"byte_end":96665,"line_start":128,"line_end":128,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":96670,"byte_end":96673,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":96678,"byte_end":96740,"line_start":130,"line_end":130,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":96745,"byte_end":96754,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":97484,"byte_end":97500,"line_start":153,"line_end":153,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_nano_opt","value":"pub fn and_hms_nano_opt(Self, u32, u32, u32, u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":97152,"byte_end":97238,"line_start":147,"line_end":147,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":97243,"byte_end":97330,"line_start":148,"line_end":148,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":97335,"byte_end":97383,"line_start":149,"line_end":149,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":97388,"byte_end":97391,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":97396,"byte_end":97458,"line_start":151,"line_end":151,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":97463,"byte_end":97472,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":357},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":97988,"byte_end":97994,"line_start":171,"line_end":171,"column_start":12,"column_end":18},"name":"unwrap","qualname":"<LocalResult<T>>::unwrap","value":"pub fn unwrap(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the single unique conversion result, or panics accordingly.\n","sig":null,"attributes":[{"value":"/ Returns the single unique conversion result, or panics accordingly.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":97905,"byte_end":97976,"line_start":170,"line_end":170,"column_start":5,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":358},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":98349,"byte_end":98355,"line_start":183,"line_end":183,"column_start":11,"column_end":17},"name":"Offset","qualname":"::offset::Offset","value":"Offset: Sized + Clone + fmt::Debug","parent":null,"children":[{"krate":0,"index":359}],"decl_id":null,"docs":" The offset from the local time to UTC.\n","sig":null,"attributes":[{"value":"/ The offset from the local time to UTC.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":98296,"byte_end":98338,"line_start":182,"line_end":182,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":98461,"byte_end":98464,"line_start":185,"line_end":185,"column_start":8,"column_end":11},"name":"fix","qualname":"::offset::Offset::fix","value":"pub fn fix(&Self) -> FixedOffset","parent":{"krate":0,"index":358},"children":[],"decl_id":null,"docs":" Returns the fixed offset from UTC to the local time stored.\n","sig":null,"attributes":[{"value":"/ Returns the fixed offset from UTC to the local time stored.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":98390,"byte_end":98453,"line_start":184,"line_end":184,"column_start":5,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":360},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":98663,"byte_end":98671,"line_start":192,"line_end":192,"column_start":11,"column_end":19},"name":"TimeZone","qualname":"::offset::TimeZone","value":"TimeZone: Sized + Clone","parent":null,"children":[{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":379},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384}],"decl_id":null,"docs":" The time zone.","sig":null,"attributes":[{"value":"/ The time zone.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":98491,"byte_end":98509,"line_start":188,"line_end":188,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":98510,"byte_end":98513,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ The methods here are the primarily constructors for [`Date`](../struct.Date.html) and","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":98514,"byte_end":98603,"line_start":190,"line_end":190,"column_start":1,"column_end":90}},{"value":"/ [`DateTime`](../struct.DateTime.html) types.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":98604,"byte_end":98652,"line_start":191,"line_end":191,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":361},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":98894,"byte_end":98900,"line_start":196,"line_end":196,"column_start":10,"column_end":16},"name":"Offset","qualname":"::offset::TimeZone::Offset","value":"type Offset: Offset;","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" An associated offset type.\n This type is used to store the actual offset in date and time types.\n The original `TimeZone` value can be recovered via `TimeZone::from_offset`.\n","sig":null,"attributes":[{"value":"/ An associated offset type.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":98693,"byte_end":98723,"line_start":193,"line_end":193,"column_start":5,"column_end":35}},{"value":"/ This type is used to store the actual offset in date and time types.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":98728,"byte_end":98800,"line_start":194,"line_end":194,"column_start":5,"column_end":77}},{"value":"/ The original `TimeZone` value can be recovered via `TimeZone::from_offset`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":98805,"byte_end":98884,"line_start":195,"line_end":195,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":99517,"byte_end":99520,"line_start":213,"line_end":213,"column_start":8,"column_end":11},"name":"ymd","qualname":"::offset::TimeZone::ymd","value":"pub fn ymd(&Self, i32, u32, u32) -> Date<Self>","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, month, day and the current time zone.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":98915,"byte_end":98986,"line_start":198,"line_end":198,"column_start":5,"column_end":76}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":98991,"byte_end":99070,"line_start":199,"line_end":199,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":99075,"byte_end":99078,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":99083,"byte_end":99176,"line_start":201,"line_end":201,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":99181,"byte_end":99258,"line_start":202,"line_end":202,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":99263,"byte_end":99266,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date, invalid month and/or day.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":99271,"byte_end":99333,"line_start":204,"line_end":204,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":99338,"byte_end":99341,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":99346,"byte_end":99359,"line_start":206,"line_end":206,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":99364,"byte_end":99367,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":99372,"byte_end":99380,"line_start":208,"line_end":208,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":99385,"byte_end":99417,"line_start":209,"line_end":209,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":99422,"byte_end":99425,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.ymd(2015, 5, 15).to_string(), \"2015-05-15UTC\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":99430,"byte_end":99496,"line_start":211,"line_end":211,"column_start":5,"column_end":71}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":99501,"byte_end":99509,"line_start":212,"line_end":212,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":363},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":100336,"byte_end":100343,"line_start":233,"line_end":233,"column_start":8,"column_end":15},"name":"ymd_opt","qualname":"::offset::TimeZone::ymd_opt","value":"pub fn ymd_opt(&Self, i32, u32, u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, month, day and the current time zone.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":99636,"byte_end":99707,"line_start":217,"line_end":217,"column_start":5,"column_end":76}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":99712,"byte_end":99791,"line_start":218,"line_end":218,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":99796,"byte_end":99799,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":99804,"byte_end":99897,"line_start":220,"line_end":220,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":99902,"byte_end":99979,"line_start":221,"line_end":221,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":99984,"byte_end":99987,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date, invalid month and/or day.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":99992,"byte_end":100062,"line_start":223,"line_end":223,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":100067,"byte_end":100070,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":100075,"byte_end":100088,"line_start":225,"line_end":225,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":100093,"byte_end":100096,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":100101,"byte_end":100109,"line_start":227,"line_end":227,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, LocalResult, TimeZone};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":100114,"byte_end":100159,"line_start":228,"line_end":228,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":100164,"byte_end":100167,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.ymd_opt(2015, 5, 15).unwrap().to_string(), \"2015-05-15UTC\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":100172,"byte_end":100251,"line_start":230,"line_end":230,"column_start":5,"column_end":84}},{"value":"/ assert_eq!(Utc.ymd_opt(2000, 0, 0), LocalResult::None);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":100256,"byte_end":100315,"line_start":231,"line_end":231,"column_start":5,"column_end":64}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":100320,"byte_end":100328,"line_start":232,"line_end":232,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":101192,"byte_end":101194,"line_start":255,"line_end":255,"column_start":8,"column_end":10},"name":"yo","qualname":"::offset::TimeZone::yo","value":"pub fn yo(&Self, i32, u32) -> Date<Self>","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":100580,"byte_end":100671,"line_start":240,"line_end":240,"column_start":5,"column_end":96}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":100676,"byte_end":100755,"line_start":241,"line_end":241,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":100760,"byte_end":100763,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":100768,"byte_end":100861,"line_start":243,"line_end":243,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":100866,"byte_end":100943,"line_start":244,"line_end":244,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":100948,"byte_end":100951,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid DOY.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":100956,"byte_end":101011,"line_start":246,"line_end":246,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":101016,"byte_end":101019,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":101024,"byte_end":101037,"line_start":248,"line_end":248,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":101042,"byte_end":101045,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":101050,"byte_end":101058,"line_start":250,"line_end":250,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":101063,"byte_end":101095,"line_start":251,"line_end":251,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":101100,"byte_end":101103,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.yo(2015, 135).to_string(), \"2015-05-15UTC\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":101108,"byte_end":101171,"line_start":253,"line_end":253,"column_start":5,"column_end":68}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":101176,"byte_end":101184,"line_start":254,"line_end":254,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":101745,"byte_end":101751,"line_start":266,"line_end":266,"column_start":8,"column_end":14},"name":"yo_opt","qualname":"::offset::TimeZone::yo_opt","value":"pub fn yo_opt(&Self, i32, u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":101298,"byte_end":101389,"line_start":259,"line_end":259,"column_start":5,"column_end":96}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":101394,"byte_end":101473,"line_start":260,"line_end":260,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":101478,"byte_end":101481,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":101486,"byte_end":101579,"line_start":262,"line_end":262,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":101584,"byte_end":101661,"line_start":263,"line_end":263,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":101666,"byte_end":101669,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid DOY.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":101674,"byte_end":101737,"line_start":265,"line_end":265,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":102729,"byte_end":102735,"line_start":290,"line_end":290,"column_start":8,"column_end":14},"name":"isoywd","qualname":"::offset::TimeZone::isoywd","value":"pub fn isoywd(&Self, i32, u32, Weekday) -> Date<Self>","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":101976,"byte_end":102067,"line_start":273,"line_end":273,"column_start":5,"column_end":96}},{"value":"/ the current time zone.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":102072,"byte_end":102098,"line_start":274,"line_end":274,"column_start":5,"column_end":31}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":102103,"byte_end":102182,"line_start":275,"line_end":275,"column_start":5,"column_end":84}},{"value":"/ The resulting `Date` may have a different year from the input year.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":102187,"byte_end":102258,"line_start":276,"line_end":276,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":102263,"byte_end":102266,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":102271,"byte_end":102364,"line_start":278,"line_end":278,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":102369,"byte_end":102446,"line_start":279,"line_end":279,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":102451,"byte_end":102454,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid week number.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":102459,"byte_end":102522,"line_start":281,"line_end":281,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":102527,"byte_end":102530,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":102535,"byte_end":102548,"line_start":283,"line_end":283,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":102553,"byte_end":102556,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":102561,"byte_end":102569,"line_start":285,"line_end":285,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, Weekday, TimeZone};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":102574,"byte_end":102615,"line_start":286,"line_end":286,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":102620,"byte_end":102623,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.isoywd(2015, 20, Weekday::Fri).to_string(), \"2015-05-15UTC\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":102628,"byte_end":102708,"line_start":288,"line_end":288,"column_start":5,"column_end":85}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":102713,"byte_end":102721,"line_start":289,"line_end":289,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":103426,"byte_end":103436,"line_start":303,"line_end":303,"column_start":8,"column_end":18},"name":"isoywd_opt","qualname":"::offset::TimeZone::isoywd_opt","value":"pub fn isoywd_opt(&Self, i32, u32, Weekday) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":102864,"byte_end":102955,"line_start":294,"line_end":294,"column_start":5,"column_end":96}},{"value":"/ the current time zone.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":102960,"byte_end":102986,"line_start":295,"line_end":295,"column_start":5,"column_end":31}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":102991,"byte_end":103070,"line_start":296,"line_end":296,"column_start":5,"column_end":84}},{"value":"/ The resulting `Date` may have a different year from the input year.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":103075,"byte_end":103146,"line_start":297,"line_end":297,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":103151,"byte_end":103154,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":103159,"byte_end":103252,"line_start":299,"line_end":299,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":103257,"byte_end":103334,"line_start":300,"line_end":300,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":103339,"byte_end":103342,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid week number.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":103347,"byte_end":103418,"line_start":302,"line_end":302,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":104261,"byte_end":104270,"line_start":324,"line_end":324,"column_start":8,"column_end":17},"name":"timestamp","qualname":"::offset::TimeZone::timestamp","value":"pub fn timestamp(&Self, i64, u32) -> DateTime<Self>","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap seconds","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":103686,"byte_end":103748,"line_start":310,"line_end":310,"column_start":5,"column_end":67}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":103753,"byte_end":103813,"line_start":311,"line_end":311,"column_start":5,"column_end":65}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":103818,"byte_end":103889,"line_start":312,"line_end":312,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":103894,"byte_end":103897,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range number of seconds and/or invalid nanosecond,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":103902,"byte_end":103977,"line_start":314,"line_end":314,"column_start":5,"column_end":80}},{"value":"/ for a non-panicking version see [`timestamp_opt`](#method.timestamp_opt).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":103982,"byte_end":104059,"line_start":315,"line_end":315,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":104064,"byte_end":104067,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":104072,"byte_end":104085,"line_start":317,"line_end":317,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":104090,"byte_end":104093,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":104098,"byte_end":104106,"line_start":319,"line_end":319,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":104111,"byte_end":104143,"line_start":320,"line_end":320,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":104148,"byte_end":104151,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp(1431648000, 0).to_string(), \"2015-05-15 00:00:00 UTC\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":104156,"byte_end":104240,"line_start":322,"line_end":322,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":104245,"byte_end":104253,"line_start":323,"line_end":323,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":104753,"byte_end":104766,"line_start":334,"line_end":334,"column_start":8,"column_end":21},"name":"timestamp_opt","qualname":"::offset::TimeZone::timestamp_opt","value":"pub fn timestamp_opt(&Self, i64, u32) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap seconds","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":104381,"byte_end":104443,"line_start":328,"line_end":328,"column_start":5,"column_end":67}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":104448,"byte_end":104508,"line_start":329,"line_end":329,"column_start":5,"column_end":65}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":104513,"byte_end":104584,"line_start":330,"line_end":330,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":104589,"byte_end":104592,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ Returns `LocalResult::None` on out-of-range number of seconds and/or","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":104597,"byte_end":104669,"line_start":332,"line_end":332,"column_start":5,"column_end":77}},{"value":"/ invalid nanosecond, otherwise always returns `LocalResult::Single`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":104674,"byte_end":104745,"line_start":333,"line_end":333,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":105506,"byte_end":105522,"line_start":354,"line_end":354,"column_start":8,"column_end":24},"name":"timestamp_millis","qualname":"::offset::TimeZone::timestamp_millis","value":"pub fn timestamp_millis(&Self, i64) -> DateTime<Self>","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap milliseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap milliseconds","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":105027,"byte_end":105094,"line_start":341,"line_end":341,"column_start":5,"column_end":72}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":105099,"byte_end":105160,"line_start":342,"line_end":342,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":105165,"byte_end":105168,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ Panics on out-of-range number of milliseconds for a non-panicking","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":105173,"byte_end":105242,"line_start":344,"line_end":344,"column_start":5,"column_end":74}},{"value":"/ version see [`timestamp_millis_opt`](#method.timestamp_millis_opt).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":105247,"byte_end":105318,"line_start":345,"line_end":345,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":105323,"byte_end":105326,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":105331,"byte_end":105344,"line_start":347,"line_end":347,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":105349,"byte_end":105352,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":105357,"byte_end":105365,"line_start":349,"line_end":349,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":105370,"byte_end":105402,"line_start":350,"line_end":350,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":105407,"byte_end":105410,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp_millis(1431648000).timestamp(), 1431648);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":105415,"byte_end":105485,"line_start":352,"line_end":352,"column_start":5,"column_end":75}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":105490,"byte_end":105498,"line_start":353,"line_end":353,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":106253,"byte_end":106273,"line_start":375,"line_end":375,"column_start":8,"column_end":28},"name":"timestamp_millis_opt","qualname":"::offset::TimeZone::timestamp_millis_opt","value":"pub fn timestamp_millis_opt(&Self, i64) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap milliseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap milliseconds","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":105625,"byte_end":105692,"line_start":358,"line_end":358,"column_start":5,"column_end":72}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":105697,"byte_end":105758,"line_start":359,"line_end":359,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":105763,"byte_end":105766,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":105771,"byte_end":105774,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ Returns `LocalResult::None` on out-of-range number of milliseconds","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":105779,"byte_end":105849,"line_start":362,"line_end":362,"column_start":5,"column_end":75}},{"value":"/ and/or invalid nanosecond, otherwise always returns","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":105854,"byte_end":105909,"line_start":363,"line_end":363,"column_start":5,"column_end":60}},{"value":"/ `LocalResult::Single`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":105914,"byte_end":105940,"line_start":364,"line_end":364,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":105945,"byte_end":105948,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":105953,"byte_end":105966,"line_start":366,"line_end":366,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":105971,"byte_end":105974,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":105979,"byte_end":105987,"line_start":368,"line_end":368,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone, LocalResult};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":105992,"byte_end":106037,"line_start":369,"line_end":369,"column_start":5,"column_end":50}},{"value":"/ match Utc.timestamp_millis_opt(1431648000) {","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":106042,"byte_end":106090,"line_start":370,"line_end":370,"column_start":5,"column_end":53}},{"value":"/     LocalResult::Single(dt) => assert_eq!(dt.timestamp(), 1431648),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":106095,"byte_end":106166,"line_start":371,"line_end":371,"column_start":5,"column_end":76}},{"value":"/     _ => panic!(\"Incorrect timestamp_millis\"),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":106171,"byte_end":106221,"line_start":372,"line_end":372,"column_start":5,"column_end":55}},{"value":"/ };","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":106226,"byte_end":106232,"line_start":373,"line_end":373,"column_start":5,"column_end":11}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":106237,"byte_end":106245,"line_start":374,"line_end":374,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":106975,"byte_end":106990,"line_start":397,"line_end":397,"column_start":8,"column_end":23},"name":"timestamp_nanos","qualname":"::offset::TimeZone::timestamp_nanos","value":"pub fn timestamp_nanos(&Self, i64) -> DateTime<Self>","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap nanoseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap nanoseconds","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":106552,"byte_end":106618,"line_start":384,"line_end":384,"column_start":5,"column_end":71}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":106623,"byte_end":106684,"line_start":385,"line_end":385,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":106689,"byte_end":106692,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ Unlike [`timestamp_millis`](#method.timestamp_millis), this never","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":106697,"byte_end":106766,"line_start":387,"line_end":387,"column_start":5,"column_end":74}},{"value":"/ panics.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":106771,"byte_end":106782,"line_start":388,"line_end":388,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":106787,"byte_end":106790,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":106795,"byte_end":106808,"line_start":390,"line_end":390,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":106813,"byte_end":106816,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":106821,"byte_end":106829,"line_start":392,"line_end":392,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":106834,"byte_end":106866,"line_start":393,"line_end":393,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":106871,"byte_end":106874,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp_nanos(1431648000000000).timestamp(), 1431648);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":106879,"byte_end":106954,"line_start":395,"line_end":395,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":106959,"byte_end":106967,"line_start":396,"line_end":396,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":107777,"byte_end":107794,"line_start":416,"line_end":416,"column_start":8,"column_end":25},"name":"datetime_from_str","qualname":"::offset::TimeZone::datetime_from_str","value":"pub fn datetime_from_str(&Self, &str, &str) -> ParseResult<DateTime<Self>>","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and\n returns a `DateTime` with the current offset.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":107273,"byte_end":107329,"line_start":406,"line_end":406,"column_start":5,"column_end":61}},{"value":"/ returns a `DateTime` with the current offset.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":107334,"byte_end":107383,"line_start":407,"line_end":407,"column_start":5,"column_end":54}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":107388,"byte_end":107458,"line_start":408,"line_end":408,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":107463,"byte_end":107501,"line_start":409,"line_end":409,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":107506,"byte_end":107509,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ If the format does not include offsets, the current offset is assumed;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":107514,"byte_end":107588,"line_start":411,"line_end":411,"column_start":5,"column_end":79}},{"value":"/ otherwise the input should have a matching UTC offset.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":107593,"byte_end":107651,"line_start":412,"line_end":412,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":107656,"byte_end":107659,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ See also `DateTime::parse_from_str` which gives a local `DateTime`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":107664,"byte_end":107734,"line_start":414,"line_end":414,"column_start":5,"column_end":75}},{"value":"/ with parsed `FixedOffset`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":107739,"byte_end":107769,"line_start":415,"line_end":415,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":108065,"byte_end":108076,"line_start":423,"line_end":423,"column_start":8,"column_end":19},"name":"from_offset","qualname":"::offset::TimeZone::from_offset","value":"pub fn from_offset(&Self::Offset) -> Self","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Reconstructs the time zone from the offset.\n","sig":null,"attributes":[{"value":"/ Reconstructs the time zone from the offset.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":108010,"byte_end":108057,"line_start":422,"line_end":422,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":108188,"byte_end":108210,"line_start":426,"line_end":426,"column_start":8,"column_end":30},"name":"offset_from_local_date","qualname":"::offset::TimeZone::offset_from_local_date","value":"pub fn offset_from_local_date(&Self, &NaiveDate) -> LocalResult<Self::Offset>","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDate` if possible.\n","sig":null,"attributes":[{"value":"/ Creates the offset(s) for given local `NaiveDate` if possible.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":108114,"byte_end":108180,"line_start":425,"line_end":425,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":108350,"byte_end":108376,"line_start":429,"line_end":429,"column_start":8,"column_end":34},"name":"offset_from_local_datetime","qualname":"::offset::TimeZone::offset_from_local_datetime","value":"pub fn offset_from_local_datetime(&Self, &NaiveDateTime)\n-> LocalResult<Self::Offset>","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDateTime` if possible.\n","sig":null,"attributes":[{"value":"/ Creates the offset(s) for given local `NaiveDateTime` if possible.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":108272,"byte_end":108342,"line_start":428,"line_end":428,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":108526,"byte_end":108541,"line_start":432,"line_end":432,"column_start":8,"column_end":23},"name":"from_local_date","qualname":"::offset::TimeZone::from_local_date","value":"pub fn from_local_date(&Self, &NaiveDate) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDate` to the timezone-aware `Date` if possible.\n","sig":null,"attributes":[{"value":"/ Converts the local `NaiveDate` to the timezone-aware `Date` if possible.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":108442,"byte_end":108518,"line_start":431,"line_end":431,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":108893,"byte_end":108912,"line_start":440,"line_end":440,"column_start":8,"column_end":27},"name":"from_local_datetime","qualname":"::offset::TimeZone::from_local_datetime","value":"pub fn from_local_datetime(&Self, &NaiveDateTime)\n-> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.\n","sig":null,"attributes":[{"value":"/ Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":108801,"byte_end":108885,"line_start":439,"line_end":439,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":109186,"byte_end":109206,"line_start":446,"line_end":446,"column_start":8,"column_end":28},"name":"offset_from_utc_date","qualname":"::offset::TimeZone::offset_from_utc_date","value":"pub fn offset_from_utc_date(&Self, &NaiveDate) -> Self::Offset","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDate`. This cannot fail.\n","sig":null,"attributes":[{"value":"/ Creates the offset for given UTC `NaiveDate`. This cannot fail.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":109111,"byte_end":109178,"line_start":445,"line_end":445,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":109332,"byte_end":109356,"line_start":449,"line_end":449,"column_start":8,"column_end":32},"name":"offset_from_utc_datetime","qualname":"::offset::TimeZone::offset_from_utc_datetime","value":"pub fn offset_from_utc_datetime(&Self, &NaiveDateTime) -> Self::Offset","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDateTime`. This cannot fail.\n","sig":null,"attributes":[{"value":"/ Creates the offset for given UTC `NaiveDateTime`. This cannot fail.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":109253,"byte_end":109324,"line_start":448,"line_end":448,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":109563,"byte_end":109576,"line_start":453,"line_end":453,"column_start":8,"column_end":21},"name":"from_utc_date","qualname":"::offset::TimeZone::from_utc_date","value":"pub fn from_utc_date(&Self, &NaiveDate) -> Date<Self>","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDate` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[{"value":"/ Converts the UTC `NaiveDate` to the local time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":109407,"byte_end":109458,"line_start":451,"line_end":451,"column_start":5,"column_end":56}},{"value":"/ The UTC is continuous and thus this cannot fail (but can give the duplicate local time).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":109463,"byte_end":109555,"line_start":452,"line_end":452,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":109849,"byte_end":109866,"line_start":459,"line_end":459,"column_start":8,"column_end":25},"name":"from_utc_datetime","qualname":"::offset::TimeZone::from_utc_datetime","value":"pub fn from_utc_datetime(&Self, &NaiveDateTime) -> DateTime<Self>","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDateTime` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[{"value":"/ Converts the UTC `NaiveDateTime` to the local time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":109689,"byte_end":109744,"line_start":457,"line_end":457,"column_start":5,"column_end":60}},{"value":"/ The UTC is continuous and thus this cannot fail (but can give the duplicate local time).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":109749,"byte_end":109841,"line_start":458,"line_end":458,"column_start":5,"column_end":97}}]},{"kind":"Struct","id":{"krate":0,"index":2362},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":113194,"byte_end":113205,"line_start":23,"line_end":23,"column_start":12,"column_end":23},"name":"FixedOffset","qualname":"::offset::fixed::FixedOffset","value":"FixedOffset {  }","parent":null,"children":[{"krate":0,"index":2363}],"decl_id":null,"docs":" The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.","sig":null,"attributes":[{"value":"/ The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":112818,"byte_end":112889,"line_start":16,"line_end":16,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":112890,"byte_end":112893,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":112894,"byte_end":112951,"line_start":18,"line_end":18,"column_start":1,"column_end":58}},{"value":"/ on a `FixedOffset` struct is the preferred way to construct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":112952,"byte_end":113015,"line_start":19,"line_end":19,"column_start":1,"column_end":64}},{"value":"/ `DateTime<FixedOffset>` instances. See the [`east`](#method.east) and","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":113016,"byte_end":113089,"line_start":20,"line_end":20,"column_start":1,"column_end":74}},{"value":"/ [`west`](#method.west) methods for examples.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":113090,"byte_end":113138,"line_start":21,"line_end":21,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":113809,"byte_end":113813,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"east","qualname":"<FixedOffset>::east","value":"pub fn east(i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":113260,"byte_end":113348,"line_start":28,"line_end":28,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Western Hemisphere.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":113353,"byte_end":113406,"line_start":29,"line_end":29,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":113411,"byte_end":113414,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-bound `secs`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":113419,"byte_end":113457,"line_start":31,"line_end":31,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":113462,"byte_end":113465,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":113470,"byte_end":113483,"line_start":33,"line_end":33,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":113488,"byte_end":113491,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":113496,"byte_end":113504,"line_start":35,"line_end":35,"column_start":5,"column_end":13}},{"value":"/ use chrono::{FixedOffset, TimeZone};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":113509,"byte_end":113549,"line_start":36,"line_end":36,"column_start":5,"column_end":45}},{"value":"/ let hour = 3600;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":113554,"byte_end":113574,"line_start":37,"line_end":37,"column_start":5,"column_end":25}},{"value":"/ let datetime = FixedOffset::east(5 * hour).ymd(2016, 11, 08)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":113579,"byte_end":113643,"line_start":38,"line_end":38,"column_start":5,"column_end":69}},{"value":"/                                           .and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":113648,"byte_end":113712,"line_start":39,"line_end":39,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(&datetime.to_rfc3339(), \"2016-11-08T00:00:00+05:00\")","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":113717,"byte_end":113784,"line_start":40,"line_end":40,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":113789,"byte_end":113797,"line_start":41,"line_end":41,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":114148,"byte_end":114156,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"name":"east_opt","qualname":"<FixedOffset>::east_opt","value":"pub fn east_opt(i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":113931,"byte_end":114019,"line_start":46,"line_end":46,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Western Hemisphere.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":114024,"byte_end":114077,"line_start":47,"line_end":47,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":114082,"byte_end":114085,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-bound `secs`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":114090,"byte_end":114136,"line_start":49,"line_end":49,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":114898,"byte_end":114902,"line_start":72,"line_end":72,"column_start":12,"column_end":16},"name":"west","qualname":"<FixedOffset>::west","value":"pub fn west(i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":114349,"byte_end":114437,"line_start":58,"line_end":58,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Eastern Hemisphere.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":114442,"byte_end":114495,"line_start":59,"line_end":59,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":114500,"byte_end":114503,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-bound `secs`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":114508,"byte_end":114546,"line_start":61,"line_end":61,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":114551,"byte_end":114554,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":114559,"byte_end":114572,"line_start":63,"line_end":63,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":114577,"byte_end":114580,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":114585,"byte_end":114593,"line_start":65,"line_end":65,"column_start":5,"column_end":13}},{"value":"/ use chrono::{FixedOffset, TimeZone};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":114598,"byte_end":114638,"line_start":66,"line_end":66,"column_start":5,"column_end":45}},{"value":"/ let hour = 3600;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":114643,"byte_end":114663,"line_start":67,"line_end":67,"column_start":5,"column_end":25}},{"value":"/ let datetime = FixedOffset::west(5 * hour).ymd(2016, 11, 08)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":114668,"byte_end":114732,"line_start":68,"line_end":68,"column_start":5,"column_end":69}},{"value":"/                                           .and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":114737,"byte_end":114801,"line_start":69,"line_end":69,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(&datetime.to_rfc3339(), \"2016-11-08T00:00:00-05:00\")","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":114806,"byte_end":114873,"line_start":70,"line_end":70,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":114878,"byte_end":114886,"line_start":71,"line_end":71,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":115237,"byte_end":115245,"line_start":80,"line_end":80,"column_start":12,"column_end":20},"name":"west_opt","qualname":"<FixedOffset>::west_opt","value":"pub fn west_opt(i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":115020,"byte_end":115108,"line_start":76,"line_end":76,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Eastern Hemisphere.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":115113,"byte_end":115166,"line_start":77,"line_end":77,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":115171,"byte_end":115174,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-bound `secs`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":115179,"byte_end":115225,"line_start":79,"line_end":79,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":433},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":115544,"byte_end":115559,"line_start":90,"line_end":90,"column_start":12,"column_end":27},"name":"local_minus_utc","qualname":"<FixedOffset>::local_minus_utc","value":"pub fn local_minus_utc(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of seconds to add to convert from UTC to the local time.\n","sig":null,"attributes":[{"value":"/ Returns the number of seconds to add to convert from UTC to the local time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":115439,"byte_end":115518,"line_start":88,"line_end":88,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":115523,"byte_end":115532,"line_start":89,"line_end":89,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":115721,"byte_end":115736,"line_start":96,"line_end":96,"column_start":12,"column_end":27},"name":"utc_minus_local","qualname":"<FixedOffset>::utc_minus_local","value":"pub fn utc_minus_local(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of seconds to add to convert from the local time to UTC.\n","sig":null,"attributes":[{"value":"/ Returns the number of seconds to add to convert from the local time to UTC.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":115616,"byte_end":115695,"line_start":94,"line_end":94,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":115700,"byte_end":115709,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2377},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":123249,"byte_end":123254,"line_start":91,"line_end":91,"column_start":12,"column_end":17},"name":"Local","qualname":"::offset::local::Local","value":"","parent":null,"children":[],"decl_id":null,"docs":" The local timescale. This is implemented via the standard `time` crate.","sig":null,"attributes":[{"value":"/ The local timescale. This is implemented via the standard `time` crate.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":122793,"byte_end":122868,"line_start":76,"line_end":76,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":122869,"byte_end":122872,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":122873,"byte_end":122930,"line_start":78,"line_end":78,"column_start":1,"column_end":58}},{"value":"/ on the Local struct is the preferred way to construct `DateTime<Local>`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":122931,"byte_end":123006,"line_start":79,"line_end":79,"column_start":1,"column_end":76}},{"value":"/ instances.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":123007,"byte_end":123021,"line_start":80,"line_end":80,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":123022,"byte_end":123025,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":123026,"byte_end":123039,"line_start":82,"line_end":82,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":123040,"byte_end":123043,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":123044,"byte_end":123052,"line_start":84,"line_end":84,"column_start":1,"column_end":9}},{"value":"/ use chrono::{Local, DateTime, TimeZone};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":123053,"byte_end":123097,"line_start":85,"line_end":85,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":123098,"byte_end":123101,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ let dt: DateTime<Local> = Local::now();","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":123102,"byte_end":123145,"line_start":87,"line_end":87,"column_start":1,"column_end":44}},{"value":"/ let dt: DateTime<Local> = Local.timestamp(0, 0);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":123146,"byte_end":123198,"line_start":88,"line_end":88,"column_start":1,"column_end":53}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":123199,"byte_end":123207,"line_start":89,"line_end":89,"column_start":1,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":123345,"byte_end":123350,"line_start":95,"line_end":95,"column_start":12,"column_end":17},"name":"today","qualname":"<Local>::today","value":"pub fn today() -> Date<Local>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Date` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `Date` which corresponds to the current date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":123274,"byte_end":123333,"line_start":94,"line_end":94,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":123576,"byte_end":123579,"line_start":101,"line_end":101,"column_start":12,"column_end":15},"name":"now","qualname":"<Local>::now","value":"pub fn now() -> DateTime<Local>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DateTime` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `DateTime` which corresponds to the current date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":123409,"byte_end":123472,"line_start":99,"line_end":99,"column_start":5,"column_end":68}},{"value":"cfg(not(all(target_arch = \"wasm32\", not(target_os = \"wasi\"), feature =\n\"wasmbind\")))","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":123477,"byte_end":123564,"line_start":100,"line_end":100,"column_start":5,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":2384},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":129506,"byte_end":129509,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"Utc","qualname":"::offset::utc::Utc","value":"","parent":null,"children":[],"decl_id":null,"docs":" The UTC time zone. This is the most efficient time zone when you don't need the local time.\n It is also used as an offset (which is also a dummy type).","sig":null,"attributes":[{"value":"/ The UTC time zone. This is the most efficient time zone when you don't need the local time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":128860,"byte_end":128955,"line_start":18,"line_end":18,"column_start":1,"column_end":96}},{"value":"/ It is also used as an offset (which is also a dummy type).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":128956,"byte_end":129018,"line_start":19,"line_end":19,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":129019,"byte_end":129022,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":129023,"byte_end":129080,"line_start":21,"line_end":21,"column_start":1,"column_end":58}},{"value":"/ on the UTC struct is the preferred way to construct `DateTime<Utc>`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":129081,"byte_end":129152,"line_start":22,"line_end":22,"column_start":1,"column_end":72}},{"value":"/ instances.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":129153,"byte_end":129167,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":129168,"byte_end":129171,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":129172,"byte_end":129185,"line_start":25,"line_end":25,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":129186,"byte_end":129189,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":129190,"byte_end":129198,"line_start":27,"line_end":27,"column_start":1,"column_end":9}},{"value":"/ use chrono::{DateTime, TimeZone, NaiveDateTime, Utc};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":129199,"byte_end":129256,"line_start":28,"line_end":28,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":129257,"byte_end":129260,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ let dt = DateTime::<Utc>::from_utc(NaiveDateTime::from_timestamp(61, 0), Utc);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":129261,"byte_end":129343,"line_start":30,"line_end":30,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":129344,"byte_end":129347,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(Utc.timestamp(61, 0), dt);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":129348,"byte_end":129389,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 1, 1), dt);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":129390,"byte_end":129447,"line_start":33,"line_end":33,"column_start":1,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":129448,"byte_end":129456,"line_start":34,"line_end":34,"column_start":1,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":129624,"byte_end":129629,"line_start":41,"line_end":41,"column_start":12,"column_end":17},"name":"today","qualname":"<Utc>::today","value":"pub fn today() -> Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Date` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `Date` which corresponds to the current date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":129553,"byte_end":129612,"line_start":40,"line_end":40,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":129851,"byte_end":129854,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"now","qualname":"<Utc>::now","value":"pub fn now() -> DateTime<Utc>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DateTime` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `DateTime` which corresponds to the current date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":129684,"byte_end":129747,"line_start":45,"line_end":45,"column_start":5,"column_end":68}},{"value":"cfg(not(all(target_arch = \"wasm32\", not(target_os = \"wasi\"), feature =\n\"wasmbind\")))","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":129752,"byte_end":129839,"line_start":46,"line_end":46,"column_start":5,"column_end":92}}]},{"kind":"Mod","id":{"krate":0,"index":595},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23625,"byte_end":23630,"line_start":541,"line_end":541,"column_start":9,"column_end":14},"name":"naive","qualname":"::naive","value":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":596},{"krate":0,"index":794},{"krate":0,"index":984},{"krate":0,"index":1076},{"krate":0,"index":1097},{"krate":0,"index":1228},{"krate":0,"index":1229},{"krate":0,"index":1232},{"krate":0,"index":1235},{"krate":0,"index":1238},{"krate":0,"index":1239},{"krate":0,"index":1242},{"krate":0,"index":1245},{"krate":0,"index":1248},{"krate":0,"index":1251}],"decl_id":null,"docs":" Date and time types unconcerned with timezones.","sig":null,"attributes":[{"value":"/ Date and time types unconcerned with timezones.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23637,"byte_end":23688,"line_start":542,"line_end":542,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23693,"byte_end":23696,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ They are primarily building blocks for other types","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23701,"byte_end":23755,"line_start":544,"line_end":544,"column_start":5,"column_end":59}},{"value":"/ (e.g. [`TimeZone`](../offset/trait.TimeZone.html)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23760,"byte_end":23815,"line_start":545,"line_end":545,"column_start":5,"column_end":60}},{"value":"/ but can be also used for the simpler date and time handling.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23820,"byte_end":23884,"line_start":546,"line_end":546,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":2395},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":135623,"byte_end":135632,"line_start":99,"line_end":99,"column_start":12,"column_end":21},"name":"NaiveDate","qualname":"::naive::date::NaiveDate","value":"NaiveDate {  }","parent":null,"children":[{"krate":0,"index":2396}],"decl_id":null,"docs":" ISO 8601 calendar date without timezone.\n Allows for every [proleptic Gregorian date](#calendar-date)\n from Jan 1, 262145 BCE to Dec 31, 262143 CE.\n Also supports the conversion from ISO 8601 ordinal and week date.","sig":null,"attributes":[{"value":"/ ISO 8601 calendar date without timezone.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133045,"byte_end":133089,"line_start":50,"line_end":50,"column_start":1,"column_end":45}},{"value":"/ Allows for every [proleptic Gregorian date](#calendar-date)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133090,"byte_end":133153,"line_start":51,"line_end":51,"column_start":1,"column_end":64}},{"value":"/ from Jan 1, 262145 BCE to Dec 31, 262143 CE.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133154,"byte_end":133202,"line_start":52,"line_end":52,"column_start":1,"column_end":49}},{"value":"/ Also supports the conversion from ISO 8601 ordinal and week date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133203,"byte_end":133272,"line_start":53,"line_end":53,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133273,"byte_end":133276,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ # Calendar Date","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133277,"byte_end":133296,"line_start":55,"line_end":55,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133297,"byte_end":133300,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **calendar date** follows the proleptic Gregorian calendar.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133301,"byte_end":133377,"line_start":57,"line_end":57,"column_start":1,"column_end":77}},{"value":"/ It is like a normal civil calendar but note some slight differences:","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133378,"byte_end":133450,"line_start":58,"line_end":58,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133451,"byte_end":133454,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ * Dates before the Gregorian calendar's inception in 1582 are defined via the extrapolation.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133455,"byte_end":133551,"line_start":60,"line_end":60,"column_start":1,"column_end":97}},{"value":"/   Be careful, as historical dates are often noted in the Julian calendar and others","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133552,"byte_end":133639,"line_start":61,"line_end":61,"column_start":1,"column_end":88}},{"value":"/   and the transition to Gregorian may differ across countries (as late as early 20C).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133640,"byte_end":133729,"line_start":62,"line_end":62,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133730,"byte_end":133733,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/   (Some example: Both Shakespeare from Britain and Cervantes from Spain seemingly died","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133734,"byte_end":133824,"line_start":64,"line_end":64,"column_start":1,"column_end":91}},{"value":"/   on the same calendar date---April 23, 1616---but in the different calendar.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133825,"byte_end":133906,"line_start":65,"line_end":65,"column_start":1,"column_end":82}},{"value":"/   Britain used the Julian calendar at that time, so Shakespeare's death is later.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133907,"byte_end":133993,"line_start":66,"line_end":66,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133994,"byte_end":133997,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ * ISO 8601 calendars has the year 0, which is 1 BCE (a year before 1 CE).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133998,"byte_end":134075,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"/   If you need a typical BCE/BC and CE/AD notation for year numbers,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134076,"byte_end":134147,"line_start":69,"line_end":69,"column_start":1,"column_end":72}},{"value":"/   use the [`Datelike::year_ce`](../trait.Datelike.html#method.year_ce) method.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134148,"byte_end":134230,"line_start":70,"line_end":70,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134231,"byte_end":134234,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ # Week Date","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134235,"byte_end":134250,"line_start":72,"line_end":72,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134251,"byte_end":134254,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **week date** is a triple of year number, week number","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134255,"byte_end":134325,"line_start":74,"line_end":74,"column_start":1,"column_end":71}},{"value":"/ and [day of the week](../enum.Weekday.html) with the following rules:","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134326,"byte_end":134399,"line_start":75,"line_end":75,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134400,"byte_end":134403,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ * A week consists of Monday through Sunday, and is always numbered within some year.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134404,"byte_end":134492,"line_start":77,"line_end":77,"column_start":1,"column_end":89}},{"value":"/   The week number ranges from 1 to 52 or 53 depending on the year.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134493,"byte_end":134563,"line_start":78,"line_end":78,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134564,"byte_end":134567,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ * The week 1 of given year is defined as the first week containing January 4 of that year,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134568,"byte_end":134662,"line_start":80,"line_end":80,"column_start":1,"column_end":95}},{"value":"/   or equivalently, the first week containing four or more days in that year.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134663,"byte_end":134743,"line_start":81,"line_end":81,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134744,"byte_end":134747,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ * The year number in the week date may *not* correspond to the actual Gregorian year.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134748,"byte_end":134837,"line_start":83,"line_end":83,"column_start":1,"column_end":90}},{"value":"/   For example, January 3, 2016 (Sunday) was on the last (53rd) week of 2015.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134838,"byte_end":134918,"line_start":84,"line_end":84,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134919,"byte_end":134922,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ Chrono's date types default to the ISO 8601 [calendar date](#calendar-date),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134923,"byte_end":135003,"line_start":86,"line_end":86,"column_start":1,"column_end":81}},{"value":"/ but [`Datelike::iso_week`](../trait.Datelike.html#tymethod.iso_week) and","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":135004,"byte_end":135080,"line_start":87,"line_end":87,"column_start":1,"column_end":77}},{"value":"/ [`Datelike::weekday`](../trait.Datelike.html#tymethod.weekday) methods","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":135081,"byte_end":135155,"line_start":88,"line_end":88,"column_start":1,"column_end":75}},{"value":"/ can be used to get the corresponding week date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":135156,"byte_end":135207,"line_start":89,"line_end":89,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":135208,"byte_end":135211,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ # Ordinal Date","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":135212,"byte_end":135230,"line_start":91,"line_end":91,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":135231,"byte_end":135234,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **ordinal date** is a pair of year number and day of the year (\"ordinal\").","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":135235,"byte_end":135326,"line_start":93,"line_end":93,"column_start":1,"column_end":92}},{"value":"/ The ordinal number ranges from 1 to 365 or 366 depending on the year.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":135327,"byte_end":135400,"line_start":94,"line_end":94,"column_start":1,"column_end":74}},{"value":"/ The year number is the same as that of the [calendar date](#calendar-date).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":135401,"byte_end":135480,"line_start":95,"line_end":95,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":135481,"byte_end":135484,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ This is currently the internal format of Chrono's date types.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":135485,"byte_end":135550,"line_start":97,"line_end":97,"column_start":1,"column_end":66}}]},{"kind":"Const","id":{"krate":0,"index":696},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":135751,"byte_end":135759,"line_start":104,"line_end":104,"column_start":11,"column_end":19},"name":"MIN_DATE","qualname":"::naive::date::MIN_DATE","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `NaiveDate` (January 1, 262145 BCE).\n","sig":null,"attributes":[{"value":"/ The minimum possible `NaiveDate` (January 1, 262145 BCE).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":135679,"byte_end":135740,"line_start":103,"line_end":103,"column_start":1,"column_end":62}}]},{"kind":"Const","id":{"krate":0,"index":697},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":135909,"byte_end":135917,"line_start":106,"line_end":106,"column_start":11,"column_end":19},"name":"MAX_DATE","qualname":"::naive::date::MAX_DATE","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `NaiveDate` (December 31, 262143 CE).\n","sig":null,"attributes":[{"value":"/ The maximum possible `NaiveDate` (December 31, 262143 CE).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":135836,"byte_end":135898,"line_start":105,"line_end":105,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138281,"byte_end":138289,"line_start":172,"line_end":172,"column_start":12,"column_end":20},"name":"from_ymd","qualname":"<NaiveDate>::from_ymd","value":"pub fn from_ymd(i32, u32, u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n (year, month and day).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [calendar date](#calendar-date)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137551,"byte_end":137619,"line_start":152,"line_end":152,"column_start":5,"column_end":73}},{"value":"/ (year, month and day).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137624,"byte_end":137650,"line_start":153,"line_end":153,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137655,"byte_end":137658,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date, invalid month and/or day.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137663,"byte_end":137725,"line_start":155,"line_end":155,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137730,"byte_end":137733,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137738,"byte_end":137751,"line_start":157,"line_end":157,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137756,"byte_end":137759,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137764,"byte_end":137772,"line_start":159,"line_end":159,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137777,"byte_end":137824,"line_start":160,"line_end":160,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137829,"byte_end":137832,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 3, 14);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137837,"byte_end":137882,"line_start":162,"line_end":162,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137887,"byte_end":137918,"line_start":163,"line_end":163,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137923,"byte_end":137952,"line_start":164,"line_end":164,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137957,"byte_end":137985,"line_start":165,"line_end":165,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137990,"byte_end":138037,"line_start":166,"line_end":166,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138042,"byte_end":138084,"line_start":167,"line_end":167,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138089,"byte_end":138129,"line_start":168,"line_end":168,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138134,"byte_end":138176,"line_start":169,"line_end":169,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138181,"byte_end":138256,"line_start":170,"line_end":170,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138261,"byte_end":138269,"line_start":171,"line_end":171,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139140,"byte_end":139152,"line_start":195,"line_end":195,"column_start":12,"column_end":24},"name":"from_ymd_opt","qualname":"<NaiveDate>::from_ymd_opt","value":"pub fn from_ymd_opt(i32, u32, u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n (year, month and day).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [calendar date](#calendar-date)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138438,"byte_end":138506,"line_start":176,"line_end":176,"column_start":5,"column_end":73}},{"value":"/ (year, month and day).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138511,"byte_end":138537,"line_start":177,"line_end":177,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138542,"byte_end":138545,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date, invalid month and/or day.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138550,"byte_end":138620,"line_start":179,"line_end":179,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138625,"byte_end":138628,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138633,"byte_end":138646,"line_start":181,"line_end":181,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138651,"byte_end":138654,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138659,"byte_end":138667,"line_start":183,"line_end":183,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138672,"byte_end":138698,"line_start":184,"line_end":184,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138703,"byte_end":138706,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ let from_ymd_opt = NaiveDate::from_ymd_opt;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138711,"byte_end":138758,"line_start":186,"line_end":186,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138763,"byte_end":138766,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ assert!(from_ymd_opt(2015, 3, 14).is_some());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138771,"byte_end":138820,"line_start":188,"line_end":188,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(2015, 0, 14).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138825,"byte_end":138874,"line_start":189,"line_end":189,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(2015, 2, 29).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138879,"byte_end":138928,"line_start":190,"line_end":190,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(-4, 2, 29).is_some()); // 5 BCE is a leap year","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138933,"byte_end":139004,"line_start":191,"line_end":191,"column_start":5,"column_end":76}},{"value":"/ assert!(from_ymd_opt(400000, 1, 1).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139009,"byte_end":139059,"line_start":192,"line_end":192,"column_start":5,"column_end":55}},{"value":"/ assert!(from_ymd_opt(-400000, 1, 1).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139064,"byte_end":139115,"line_start":193,"line_end":193,"column_start":5,"column_end":56}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139120,"byte_end":139128,"line_start":194,"line_end":194,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":703},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140046,"byte_end":140053,"line_start":220,"line_end":220,"column_start":12,"column_end":19},"name":"from_yo","qualname":"<NaiveDate>::from_yo","value":"pub fn from_yo(i32, u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139331,"byte_end":139397,"line_start":200,"line_end":200,"column_start":5,"column_end":71}},{"value":"/ (year and day of the year).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139402,"byte_end":139433,"line_start":201,"line_end":201,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139438,"byte_end":139441,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid day of year.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139446,"byte_end":139509,"line_start":203,"line_end":203,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139514,"byte_end":139517,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139522,"byte_end":139535,"line_start":205,"line_end":205,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139540,"byte_end":139543,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139548,"byte_end":139556,"line_start":207,"line_end":207,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139561,"byte_end":139608,"line_start":208,"line_end":208,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139613,"byte_end":139616,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_yo(2015, 73);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139621,"byte_end":139662,"line_start":210,"line_end":210,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(d.ordinal(), 73);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139667,"byte_end":139699,"line_start":211,"line_end":211,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139704,"byte_end":139735,"line_start":212,"line_end":212,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139740,"byte_end":139769,"line_start":213,"line_end":213,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139774,"byte_end":139802,"line_start":214,"line_end":214,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139807,"byte_end":139849,"line_start":215,"line_end":215,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139854,"byte_end":139894,"line_start":216,"line_end":216,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139899,"byte_end":139941,"line_start":217,"line_end":217,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139946,"byte_end":140021,"line_start":218,"line_end":218,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140026,"byte_end":140034,"line_start":219,"line_end":219,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140923,"byte_end":140934,"line_start":244,"line_end":244,"column_start":12,"column_end":23},"name":"from_yo_opt","qualname":"<NaiveDate>::from_yo_opt","value":"pub fn from_yo_opt(i32, u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140190,"byte_end":140256,"line_start":224,"line_end":224,"column_start":5,"column_end":71}},{"value":"/ (year and day of the year).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140261,"byte_end":140292,"line_start":225,"line_end":225,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140297,"byte_end":140300,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid day of year.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140305,"byte_end":140376,"line_start":227,"line_end":227,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140381,"byte_end":140384,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140389,"byte_end":140402,"line_start":229,"line_end":229,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140407,"byte_end":140410,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140415,"byte_end":140423,"line_start":231,"line_end":231,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140428,"byte_end":140454,"line_start":232,"line_end":232,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140459,"byte_end":140462,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ let from_yo_opt = NaiveDate::from_yo_opt;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140467,"byte_end":140512,"line_start":234,"line_end":234,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140517,"byte_end":140520,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ assert!(from_yo_opt(2015, 100).is_some());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140525,"byte_end":140571,"line_start":236,"line_end":236,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(2015, 0).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140576,"byte_end":140620,"line_start":237,"line_end":237,"column_start":5,"column_end":49}},{"value":"/ assert!(from_yo_opt(2015, 365).is_some());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140625,"byte_end":140671,"line_start":238,"line_end":238,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(2015, 366).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140676,"byte_end":140722,"line_start":239,"line_end":239,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(-4, 366).is_some()); // 5 BCE is a leap year","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140727,"byte_end":140795,"line_start":240,"line_end":240,"column_start":5,"column_end":73}},{"value":"/ assert!(from_yo_opt(400000, 1).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140800,"byte_end":140846,"line_start":241,"line_end":241,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(-400000, 1).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140851,"byte_end":140898,"line_start":242,"line_end":242,"column_start":5,"column_end":52}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140903,"byte_end":140911,"line_start":243,"line_end":243,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":141940,"byte_end":141951,"line_start":270,"line_end":270,"column_start":12,"column_end":23},"name":"from_isoywd","qualname":"<NaiveDate>::from_isoywd","value":"pub fn from_isoywd(i32, u32, Weekday) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ISO week date](#week-date)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":141100,"byte_end":141164,"line_start":249,"line_end":249,"column_start":5,"column_end":69}},{"value":"/ (year, week number and day of the week).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":141169,"byte_end":141213,"line_start":250,"line_end":250,"column_start":5,"column_end":49}},{"value":"/ The resulting `NaiveDate` may have a different year from the input year.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":141218,"byte_end":141294,"line_start":251,"line_end":251,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":141299,"byte_end":141302,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid week number.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":141307,"byte_end":141370,"line_start":253,"line_end":253,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":141375,"byte_end":141378,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":141383,"byte_end":141396,"line_start":255,"line_end":255,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":141401,"byte_end":141404,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":141409,"byte_end":141417,"line_start":257,"line_end":257,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":141422,"byte_end":141469,"line_start":258,"line_end":258,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":141474,"byte_end":141477,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 11, Weekday::Sat);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":141482,"byte_end":141541,"line_start":260,"line_end":260,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":141546,"byte_end":141588,"line_start":261,"line_end":261,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":141593,"byte_end":141633,"line_start":262,"line_end":262,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":141638,"byte_end":141680,"line_start":263,"line_end":263,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":141685,"byte_end":141716,"line_start":264,"line_end":264,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":141721,"byte_end":141750,"line_start":265,"line_end":265,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":141755,"byte_end":141783,"line_start":266,"line_end":266,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":141788,"byte_end":141835,"line_start":267,"line_end":267,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":141840,"byte_end":141915,"line_start":268,"line_end":268,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":141920,"byte_end":141928,"line_start":269,"line_end":269,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":144314,"byte_end":144329,"line_start":318,"line_end":318,"column_start":12,"column_end":27},"name":"from_isoywd_opt","qualname":"<NaiveDate>::from_isoywd_opt","value":"pub fn from_isoywd_opt(i32, u32, Weekday) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ISO week date](#week-date)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142113,"byte_end":142177,"line_start":274,"line_end":274,"column_start":5,"column_end":69}},{"value":"/ (year, week number and day of the week).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142182,"byte_end":142226,"line_start":275,"line_end":275,"column_start":5,"column_end":49}},{"value":"/ The resulting `NaiveDate` may have a different year from the input year.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142231,"byte_end":142307,"line_start":276,"line_end":276,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142312,"byte_end":142315,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid week number.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142320,"byte_end":142391,"line_start":278,"line_end":278,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142396,"byte_end":142399,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142404,"byte_end":142417,"line_start":280,"line_end":280,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142422,"byte_end":142425,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142430,"byte_end":142438,"line_start":282,"line_end":282,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142443,"byte_end":142480,"line_start":283,"line_end":283,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142485,"byte_end":142488,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142493,"byte_end":142532,"line_start":285,"line_end":285,"column_start":5,"column_end":44}},{"value":"/ let from_isoywd_opt = NaiveDate::from_isoywd_opt;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142537,"byte_end":142590,"line_start":286,"line_end":286,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142595,"byte_end":142598,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 0, Weekday::Sun), None);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142603,"byte_end":142664,"line_start":288,"line_end":288,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 10, Weekday::Sun), Some(from_ymd(2015, 3, 8)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142669,"byte_end":142753,"line_start":289,"line_end":289,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 30, Weekday::Mon), Some(from_ymd(2015, 7, 20)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142758,"byte_end":142843,"line_start":290,"line_end":290,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 60, Weekday::Mon), None);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142848,"byte_end":142910,"line_start":291,"line_end":291,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142915,"byte_end":142918,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_isoywd_opt(400000, 10, Weekday::Fri), None);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142923,"byte_end":142987,"line_start":293,"line_end":293,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(from_isoywd_opt(-400000, 10, Weekday::Sat), None);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142992,"byte_end":143057,"line_start":294,"line_end":294,"column_start":5,"column_end":70}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":143062,"byte_end":143070,"line_start":295,"line_end":295,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":143075,"byte_end":143078,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ The year number of ISO week date may differ from that of the calendar date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":143083,"byte_end":143162,"line_start":297,"line_end":297,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":143167,"byte_end":143170,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":143175,"byte_end":143183,"line_start":299,"line_end":299,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDate, Weekday};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":143188,"byte_end":143227,"line_start":300,"line_end":300,"column_start":5,"column_end":44}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":143232,"byte_end":143273,"line_start":301,"line_end":301,"column_start":5,"column_end":46}},{"value":"/ # let from_isoywd_opt = NaiveDate::from_isoywd_opt;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":143278,"byte_end":143333,"line_start":302,"line_end":302,"column_start":5,"column_end":60}},{"value":"/ //           Mo Tu We Th Fr Sa Su","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":143338,"byte_end":143375,"line_start":303,"line_end":303,"column_start":5,"column_end":42}},{"value":"/ // 2014-W52  22 23 24 25 26 27 28    has 4+ days of new year,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":143380,"byte_end":143445,"line_start":304,"line_end":304,"column_start":5,"column_end":70}},{"value":"/ // 2015-W01  29 30 31  1  2  3  4 <- so this is the first week","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":143450,"byte_end":143516,"line_start":305,"line_end":305,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(from_isoywd_opt(2014, 52, Weekday::Sun), Some(from_ymd(2014, 12, 28)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":143521,"byte_end":143607,"line_start":306,"line_end":306,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_isoywd_opt(2014, 53, Weekday::Mon), None);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":143612,"byte_end":143674,"line_start":307,"line_end":307,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 1, Weekday::Mon), Some(from_ymd(2014, 12, 29)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":143679,"byte_end":143764,"line_start":308,"line_end":308,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":143769,"byte_end":143772,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ // 2015-W52  21 22 23 24 25 26 27    has 4+ days of old year,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":143777,"byte_end":143842,"line_start":310,"line_end":310,"column_start":5,"column_end":70}},{"value":"/ // 2015-W53  28 29 30 31  1  2  3 <- so this is the last week","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":143847,"byte_end":143912,"line_start":311,"line_end":311,"column_start":5,"column_end":70}},{"value":"/ // 2016-W01   4  5  6  7  8  9 10","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":143917,"byte_end":143954,"line_start":312,"line_end":312,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 52, Weekday::Sun), Some(from_ymd(2015, 12, 27)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":143959,"byte_end":144045,"line_start":313,"line_end":313,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 53, Weekday::Sun), Some(from_ymd(2016, 1, 3)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":144050,"byte_end":144134,"line_start":314,"line_end":314,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 54, Weekday::Mon), None);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":144139,"byte_end":144201,"line_start":315,"line_end":315,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from_isoywd_opt(2016, 1, Weekday::Mon), Some(from_ymd(2016, 1, 4)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":144206,"byte_end":144289,"line_start":316,"line_end":316,"column_start":5,"column_end":88}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":144294,"byte_end":144302,"line_start":317,"line_end":317,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147272,"byte_end":147293,"line_start":393,"line_end":393,"column_start":12,"column_end":33},"name":"from_num_days_from_ce","qualname":"<NaiveDate>::from_num_days_from_ce","value":"pub fn from_num_days_from_ce(i32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with\n January 1, 1 being day 1.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145541,"byte_end":145630,"line_start":349,"line_end":349,"column_start":5,"column_end":94}},{"value":"/ January 1, 1 being day 1.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145635,"byte_end":145664,"line_start":350,"line_end":350,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145669,"byte_end":145672,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ Panics if the date is out of range.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145677,"byte_end":145716,"line_start":352,"line_end":352,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145721,"byte_end":145724,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145729,"byte_end":145742,"line_start":354,"line_end":354,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145747,"byte_end":145750,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145755,"byte_end":145763,"line_start":356,"line_end":356,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145768,"byte_end":145815,"line_start":357,"line_end":357,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145820,"byte_end":145823,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_num_days_from_ce(735671);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145828,"byte_end":145881,"line_start":359,"line_end":359,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145886,"byte_end":145961,"line_start":360,"line_end":360,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145966,"byte_end":145997,"line_start":361,"line_end":361,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146002,"byte_end":146031,"line_start":362,"line_end":362,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146036,"byte_end":146064,"line_start":363,"line_end":363,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146069,"byte_end":146116,"line_start":364,"line_end":364,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146121,"byte_end":146163,"line_start":365,"line_end":365,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146168,"byte_end":146208,"line_start":366,"line_end":366,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146213,"byte_end":146255,"line_start":367,"line_end":367,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146260,"byte_end":146268,"line_start":368,"line_end":368,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146273,"byte_end":146276,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ While not directly supported by Chrono,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146281,"byte_end":146324,"line_start":370,"line_end":370,"column_start":5,"column_end":48}},{"value":"/ it is easy to convert from the Julian day number","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146329,"byte_end":146381,"line_start":371,"line_end":371,"column_start":5,"column_end":57}},{"value":"/ (January 1, 4713 BCE in the *Julian* calendar being Day 0)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146386,"byte_end":146448,"line_start":372,"line_end":372,"column_start":5,"column_end":67}},{"value":"/ to Gregorian with this method.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146453,"byte_end":146487,"line_start":373,"line_end":373,"column_start":5,"column_end":39}},{"value":"/ (Note that this panics when `jd` is out of range.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146492,"byte_end":146546,"line_start":374,"line_end":374,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146551,"byte_end":146554,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146559,"byte_end":146567,"line_start":376,"line_end":376,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146572,"byte_end":146598,"line_start":377,"line_end":377,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146603,"byte_end":146606,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ fn jd_to_date(jd: i32) -> NaiveDate {","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146611,"byte_end":146652,"line_start":379,"line_end":379,"column_start":5,"column_end":46}},{"value":"/     // keep in mind that the Julian day number is 0-based","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146657,"byte_end":146718,"line_start":380,"line_end":380,"column_start":5,"column_end":66}},{"value":"/     // while this method requires an 1-based number.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146723,"byte_end":146779,"line_start":381,"line_end":381,"column_start":5,"column_end":61}},{"value":"/     NaiveDate::from_num_days_from_ce(jd - 1721425)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146784,"byte_end":146838,"line_start":382,"line_end":382,"column_start":5,"column_end":59}},{"value":"/ }","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146843,"byte_end":146848,"line_start":383,"line_end":383,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146853,"byte_end":146856,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ // January 1, 4713 BCE in Julian = November 24, 4714 BCE in Gregorian","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146861,"byte_end":146934,"line_start":385,"line_end":385,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(jd_to_date(0), NaiveDate::from_ymd(-4713, 11, 24));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146939,"byte_end":147005,"line_start":386,"line_end":386,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147010,"byte_end":147013,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(jd_to_date(1721426), NaiveDate::from_ymd(1, 1, 1));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147018,"byte_end":147084,"line_start":388,"line_end":388,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(jd_to_date(2450000), NaiveDate::from_ymd(1995, 10, 9));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147089,"byte_end":147159,"line_start":389,"line_end":389,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(jd_to_date(2451545), NaiveDate::from_ymd(2000, 1, 1));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147164,"byte_end":147233,"line_start":390,"line_end":390,"column_start":5,"column_end":74}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147238,"byte_end":147246,"line_start":391,"line_end":391,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147251,"byte_end":147260,"line_start":392,"line_end":392,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":148242,"byte_end":148267,"line_start":417,"line_end":417,"column_start":12,"column_end":37},"name":"from_num_days_from_ce_opt","qualname":"<NaiveDate>::from_num_days_from_ce_opt","value":"pub fn from_num_days_from_ce_opt(i32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with\n January 1, 1 being day 1.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147410,"byte_end":147499,"line_start":397,"line_end":397,"column_start":5,"column_end":94}},{"value":"/ January 1, 1 being day 1.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147504,"byte_end":147533,"line_start":398,"line_end":398,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147538,"byte_end":147541,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the date is out of range.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147546,"byte_end":147593,"line_start":400,"line_end":400,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147598,"byte_end":147601,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147606,"byte_end":147619,"line_start":402,"line_end":402,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147624,"byte_end":147627,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147632,"byte_end":147640,"line_start":404,"line_end":404,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147645,"byte_end":147671,"line_start":405,"line_end":405,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147676,"byte_end":147679,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ let from_ndays_opt = NaiveDate::from_num_days_from_ce_opt;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147684,"byte_end":147746,"line_start":407,"line_end":407,"column_start":5,"column_end":67}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147751,"byte_end":147790,"line_start":408,"line_end":408,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147795,"byte_end":147798,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_ndays_opt(730_000),      Some(from_ymd(1999, 9, 3)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147803,"byte_end":147876,"line_start":410,"line_end":410,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(from_ndays_opt(1),            Some(from_ymd(1, 1, 1)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147881,"byte_end":147951,"line_start":411,"line_end":411,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(from_ndays_opt(0),            Some(from_ymd(0, 12, 31)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147956,"byte_end":148028,"line_start":412,"line_end":412,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(from_ndays_opt(-1),           Some(from_ymd(0, 12, 30)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":148033,"byte_end":148105,"line_start":413,"line_end":413,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(from_ndays_opt(100_000_000),  None);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":148110,"byte_end":148161,"line_start":414,"line_end":414,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(from_ndays_opt(-100_000_000), None);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":148166,"byte_end":148217,"line_start":415,"line_end":415,"column_start":5,"column_end":56}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":148222,"byte_end":148230,"line_start":416,"line_end":416,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":149977,"byte_end":149998,"line_start":450,"line_end":450,"column_start":12,"column_end":33},"name":"from_weekday_of_month","qualname":"<NaiveDate>::from_weekday_of_month","value":"pub fn from_weekday_of_month(i32, u32, Weekday, u8) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week\n since the beginning of the given month.  For instance, if you want the 2nd Friday of March\n 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":148693,"byte_end":148786,"line_start":425,"line_end":425,"column_start":5,"column_end":98}},{"value":"/ since the beginning of the given month.  For instance, if you want the 2nd Friday of March","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":148791,"byte_end":148885,"line_start":426,"line_end":426,"column_start":5,"column_end":99}},{"value":"/ 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":148890,"byte_end":148975,"line_start":427,"line_end":427,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":148980,"byte_end":148983,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":148988,"byte_end":149000,"line_start":429,"line_end":429,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":149005,"byte_end":149008,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ The resulting `NaiveDate` is guaranteed to be in `month`.  If `n` is larger than the number","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":149013,"byte_end":149108,"line_start":431,"line_end":431,"column_start":5,"column_end":100}},{"value":"/ of `weekday` in `month` (eg. the 6th Friday of March 2017) then this function will panic.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":149113,"byte_end":149206,"line_start":432,"line_end":432,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":149211,"byte_end":149214,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ `n` is 1-indexed.  Passing `n=0` will cause a panic.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":149219,"byte_end":149275,"line_start":434,"line_end":434,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":149280,"byte_end":149283,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":149288,"byte_end":149301,"line_start":436,"line_end":436,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":149306,"byte_end":149309,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":149314,"byte_end":149322,"line_start":438,"line_end":438,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":149327,"byte_end":149364,"line_start":439,"line_end":439,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":149369,"byte_end":149372,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ let from_weekday_of_month = NaiveDate::from_weekday_of_month;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":149377,"byte_end":149442,"line_start":441,"line_end":441,"column_start":5,"column_end":70}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":149447,"byte_end":149486,"line_start":442,"line_end":442,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":149491,"byte_end":149494,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Wed, 1), from_ymd(2018, 8, 1));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":149499,"byte_end":149585,"line_start":444,"line_end":444,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Fri, 1), from_ymd(2018, 8, 3));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":149590,"byte_end":149676,"line_start":445,"line_end":445,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Tue, 2), from_ymd(2018, 8, 14));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":149681,"byte_end":149768,"line_start":446,"line_end":446,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Fri, 4), from_ymd(2018, 8, 24));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":149773,"byte_end":149860,"line_start":447,"line_end":447,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Fri, 5), from_ymd(2018, 8, 31));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":149865,"byte_end":149952,"line_start":448,"line_end":448,"column_start":5,"column_end":92}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":149957,"byte_end":149965,"line_start":449,"line_end":449,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":150873,"byte_end":150898,"line_start":466,"line_end":466,"column_start":12,"column_end":37},"name":"from_weekday_of_month_opt","qualname":"<NaiveDate>::from_weekday_of_month_opt","value":"pub fn from_weekday_of_month_opt(i32, u32, Weekday, u8) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week\n since the beginning of the given month.  For instance, if you want the 2nd Friday of March\n 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.  `n` is 1-indexed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":150171,"byte_end":150264,"line_start":454,"line_end":454,"column_start":5,"column_end":98}},{"value":"/ since the beginning of the given month.  For instance, if you want the 2nd Friday of March","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":150269,"byte_end":150363,"line_start":455,"line_end":455,"column_start":5,"column_end":99}},{"value":"/ 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.  `n` is 1-indexed.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":150368,"byte_end":150472,"line_start":456,"line_end":456,"column_start":5,"column_end":109}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":150477,"byte_end":150480,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":150485,"byte_end":150493,"line_start":458,"line_end":458,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":150498,"byte_end":150535,"line_start":459,"line_end":459,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(NaiveDate::from_weekday_of_month_opt(2017, 3, Weekday::Fri, 2),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":150540,"byte_end":150618,"line_start":460,"line_end":460,"column_start":5,"column_end":83}},{"value":"/            NaiveDate::from_ymd_opt(2017, 3, 10))","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":150623,"byte_end":150675,"line_start":461,"line_end":461,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":150680,"byte_end":150688,"line_start":462,"line_end":462,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":150693,"byte_end":150696,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if `n` out-of-range; ie. if `n` is larger than the number of `weekday` in","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":150701,"byte_end":150793,"line_start":464,"line_end":464,"column_start":5,"column_end":97}},{"value":"/ `month` (eg. the 6th Friday of March 2017), or if `n == 0`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":150798,"byte_end":150861,"line_start":465,"line_end":465,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":152918,"byte_end":152932,"line_start":523,"line_end":523,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDate>::parse_from_str","value":"pub fn parse_from_str(&str, &str) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDate`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveDate`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":151349,"byte_end":151432,"line_start":481,"line_end":481,"column_start":5,"column_end":88}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":151437,"byte_end":151507,"line_start":482,"line_end":482,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":151512,"byte_end":151550,"line_start":483,"line_end":483,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":151555,"byte_end":151558,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":151563,"byte_end":151576,"line_start":485,"line_end":485,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":151581,"byte_end":151584,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":151589,"byte_end":151597,"line_start":487,"line_end":487,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":151602,"byte_end":151628,"line_start":488,"line_end":488,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":151633,"byte_end":151636,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":151641,"byte_end":151692,"line_start":490,"line_end":490,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":151697,"byte_end":151700,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"2015-09-05\", \"%Y-%m-%d\"),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":151705,"byte_end":151761,"line_start":492,"line_end":492,"column_start":5,"column_end":61}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":151766,"byte_end":151818,"line_start":493,"line_end":493,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(parse_from_str(\"5sep2015\", \"%d%b%Y\"),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":151823,"byte_end":151875,"line_start":494,"line_end":494,"column_start":5,"column_end":57}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":151880,"byte_end":151932,"line_start":495,"line_end":495,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":151937,"byte_end":151945,"line_start":496,"line_end":496,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":151950,"byte_end":151953,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ Time and offset is ignored for the purpose of parsing.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":151958,"byte_end":152016,"line_start":498,"line_end":498,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":152021,"byte_end":152024,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":152029,"byte_end":152037,"line_start":500,"line_end":500,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":152042,"byte_end":152070,"line_start":501,"line_end":501,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":152075,"byte_end":152128,"line_start":502,"line_end":502,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":152133,"byte_end":152214,"line_start":503,"line_end":503,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2014, 5, 17)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":152219,"byte_end":152272,"line_start":504,"line_end":504,"column_start":5,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":152277,"byte_end":152285,"line_start":505,"line_end":505,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":152290,"byte_end":152293,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ Out-of-bound dates or insufficient fields are errors.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":152298,"byte_end":152355,"line_start":507,"line_end":507,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":152360,"byte_end":152363,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":152368,"byte_end":152376,"line_start":509,"line_end":509,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":152381,"byte_end":152409,"line_start":510,"line_end":510,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":152414,"byte_end":152467,"line_start":511,"line_end":511,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"2015/9\", \"%Y/%m\").is_err());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":152472,"byte_end":152528,"line_start":512,"line_end":512,"column_start":5,"column_end":61}},{"value":"/ assert!(parse_from_str(\"2015/9/31\", \"%Y/%m/%d\").is_err());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":152533,"byte_end":152595,"line_start":513,"line_end":513,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":152600,"byte_end":152608,"line_start":514,"line_end":514,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":152613,"byte_end":152616,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":152621,"byte_end":152703,"line_start":516,"line_end":516,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":152708,"byte_end":152711,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":152716,"byte_end":152724,"line_start":518,"line_end":518,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":152729,"byte_end":152757,"line_start":519,"line_end":519,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":152762,"byte_end":152815,"line_start":520,"line_end":520,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"Sat, 09 Aug 2013\", \"%a, %d %b %Y\").is_err());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":152820,"byte_end":152893,"line_start":521,"line_end":521,"column_start":5,"column_end":78}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":152898,"byte_end":152906,"line_start":522,"line_end":522,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":153581,"byte_end":153589,"line_start":544,"line_end":544,"column_start":12,"column_end":20},"name":"and_time","qualname":"<NaiveDate>::and_time","value":"pub fn and_time(&Self, NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":153120,"byte_end":153196,"line_start":529,"line_end":529,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":153201,"byte_end":153204,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":153209,"byte_end":153222,"line_start":531,"line_end":531,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":153227,"byte_end":153230,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":153235,"byte_end":153243,"line_start":533,"line_end":533,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime, NaiveDateTime};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":153248,"byte_end":153302,"line_start":534,"line_end":534,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":153307,"byte_end":153310,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":153315,"byte_end":153359,"line_start":536,"line_end":536,"column_start":5,"column_end":49}},{"value":"/ let t = NaiveTime::from_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":153364,"byte_end":153419,"line_start":537,"line_end":537,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":153424,"byte_end":153427,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_time(t);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":153432,"byte_end":153474,"line_start":539,"line_end":539,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(dt.date(), d);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":153479,"byte_end":153508,"line_start":540,"line_end":540,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(dt.time(), t);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":153513,"byte_end":153542,"line_start":541,"line_end":541,"column_start":5,"column_end":34}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":153547,"byte_end":153555,"line_start":542,"line_end":542,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":153560,"byte_end":153569,"line_start":543,"line_end":543,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":154405,"byte_end":154412,"line_start":568,"line_end":568,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<NaiveDate>::and_hms","value":"pub fn and_hms(&Self, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute and second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":153684,"byte_end":153763,"line_start":548,"line_end":548,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":153768,"byte_end":153771,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ No [leap second](./struct.NaiveTime.html#leap-second-handling) is allowed here;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":153776,"byte_end":153859,"line_start":550,"line_end":550,"column_start":5,"column_end":88}},{"value":"/ use `NaiveDate::and_hms_*` methods with a subsecond parameter instead.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":153864,"byte_end":153938,"line_start":551,"line_end":551,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":153943,"byte_end":153946,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":153951,"byte_end":154000,"line_start":553,"line_end":553,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":154005,"byte_end":154008,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":154013,"byte_end":154026,"line_start":555,"line_end":555,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":154031,"byte_end":154034,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":154039,"byte_end":154047,"line_start":557,"line_end":557,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":154052,"byte_end":154124,"line_start":558,"line_end":558,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":154129,"byte_end":154132,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":154137,"byte_end":154181,"line_start":560,"line_end":560,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":154186,"byte_end":154189,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":154194,"byte_end":154244,"line_start":562,"line_end":562,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":154249,"byte_end":154281,"line_start":563,"line_end":563,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":154286,"byte_end":154329,"line_start":564,"line_end":564,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":154334,"byte_end":154366,"line_start":565,"line_end":565,"column_start":5,"column_end":37}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":154371,"byte_end":154379,"line_start":566,"line_end":566,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":154384,"byte_end":154393,"line_start":567,"line_end":567,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":714},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":155298,"byte_end":155309,"line_start":591,"line_end":591,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<NaiveDate>::and_hms_opt","value":"pub fn and_hms_opt(&Self, u32, u32, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute and second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":154545,"byte_end":154624,"line_start":572,"line_end":572,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":154629,"byte_end":154632,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ No [leap second](./struct.NaiveTime.html#leap-second-handling) is allowed here;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":154637,"byte_end":154720,"line_start":574,"line_end":574,"column_start":5,"column_end":88}},{"value":"/ use `NaiveDate::and_hms_*_opt` methods with a subsecond parameter instead.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":154725,"byte_end":154803,"line_start":575,"line_end":575,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":154808,"byte_end":154811,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":154816,"byte_end":154873,"line_start":577,"line_end":577,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":154878,"byte_end":154881,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":154886,"byte_end":154899,"line_start":579,"line_end":579,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":154904,"byte_end":154907,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":154912,"byte_end":154920,"line_start":581,"line_end":581,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":154925,"byte_end":154951,"line_start":582,"line_end":582,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":154956,"byte_end":154959,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":154964,"byte_end":155008,"line_start":584,"line_end":584,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_opt(12, 34, 56).is_some());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":155013,"byte_end":155062,"line_start":585,"line_end":585,"column_start":5,"column_end":54}},{"value":"/ assert!(d.and_hms_opt(12, 34, 60).is_none()); // use `and_hms_milli_opt` instead","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":155067,"byte_end":155151,"line_start":586,"line_end":586,"column_start":5,"column_end":89}},{"value":"/ assert!(d.and_hms_opt(12, 60, 56).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":155156,"byte_end":155205,"line_start":587,"line_end":587,"column_start":5,"column_end":54}},{"value":"/ assert!(d.and_hms_opt(24, 34, 56).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":155210,"byte_end":155259,"line_start":588,"line_end":588,"column_start":5,"column_end":54}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":155264,"byte_end":155272,"line_start":589,"line_end":589,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":155277,"byte_end":155286,"line_start":590,"line_end":590,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":156248,"byte_end":156261,"line_start":616,"line_end":616,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<NaiveDate>::and_hms_milli","value":"pub fn and_hms_milli(&Self, u32, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":155466,"byte_end":155558,"line_start":595,"line_end":595,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":155563,"byte_end":155566,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":155571,"byte_end":155612,"line_start":597,"line_end":597,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":155617,"byte_end":155707,"line_start":598,"line_end":598,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":155712,"byte_end":155715,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":155720,"byte_end":155782,"line_start":600,"line_end":600,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":155787,"byte_end":155790,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":155795,"byte_end":155808,"line_start":602,"line_end":602,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":155813,"byte_end":155816,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":155821,"byte_end":155829,"line_start":604,"line_end":604,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":155834,"byte_end":155906,"line_start":605,"line_end":605,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":155911,"byte_end":155914,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":155919,"byte_end":155963,"line_start":607,"line_end":607,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":155968,"byte_end":155971,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":155976,"byte_end":156037,"line_start":609,"line_end":609,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":156042,"byte_end":156074,"line_start":610,"line_end":610,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":156079,"byte_end":156122,"line_start":611,"line_end":611,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":156127,"byte_end":156159,"line_start":612,"line_end":612,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_000_000);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":156164,"byte_end":156209,"line_start":613,"line_end":613,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":156214,"byte_end":156222,"line_start":614,"line_end":614,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":156227,"byte_end":156236,"line_start":615,"line_end":615,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":717},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":157334,"byte_end":157351,"line_start":641,"line_end":641,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<NaiveDate>::and_hms_milli_opt","value":"pub fn and_hms_milli_opt(&Self, u32, u32, u32, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":156419,"byte_end":156511,"line_start":620,"line_end":620,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":156516,"byte_end":156519,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":156524,"byte_end":156565,"line_start":622,"line_end":622,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":156570,"byte_end":156660,"line_start":623,"line_end":623,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":156665,"byte_end":156668,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":156673,"byte_end":156743,"line_start":625,"line_end":625,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":156748,"byte_end":156751,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":156756,"byte_end":156769,"line_start":627,"line_end":627,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":156774,"byte_end":156777,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":156782,"byte_end":156790,"line_start":629,"line_end":629,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":156795,"byte_end":156821,"line_start":630,"line_end":630,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":156826,"byte_end":156829,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":156834,"byte_end":156878,"line_start":632,"line_end":632,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 56,   789).is_some());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":156883,"byte_end":156945,"line_start":633,"line_end":633,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 59, 1_789).is_some()); // leap second","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":156950,"byte_end":157027,"line_start":634,"line_end":634,"column_start":5,"column_end":82}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 59, 2_789).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":157032,"byte_end":157094,"line_start":635,"line_end":635,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 60,   789).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":157099,"byte_end":157161,"line_start":636,"line_end":636,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 60, 56,   789).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":157166,"byte_end":157228,"line_start":637,"line_end":637,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(24, 34, 56,   789).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":157233,"byte_end":157295,"line_start":638,"line_end":638,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":157300,"byte_end":157308,"line_start":639,"line_end":639,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":157313,"byte_end":157322,"line_start":640,"line_end":640,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":158370,"byte_end":158383,"line_start":672,"line_end":672,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<NaiveDate>::and_hms_micro","value":"pub fn and_hms_micro(&Self, u32, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":157580,"byte_end":157672,"line_start":651,"line_end":651,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":157677,"byte_end":157680,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":157685,"byte_end":157730,"line_start":653,"line_end":653,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":157735,"byte_end":157825,"line_start":654,"line_end":654,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":157830,"byte_end":157833,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":157838,"byte_end":157900,"line_start":656,"line_end":656,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":157905,"byte_end":157908,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":157913,"byte_end":157926,"line_start":658,"line_end":658,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":157931,"byte_end":157934,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":157939,"byte_end":157947,"line_start":660,"line_end":660,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":157952,"byte_end":158024,"line_start":661,"line_end":661,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":158029,"byte_end":158032,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":158037,"byte_end":158081,"line_start":663,"line_end":663,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":158086,"byte_end":158089,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_micro(12, 34, 56, 789_012);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":158094,"byte_end":158159,"line_start":665,"line_end":665,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":158164,"byte_end":158196,"line_start":666,"line_end":666,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":158201,"byte_end":158244,"line_start":667,"line_end":667,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":158249,"byte_end":158281,"line_start":668,"line_end":668,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_012_000);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":158286,"byte_end":158331,"line_start":669,"line_end":669,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":158336,"byte_end":158344,"line_start":670,"line_end":670,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":158349,"byte_end":158358,"line_start":671,"line_end":671,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":159484,"byte_end":159501,"line_start":697,"line_end":697,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<NaiveDate>::and_hms_micro_opt","value":"pub fn and_hms_micro_opt(&Self, u32, u32, u32, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":158541,"byte_end":158633,"line_start":676,"line_end":676,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":158638,"byte_end":158641,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":158646,"byte_end":158691,"line_start":678,"line_end":678,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":158696,"byte_end":158786,"line_start":679,"line_end":679,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":158791,"byte_end":158794,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":158799,"byte_end":158869,"line_start":681,"line_end":681,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":158874,"byte_end":158877,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":158882,"byte_end":158895,"line_start":683,"line_end":683,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":158900,"byte_end":158903,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":158908,"byte_end":158916,"line_start":685,"line_end":685,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":158921,"byte_end":158947,"line_start":686,"line_end":686,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":158952,"byte_end":158955,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":158960,"byte_end":159004,"line_start":688,"line_end":688,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 56,   789_012).is_some());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":159009,"byte_end":159075,"line_start":689,"line_end":689,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 59, 1_789_012).is_some()); // leap second","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":159080,"byte_end":159161,"line_start":690,"line_end":690,"column_start":5,"column_end":86}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 59, 2_789_012).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":159166,"byte_end":159232,"line_start":691,"line_end":691,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 60,   789_012).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":159237,"byte_end":159303,"line_start":692,"line_end":692,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 60, 56,   789_012).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":159308,"byte_end":159374,"line_start":693,"line_end":693,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(24, 34, 56,   789_012).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":159379,"byte_end":159445,"line_start":694,"line_end":694,"column_start":5,"column_end":71}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":159450,"byte_end":159458,"line_start":695,"line_end":695,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":159463,"byte_end":159472,"line_start":696,"line_end":696,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":160524,"byte_end":160536,"line_start":728,"line_end":728,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<NaiveDate>::and_hms_nano","value":"pub fn and_hms_nano(&Self, u32, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":159730,"byte_end":159821,"line_start":707,"line_end":707,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":159826,"byte_end":159829,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":159834,"byte_end":159882,"line_start":709,"line_end":709,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":159887,"byte_end":159977,"line_start":710,"line_end":710,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":159982,"byte_end":159985,"line_start":711,"line_end":711,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":159990,"byte_end":160051,"line_start":712,"line_end":712,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":160056,"byte_end":160059,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":160064,"byte_end":160077,"line_start":714,"line_end":714,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":160082,"byte_end":160085,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":160090,"byte_end":160098,"line_start":716,"line_end":716,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":160103,"byte_end":160175,"line_start":717,"line_end":717,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":160180,"byte_end":160183,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":160188,"byte_end":160232,"line_start":719,"line_end":719,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":160237,"byte_end":160240,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_nano(12, 34, 56, 789_012_345);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":160245,"byte_end":160313,"line_start":721,"line_end":721,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":160318,"byte_end":160350,"line_start":722,"line_end":722,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":160355,"byte_end":160398,"line_start":723,"line_end":723,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":160403,"byte_end":160435,"line_start":724,"line_end":724,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_012_345);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":160440,"byte_end":160485,"line_start":725,"line_end":725,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":160490,"byte_end":160498,"line_start":726,"line_end":726,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":160503,"byte_end":160512,"line_start":727,"line_end":727,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":723},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":161653,"byte_end":161669,"line_start":753,"line_end":753,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<NaiveDate>::and_hms_nano_opt","value":"pub fn and_hms_nano_opt(&Self, u32, u32, u32, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":160691,"byte_end":160782,"line_start":732,"line_end":732,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":160787,"byte_end":160790,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":160795,"byte_end":160843,"line_start":734,"line_end":734,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":160848,"byte_end":160938,"line_start":735,"line_end":735,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":160943,"byte_end":160946,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":160951,"byte_end":161020,"line_start":737,"line_end":737,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":161025,"byte_end":161028,"line_start":738,"line_end":738,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":161033,"byte_end":161046,"line_start":739,"line_end":739,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":161051,"byte_end":161054,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":161059,"byte_end":161067,"line_start":741,"line_end":741,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":161072,"byte_end":161098,"line_start":742,"line_end":742,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":161103,"byte_end":161106,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":161111,"byte_end":161155,"line_start":744,"line_end":744,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 56,   789_012_345).is_some());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":161160,"byte_end":161229,"line_start":745,"line_end":745,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 59, 1_789_012_345).is_some()); // leap second","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":161234,"byte_end":161318,"line_start":746,"line_end":746,"column_start":5,"column_end":89}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 59, 2_789_012_345).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":161323,"byte_end":161392,"line_start":747,"line_end":747,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 60,   789_012_345).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":161397,"byte_end":161466,"line_start":748,"line_end":748,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 60, 56,   789_012_345).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":161471,"byte_end":161540,"line_start":749,"line_end":749,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(24, 34, 56,   789_012_345).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":161545,"byte_end":161614,"line_start":750,"line_end":750,"column_start":5,"column_end":74}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":161619,"byte_end":161627,"line_start":751,"line_end":751,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":161632,"byte_end":161641,"line_start":752,"line_end":752,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":729},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":163361,"byte_end":163365,"line_start":810,"line_end":810,"column_start":12,"column_end":16},"name":"succ","qualname":"<NaiveDate>::succ","value":"pub fn succ(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the next calendar date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":162829,"byte_end":162884,"line_start":796,"line_end":796,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":162889,"byte_end":162892,"line_start":797,"line_end":797,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the last representable date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":162897,"byte_end":162951,"line_start":798,"line_end":798,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":162956,"byte_end":162959,"line_start":799,"line_end":799,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":162964,"byte_end":162977,"line_start":800,"line_end":800,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":162982,"byte_end":162985,"line_start":801,"line_end":801,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":162990,"byte_end":162998,"line_start":802,"line_end":802,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":163003,"byte_end":163029,"line_start":803,"line_end":803,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":163034,"byte_end":163037,"line_start":804,"line_end":804,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015,  6,  3).succ(), NaiveDate::from_ymd(2015, 6, 4));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":163042,"byte_end":163132,"line_start":805,"line_end":805,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015,  6, 30).succ(), NaiveDate::from_ymd(2015, 7, 1));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":163137,"byte_end":163227,"line_start":806,"line_end":806,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 12, 31).succ(), NaiveDate::from_ymd(2016, 1, 1));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":163232,"byte_end":163322,"line_start":807,"line_end":807,"column_start":5,"column_end":95}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":163327,"byte_end":163335,"line_start":808,"line_end":808,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":163340,"byte_end":163349,"line_start":809,"line_end":809,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":163907,"byte_end":163915,"line_start":829,"line_end":829,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<NaiveDate>::succ_opt","value":"pub fn succ_opt(&Self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the next calendar date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":163446,"byte_end":163501,"line_start":814,"line_end":814,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":163506,"byte_end":163509,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the last representable date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":163514,"byte_end":163576,"line_start":816,"line_end":816,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":163581,"byte_end":163584,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":163589,"byte_end":163602,"line_start":818,"line_end":818,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":163607,"byte_end":163610,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":163615,"byte_end":163623,"line_start":820,"line_end":820,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":163628,"byte_end":163654,"line_start":821,"line_end":821,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MAX_DATE;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":163659,"byte_end":163691,"line_start":822,"line_end":822,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":163696,"byte_end":163699,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).succ_opt(),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":163704,"byte_end":163762,"line_start":824,"line_end":824,"column_start":5,"column_end":63}},{"value":"/            Some(NaiveDate::from_ymd(2015, 6, 4)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":163767,"byte_end":163821,"line_start":825,"line_end":825,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(MAX_DATE.succ_opt(), None);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":163826,"byte_end":163868,"line_start":826,"line_end":826,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":163873,"byte_end":163881,"line_start":827,"line_end":827,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":163886,"byte_end":163895,"line_start":828,"line_end":828,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":732},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164592,"byte_end":164596,"line_start":847,"line_end":847,"column_start":12,"column_end":16},"name":"pred","qualname":"<NaiveDate>::pred","value":"pub fn pred(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the previous calendar date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164055,"byte_end":164114,"line_start":833,"line_end":833,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164119,"byte_end":164122,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the first representable date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164127,"byte_end":164182,"line_start":835,"line_end":835,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164187,"byte_end":164190,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164195,"byte_end":164208,"line_start":837,"line_end":837,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164213,"byte_end":164216,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164221,"byte_end":164229,"line_start":839,"line_end":839,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164234,"byte_end":164260,"line_start":840,"line_end":840,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164265,"byte_end":164268,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).pred(), NaiveDate::from_ymd(2015,  6,  2));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164273,"byte_end":164363,"line_start":842,"line_end":842,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 1).pred(), NaiveDate::from_ymd(2015,  5, 31));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164368,"byte_end":164458,"line_start":843,"line_end":843,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 1, 1).pred(), NaiveDate::from_ymd(2014, 12, 31));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164463,"byte_end":164553,"line_start":844,"line_end":844,"column_start":5,"column_end":95}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164558,"byte_end":164566,"line_start":845,"line_end":845,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164571,"byte_end":164580,"line_start":846,"line_end":846,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":733},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":165143,"byte_end":165151,"line_start":866,"line_end":866,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<NaiveDate>::pred_opt","value":"pub fn pred_opt(&Self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the previous calendar date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164677,"byte_end":164736,"line_start":851,"line_end":851,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164741,"byte_end":164744,"line_start":852,"line_end":852,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the first representable date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164749,"byte_end":164812,"line_start":853,"line_end":853,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164817,"byte_end":164820,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164825,"byte_end":164838,"line_start":855,"line_end":855,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164843,"byte_end":164846,"line_start":856,"line_end":856,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164851,"byte_end":164859,"line_start":857,"line_end":857,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164864,"byte_end":164890,"line_start":858,"line_end":858,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MIN_DATE;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164895,"byte_end":164927,"line_start":859,"line_end":859,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164932,"byte_end":164935,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).pred_opt(),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164940,"byte_end":164998,"line_start":861,"line_end":861,"column_start":5,"column_end":63}},{"value":"/            Some(NaiveDate::from_ymd(2015, 6, 2)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":165003,"byte_end":165057,"line_start":862,"line_end":862,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(MIN_DATE.pred_opt(), None);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":165062,"byte_end":165104,"line_start":863,"line_end":863,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":165109,"byte_end":165117,"line_start":864,"line_end":864,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":165122,"byte_end":165131,"line_start":865,"line_end":865,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":735},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":166163,"byte_end":166181,"line_start":891,"line_end":891,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<NaiveDate>::checked_add_signed","value":"pub fn checked_add_signed(Self, OldDuration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Adds the `days` part of given `Duration` to the current date.","sig":null,"attributes":[{"value":"/ Adds the `days` part of given `Duration` to the current date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":165293,"byte_end":165358,"line_start":870,"line_end":870,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":165363,"byte_end":165366,"line_start":871,"line_end":871,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":165371,"byte_end":165422,"line_start":872,"line_end":872,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":165427,"byte_end":165430,"line_start":873,"line_end":873,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":165435,"byte_end":165448,"line_start":874,"line_end":874,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":165453,"byte_end":165456,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":165461,"byte_end":165469,"line_start":876,"line_end":876,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":165474,"byte_end":165512,"line_start":877,"line_end":877,"column_start":5,"column_end":43}},{"value":"/ use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":165517,"byte_end":165555,"line_start":878,"line_end":878,"column_start":5,"column_end":43}},{"value":"/ use chrono::naive::MAX_DATE;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":165560,"byte_end":165592,"line_start":879,"line_end":879,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":165597,"byte_end":165600,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":165605,"byte_end":165649,"line_start":881,"line_end":881,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(40)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":165654,"byte_end":165710,"line_start":882,"line_end":882,"column_start":5,"column_end":61}},{"value":"/            Some(NaiveDate::from_ymd(2015, 10, 15)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":165715,"byte_end":165771,"line_start":883,"line_end":883,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(-40)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":165776,"byte_end":165833,"line_start":884,"line_end":884,"column_start":5,"column_end":62}},{"value":"/            Some(NaiveDate::from_ymd(2015, 7, 27)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":165838,"byte_end":165893,"line_start":885,"line_end":885,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":165898,"byte_end":165972,"line_start":886,"line_end":886,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(-1_000_000_000)), None);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":165977,"byte_end":166052,"line_start":887,"line_end":887,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(MAX_DATE.checked_add_signed(Duration::days(1)), None);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":166057,"byte_end":166126,"line_start":888,"line_end":888,"column_start":5,"column_end":74}},{"value":"/ # }","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":166131,"byte_end":166138,"line_start":889,"line_end":889,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":166143,"byte_end":166151,"line_start":890,"line_end":890,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":167752,"byte_end":167770,"line_start":925,"line_end":925,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<NaiveDate>::checked_sub_signed","value":"pub fn checked_sub_signed(Self, OldDuration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts the `days` part of given `Duration` from the current date.","sig":null,"attributes":[{"value":"/ Subtracts the `days` part of given `Duration` from the current date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":166875,"byte_end":166947,"line_start":904,"line_end":904,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":166952,"byte_end":166955,"line_start":905,"line_end":905,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":166960,"byte_end":167011,"line_start":906,"line_end":906,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":167016,"byte_end":167019,"line_start":907,"line_end":907,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":167024,"byte_end":167037,"line_start":908,"line_end":908,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":167042,"byte_end":167045,"line_start":909,"line_end":909,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":167050,"byte_end":167058,"line_start":910,"line_end":910,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":167063,"byte_end":167101,"line_start":911,"line_end":911,"column_start":5,"column_end":43}},{"value":"/ use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":167106,"byte_end":167144,"line_start":912,"line_end":912,"column_start":5,"column_end":43}},{"value":"/ use chrono::naive::MIN_DATE;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":167149,"byte_end":167181,"line_start":913,"line_end":913,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":167186,"byte_end":167189,"line_start":914,"line_end":914,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":167194,"byte_end":167238,"line_start":915,"line_end":915,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(40)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":167243,"byte_end":167299,"line_start":916,"line_end":916,"column_start":5,"column_end":61}},{"value":"/            Some(NaiveDate::from_ymd(2015, 7, 27)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":167304,"byte_end":167359,"line_start":917,"line_end":917,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(-40)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":167364,"byte_end":167421,"line_start":918,"line_end":918,"column_start":5,"column_end":62}},{"value":"/            Some(NaiveDate::from_ymd(2015, 10, 15)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":167426,"byte_end":167482,"line_start":919,"line_end":919,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":167487,"byte_end":167561,"line_start":920,"line_end":920,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(-1_000_000_000)), None);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":167566,"byte_end":167641,"line_start":921,"line_end":921,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(MIN_DATE.checked_sub_signed(Duration::days(1)), None);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":167646,"byte_end":167715,"line_start":922,"line_end":922,"column_start":5,"column_end":74}},{"value":"/ # }","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":167720,"byte_end":167727,"line_start":923,"line_end":923,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":167732,"byte_end":167740,"line_start":924,"line_end":924,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":169634,"byte_end":169655,"line_start":962,"line_end":962,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveDate>::signed_duration_since","value":"pub fn signed_duration_since(Self, NaiveDate) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveDate` from the current date.\n Returns a `Duration` of integral numbers.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveDate` from the current date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":168464,"byte_end":168520,"line_start":938,"line_end":938,"column_start":5,"column_end":61}},{"value":"/ Returns a `Duration` of integral numbers.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":168525,"byte_end":168570,"line_start":939,"line_end":939,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":168575,"byte_end":168578,"line_start":940,"line_end":940,"column_start":5,"column_end":8}},{"value":"/ This does not overflow or underflow at all,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":168583,"byte_end":168630,"line_start":941,"line_end":941,"column_start":5,"column_end":52}},{"value":"/ as all possible output fits in the range of `Duration`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":168635,"byte_end":168694,"line_start":942,"line_end":942,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":168699,"byte_end":168702,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":168707,"byte_end":168720,"line_start":944,"line_end":944,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":168725,"byte_end":168728,"line_start":945,"line_end":945,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":168733,"byte_end":168741,"line_start":946,"line_end":946,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":168746,"byte_end":168784,"line_start":947,"line_end":947,"column_start":5,"column_end":43}},{"value":"/ use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":168789,"byte_end":168827,"line_start":948,"line_end":948,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":168832,"byte_end":168835,"line_start":949,"line_end":949,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":168840,"byte_end":168879,"line_start":950,"line_end":950,"column_start":5,"column_end":44}},{"value":"/ let since = NaiveDate::signed_duration_since;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":168884,"byte_end":168933,"line_start":951,"line_end":951,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":168938,"byte_end":168941,"line_start":952,"line_end":952,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2014, 1, 1)), Duration::zero());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":168946,"byte_end":169030,"line_start":953,"line_end":953,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 12, 31)), Duration::days(1));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":169035,"byte_end":169122,"line_start":954,"line_end":954,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2014, 1, 2)), Duration::days(-1));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":169127,"byte_end":169213,"line_start":955,"line_end":955,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 9, 23)), Duration::days(100));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":169218,"byte_end":169306,"line_start":956,"line_end":956,"column_start":5,"column_end":93}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 1, 1)), Duration::days(365));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":169311,"byte_end":169398,"line_start":957,"line_end":957,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2010, 1, 1)), Duration::days(365*4 + 1));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":169403,"byte_end":169496,"line_start":958,"line_end":958,"column_start":5,"column_end":98}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(1614, 1, 1)), Duration::days(365*400 + 97));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":169501,"byte_end":169597,"line_start":959,"line_end":959,"column_start":5,"column_end":101}},{"value":"/ # }","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":169602,"byte_end":169609,"line_start":960,"line_end":960,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":169614,"byte_end":169622,"line_start":961,"line_end":961,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":171415,"byte_end":171432,"line_start":1003,"line_end":1003,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveDate>::format_with_items","value":"pub fn format_with_items<'a, I, B>(&Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified formatting items.\n Otherwise it is the same as the ordinary `format` method.","sig":null,"attributes":[{"value":"/ Formats the date with the specified formatting items.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":170246,"byte_end":170303,"line_start":974,"line_end":974,"column_start":5,"column_end":62}},{"value":"/ Otherwise it is the same as the ordinary `format` method.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":170308,"byte_end":170369,"line_start":975,"line_end":975,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":170374,"byte_end":170377,"line_start":976,"line_end":976,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":170382,"byte_end":170432,"line_start":977,"line_end":977,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":170437,"byte_end":170515,"line_start":978,"line_end":978,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":170520,"byte_end":170523,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":170528,"byte_end":170541,"line_start":980,"line_end":980,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":170546,"byte_end":170549,"line_start":981,"line_end":981,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":170554,"byte_end":170562,"line_start":982,"line_end":982,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":170567,"byte_end":170593,"line_start":983,"line_end":983,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":170598,"byte_end":170646,"line_start":984,"line_end":984,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":170651,"byte_end":170654,"line_start":985,"line_end":985,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%Y-%m-%d\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":170659,"byte_end":170704,"line_start":986,"line_end":986,"column_start":5,"column_end":50}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":170709,"byte_end":170753,"line_start":987,"line_end":987,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.format_with_items(fmt.clone()).to_string(), \"2015-09-05\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":170758,"byte_end":170833,"line_start":988,"line_end":988,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(d.format(\"%Y-%m-%d\").to_string(),             \"2015-09-05\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":170838,"byte_end":170913,"line_start":989,"line_end":989,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":170918,"byte_end":170926,"line_start":990,"line_end":990,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":170931,"byte_end":170934,"line_start":991,"line_end":991,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":170939,"byte_end":171023,"line_start":992,"line_end":992,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":171028,"byte_end":171031,"line_start":993,"line_end":993,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":171036,"byte_end":171044,"line_start":994,"line_end":994,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":171049,"byte_end":171077,"line_start":995,"line_end":995,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":171082,"byte_end":171132,"line_start":996,"line_end":996,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%Y-%m-%d\").clone();","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":171137,"byte_end":171192,"line_start":997,"line_end":997,"column_start":5,"column_end":60}},{"value":"/ # let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":171197,"byte_end":171243,"line_start":998,"line_end":998,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(format!(\"{}\", d.format_with_items(fmt)), \"2015-09-05\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":171248,"byte_end":171318,"line_start":999,"line_end":999,"column_start":5,"column_end":75}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":171323,"byte_end":171331,"line_start":1000,"line_end":1000,"column_start":5,"column_end":13}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":171336,"byte_end":171389,"line_start":1001,"line_end":1001,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":171394,"byte_end":171403,"line_start":1002,"line_end":1002,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":742},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":173120,"byte_end":173126,"line_start":1045,"line_end":1045,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveDate>::format","value":"pub fn format<'a>(&Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the date with the specified format string.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":171628,"byte_end":171682,"line_start":1011,"line_end":1011,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":171687,"byte_end":171757,"line_start":1012,"line_end":1012,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":171762,"byte_end":171800,"line_start":1013,"line_end":1013,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":171805,"byte_end":171808,"line_start":1014,"line_end":1014,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":171813,"byte_end":171848,"line_start":1015,"line_end":1015,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":171853,"byte_end":171926,"line_start":1016,"line_end":1016,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":171931,"byte_end":171988,"line_start":1017,"line_end":1017,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":171993,"byte_end":172055,"line_start":1018,"line_end":1018,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":172060,"byte_end":172120,"line_start":1019,"line_end":1019,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":172125,"byte_end":172128,"line_start":1020,"line_end":1020,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":172133,"byte_end":172197,"line_start":1021,"line_end":1021,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":172202,"byte_end":172265,"line_start":1022,"line_end":1022,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":172270,"byte_end":172345,"line_start":1023,"line_end":1023,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":172350,"byte_end":172353,"line_start":1024,"line_end":1024,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":172358,"byte_end":172371,"line_start":1025,"line_end":1025,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":172376,"byte_end":172379,"line_start":1026,"line_end":1026,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":172384,"byte_end":172392,"line_start":1027,"line_end":1027,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":172397,"byte_end":172423,"line_start":1028,"line_end":1028,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":172428,"byte_end":172431,"line_start":1029,"line_end":1029,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":172436,"byte_end":172480,"line_start":1030,"line_end":1030,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.format(\"%Y-%m-%d\").to_string(), \"2015-09-05\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":172485,"byte_end":172548,"line_start":1031,"line_end":1031,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(d.format(\"%A, %-d %B, %C%y\").to_string(), \"Saturday, 5 September, 2015\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":172553,"byte_end":172641,"line_start":1032,"line_end":1032,"column_start":5,"column_end":93}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":172646,"byte_end":172654,"line_start":1033,"line_end":1033,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":172659,"byte_end":172662,"line_start":1034,"line_end":1034,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":172667,"byte_end":172751,"line_start":1035,"line_end":1035,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":172756,"byte_end":172759,"line_start":1036,"line_end":1036,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":172764,"byte_end":172772,"line_start":1037,"line_end":1037,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":172777,"byte_end":172805,"line_start":1038,"line_end":1038,"column_start":5,"column_end":33}},{"value":"/ # let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":172810,"byte_end":172856,"line_start":1039,"line_end":1039,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(format!(\"{}\", d.format(\"%Y-%m-%d\")), \"2015-09-05\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":172861,"byte_end":172927,"line_start":1040,"line_end":1040,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", d.format(\"%A, %-d %B, %C%y\")), \"Saturday, 5 September, 2015\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":172932,"byte_end":173023,"line_start":1041,"line_end":1041,"column_start":5,"column_end":96}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":173028,"byte_end":173036,"line_start":1042,"line_end":1042,"column_start":5,"column_end":13}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":173041,"byte_end":173094,"line_start":1043,"line_end":1043,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":173099,"byte_end":173108,"line_start":1044,"line_end":1044,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":744},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":173908,"byte_end":173917,"line_start":1071,"line_end":1071,"column_start":12,"column_end":21},"name":"iter_days","qualname":"<NaiveDate>::iter_days","value":"pub fn iter_days(&Self) -> NaiveDateDaysIterator","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that steps by days until the last representable date.","sig":null,"attributes":[{"value":"/ Returns an iterator that steps by days until the last representable date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":173257,"byte_end":173334,"line_start":1049,"line_end":1049,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":173339,"byte_end":173342,"line_start":1050,"line_end":1050,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":173347,"byte_end":173360,"line_start":1051,"line_end":1051,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":173365,"byte_end":173368,"line_start":1052,"line_end":1052,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":173373,"byte_end":173380,"line_start":1053,"line_end":1053,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":173385,"byte_end":173413,"line_start":1054,"line_end":1054,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":173418,"byte_end":173421,"line_start":1055,"line_end":1055,"column_start":5,"column_end":8}},{"value":"/ let expected = [","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":173426,"byte_end":173446,"line_start":1056,"line_end":1056,"column_start":5,"column_end":25}},{"value":"/     NaiveDate::from_ymd(2016, 2, 27),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":173451,"byte_end":173492,"line_start":1057,"line_end":1057,"column_start":5,"column_end":46}},{"value":"/     NaiveDate::from_ymd(2016, 2, 28),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":173497,"byte_end":173538,"line_start":1058,"line_end":1058,"column_start":5,"column_end":46}},{"value":"/     NaiveDate::from_ymd(2016, 2, 29),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":173543,"byte_end":173584,"line_start":1059,"line_end":1059,"column_start":5,"column_end":46}},{"value":"/     NaiveDate::from_ymd(2016, 3, 1),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":173589,"byte_end":173629,"line_start":1060,"line_end":1060,"column_start":5,"column_end":45}},{"value":"/ ];","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":173634,"byte_end":173640,"line_start":1061,"line_end":1061,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":173645,"byte_end":173648,"line_start":1062,"line_end":1062,"column_start":5,"column_end":8}},{"value":"/ let mut count = 0;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":173653,"byte_end":173675,"line_start":1063,"line_end":1063,"column_start":5,"column_end":27}},{"value":"/ for (idx, d) in NaiveDate::from_ymd(2016, 2, 27).iter_days().take(4).enumerate() {","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":173680,"byte_end":173766,"line_start":1064,"line_end":1064,"column_start":5,"column_end":91}},{"value":"/    assert_eq!(d, expected[idx]);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":173771,"byte_end":173807,"line_start":1065,"line_end":1065,"column_start":5,"column_end":41}},{"value":"/    count += 1;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":173812,"byte_end":173830,"line_start":1066,"line_end":1066,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":173835,"byte_end":173840,"line_start":1067,"line_end":1067,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(count, 4);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":173845,"byte_end":173870,"line_start":1068,"line_end":1068,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":173875,"byte_end":173882,"line_start":1069,"line_end":1069,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":173887,"byte_end":173896,"line_start":1070,"line_end":1070,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":745},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":174663,"byte_end":174673,"line_start":1097,"line_end":1097,"column_start":12,"column_end":22},"name":"iter_weeks","qualname":"<NaiveDate>::iter_weeks","value":"pub fn iter_weeks(&Self) -> NaiveDateWeeksIterator","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that steps by weeks until the last representable date.","sig":null,"attributes":[{"value":"/ Returns an iterator that steps by weeks until the last representable date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":174010,"byte_end":174088,"line_start":1075,"line_end":1075,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":174093,"byte_end":174096,"line_start":1076,"line_end":1076,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":174101,"byte_end":174114,"line_start":1077,"line_end":1077,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":174119,"byte_end":174122,"line_start":1078,"line_end":1078,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":174127,"byte_end":174134,"line_start":1079,"line_end":1079,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":174139,"byte_end":174167,"line_start":1080,"line_end":1080,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":174172,"byte_end":174175,"line_start":1081,"line_end":1081,"column_start":5,"column_end":8}},{"value":"/ let expected = [","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":174180,"byte_end":174200,"line_start":1082,"line_end":1082,"column_start":5,"column_end":25}},{"value":"/     NaiveDate::from_ymd(2016, 2, 27),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":174205,"byte_end":174246,"line_start":1083,"line_end":1083,"column_start":5,"column_end":46}},{"value":"/     NaiveDate::from_ymd(2016, 3, 5),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":174251,"byte_end":174291,"line_start":1084,"line_end":1084,"column_start":5,"column_end":45}},{"value":"/     NaiveDate::from_ymd(2016, 3, 12),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":174296,"byte_end":174337,"line_start":1085,"line_end":1085,"column_start":5,"column_end":46}},{"value":"/     NaiveDate::from_ymd(2016, 3, 19),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":174342,"byte_end":174383,"line_start":1086,"line_end":1086,"column_start":5,"column_end":46}},{"value":"/ ];","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":174388,"byte_end":174394,"line_start":1087,"line_end":1087,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":174399,"byte_end":174402,"line_start":1088,"line_end":1088,"column_start":5,"column_end":8}},{"value":"/ let mut count = 0;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":174407,"byte_end":174429,"line_start":1089,"line_end":1089,"column_start":5,"column_end":27}},{"value":"/ for (idx, d) in NaiveDate::from_ymd(2016, 2, 27).iter_weeks().take(4).enumerate() {","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":174434,"byte_end":174521,"line_start":1090,"line_end":1090,"column_start":5,"column_end":92}},{"value":"/    assert_eq!(d, expected[idx]);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":174526,"byte_end":174562,"line_start":1091,"line_end":1091,"column_start":5,"column_end":41}},{"value":"/    count += 1;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":174567,"byte_end":174585,"line_start":1092,"line_end":1092,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":174590,"byte_end":174595,"line_start":1093,"line_end":1093,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(count, 4);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":174600,"byte_end":174625,"line_start":1094,"line_end":1094,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":174630,"byte_end":174637,"line_start":1095,"line_end":1095,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":174642,"byte_end":174651,"line_start":1096,"line_end":1096,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2414},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":190472,"byte_end":190493,"line_start":1562,"line_end":1562,"column_start":12,"column_end":33},"name":"NaiveDateDaysIterator","qualname":"::naive::date::NaiveDateDaysIterator","value":"NaiveDateDaysIterator {  }","parent":null,"children":[{"krate":0,"index":2415}],"decl_id":null,"docs":" Iterator over `NaiveDate` with a step size of one day.\n","sig":null,"attributes":[{"value":"/ Iterator over `NaiveDate` with a step size of one day.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":190334,"byte_end":190392,"line_start":1560,"line_end":1560,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":2435},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":191242,"byte_end":191264,"line_start":1589,"line_end":1589,"column_start":12,"column_end":34},"name":"NaiveDateWeeksIterator","qualname":"::naive::date::NaiveDateWeeksIterator","value":"NaiveDateWeeksIterator {  }","parent":null,"children":[{"krate":0,"index":2436}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":897},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":224972,"byte_end":224984,"line_start":32,"line_end":32,"column_start":11,"column_end":23},"name":"MIN_DATETIME","qualname":"::naive::datetime::MIN_DATETIME","value":"NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `NaiveDateTime`.\n","sig":null,"attributes":[{"value":"/ The minimum possible `NaiveDateTime`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":224920,"byte_end":224961,"line_start":31,"line_end":31,"column_start":1,"column_end":42}}]},{"kind":"Const","id":{"krate":0,"index":898},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225104,"byte_end":225116,"line_start":34,"line_end":34,"column_start":11,"column_end":23},"name":"MAX_DATETIME","qualname":"::naive::datetime::MAX_DATETIME","value":"NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `NaiveDateTime`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `NaiveDateTime`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225052,"byte_end":225093,"line_start":33,"line_end":33,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":2456},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":226049,"byte_end":226062,"line_start":62,"line_end":62,"column_start":12,"column_end":25},"name":"NaiveDateTime","qualname":"::naive::datetime::NaiveDateTime","value":"NaiveDateTime {  }","parent":null,"children":[{"krate":0,"index":2457},{"krate":0,"index":2458}],"decl_id":null,"docs":" ISO 8601 combined date and time without timezone.","sig":null,"attributes":[{"value":"/ ISO 8601 combined date and time without timezone.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225185,"byte_end":225238,"line_start":36,"line_end":36,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225239,"byte_end":225242,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225243,"byte_end":225256,"line_start":38,"line_end":38,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225257,"byte_end":225260,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ `NaiveDateTime` is commonly created from [`NaiveDate`](./struct.NaiveDate.html).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225261,"byte_end":225345,"line_start":40,"line_end":40,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225346,"byte_end":225349,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225350,"byte_end":225358,"line_start":42,"line_end":42,"column_start":1,"column_end":9}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225359,"byte_end":225402,"line_start":43,"line_end":43,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225403,"byte_end":225406,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225407,"byte_end":225486,"line_start":45,"line_end":45,"column_start":1,"column_end":80}},{"value":"/ # let _ = dt;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225487,"byte_end":225504,"line_start":46,"line_end":46,"column_start":1,"column_end":18}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225505,"byte_end":225513,"line_start":47,"line_end":47,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225514,"byte_end":225517,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ You can use typical [date-like](../trait.Datelike.html) and","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225518,"byte_end":225581,"line_start":49,"line_end":49,"column_start":1,"column_end":64}},{"value":"/ [time-like](../trait.Timelike.html) methods,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225582,"byte_end":225630,"line_start":50,"line_end":50,"column_start":1,"column_end":49}},{"value":"/ provided that relevant traits are in the scope.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225631,"byte_end":225682,"line_start":51,"line_end":51,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225683,"byte_end":225686,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225687,"byte_end":225695,"line_start":53,"line_end":53,"column_start":1,"column_end":9}},{"value":"/ # use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225696,"byte_end":225741,"line_start":54,"line_end":54,"column_start":1,"column_end":46}},{"value":"/ # let dt: NaiveDateTime = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225742,"byte_end":225823,"line_start":55,"line_end":55,"column_start":1,"column_end":82}},{"value":"/ use chrono::{Datelike, Timelike, Weekday};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225824,"byte_end":225870,"line_start":56,"line_end":56,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225871,"byte_end":225874,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Fri);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225875,"byte_end":225918,"line_start":58,"line_end":58,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(dt.num_seconds_from_midnight(), 33011);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225919,"byte_end":225973,"line_start":59,"line_end":59,"column_start":1,"column_end":55}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225974,"byte_end":225982,"line_start":60,"line_end":60,"column_start":1,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":226724,"byte_end":226727,"line_start":85,"line_end":85,"column_start":12,"column_end":15},"name":"new","qualname":"<NaiveDateTime>::new","value":"pub fn new(NaiveDate, NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from date and time components.\n Equivalent to [`date.and_time(time)`](./struct.NaiveDate.html#method.and_time)\n and many other helper constructors on `NaiveDate`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from date and time components.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":226135,"byte_end":226197,"line_start":68,"line_end":68,"column_start":5,"column_end":67}},{"value":"/ Equivalent to [`date.and_time(time)`](./struct.NaiveDate.html#method.and_time)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":226202,"byte_end":226284,"line_start":69,"line_end":69,"column_start":5,"column_end":87}},{"value":"/ and many other helper constructors on `NaiveDate`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":226289,"byte_end":226343,"line_start":70,"line_end":70,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":226348,"byte_end":226351,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":226356,"byte_end":226369,"line_start":72,"line_end":72,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":226374,"byte_end":226377,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":226382,"byte_end":226390,"line_start":74,"line_end":74,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime, NaiveDateTime};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":226395,"byte_end":226449,"line_start":75,"line_end":75,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":226454,"byte_end":226457,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":226462,"byte_end":226506,"line_start":77,"line_end":77,"column_start":5,"column_end":49}},{"value":"/ let t = NaiveTime::from_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":226511,"byte_end":226566,"line_start":78,"line_end":78,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":226571,"byte_end":226574,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::new(d, t);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":226579,"byte_end":226617,"line_start":80,"line_end":80,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(dt.date(), d);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":226622,"byte_end":226651,"line_start":81,"line_end":81,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(dt.time(), t);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":226656,"byte_end":226685,"line_start":82,"line_end":82,"column_start":5,"column_end":34}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":226690,"byte_end":226698,"line_start":83,"line_end":83,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":226703,"byte_end":226712,"line_start":84,"line_end":84,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":901},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":228010,"byte_end":228024,"line_start":115,"line_end":115,"column_start":12,"column_end":26},"name":"from_timestamp","qualname":"<NaiveDateTime>::from_timestamp","value":"pub fn from_timestamp(i64, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` corresponding to a UTC date and time,\n from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` corresponding to a UTC date and time,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":226841,"byte_end":226910,"line_start":89,"line_end":89,"column_start":5,"column_end":74}},{"value":"/ from the number of non-leap seconds","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":226915,"byte_end":226954,"line_start":90,"line_end":90,"column_start":5,"column_end":44}},{"value":"/ since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":226959,"byte_end":227027,"line_start":91,"line_end":91,"column_start":5,"column_end":73}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":227032,"byte_end":227103,"line_start":92,"line_end":92,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":227108,"byte_end":227111,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ For a non-naive version of this function see","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":227116,"byte_end":227164,"line_start":94,"line_end":94,"column_start":5,"column_end":53}},{"value":"/ [`TimeZone::timestamp`](../offset/trait.TimeZone.html#method.timestamp).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":227169,"byte_end":227245,"line_start":95,"line_end":95,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":227250,"byte_end":227253,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":227258,"byte_end":227332,"line_start":97,"line_end":97,"column_start":5,"column_end":79}},{"value":"/ [leap second](./struct.NaiveTime.html#leap-second-handling). (The true \"UNIX","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":227337,"byte_end":227417,"line_start":98,"line_end":98,"column_start":5,"column_end":85}},{"value":"/ timestamp\" cannot represent a leap second unambiguously.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":227422,"byte_end":227483,"line_start":99,"line_end":99,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":227488,"byte_end":227491,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range number of seconds and/or invalid nanosecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":227496,"byte_end":227571,"line_start":101,"line_end":101,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":227576,"byte_end":227579,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":227584,"byte_end":227597,"line_start":103,"line_end":103,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":227602,"byte_end":227605,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":227610,"byte_end":227618,"line_start":105,"line_end":105,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":227623,"byte_end":227666,"line_start":106,"line_end":106,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":227671,"byte_end":227674,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::from_timestamp(0, 42_000_000);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":227679,"byte_end":227737,"line_start":108,"line_end":108,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(dt, NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 0, 42));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":227742,"byte_end":227821,"line_start":109,"line_end":109,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":227826,"byte_end":227829,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::from_timestamp(1_000_000_000, 0);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":227834,"byte_end":227895,"line_start":111,"line_end":111,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt, NaiveDate::from_ymd(2001, 9, 9).and_hms(1, 46, 40));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":227900,"byte_end":227971,"line_start":112,"line_end":112,"column_start":5,"column_end":76}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":227976,"byte_end":227984,"line_start":113,"line_end":113,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":227989,"byte_end":227998,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":229366,"byte_end":229384,"line_start":146,"line_end":146,"column_start":12,"column_end":30},"name":"from_timestamp_opt","qualname":"<NaiveDateTime>::from_timestamp_opt","value":"pub fn from_timestamp_opt(i64, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` corresponding to a UTC date and time,\n from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` corresponding to a UTC date and time,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":228209,"byte_end":228278,"line_start":120,"line_end":120,"column_start":5,"column_end":74}},{"value":"/ from the number of non-leap seconds","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":228283,"byte_end":228322,"line_start":121,"line_end":121,"column_start":5,"column_end":44}},{"value":"/ since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":228327,"byte_end":228395,"line_start":122,"line_end":122,"column_start":5,"column_end":73}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":228400,"byte_end":228471,"line_start":123,"line_end":123,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":228476,"byte_end":228479,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":228484,"byte_end":228532,"line_start":125,"line_end":125,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":228537,"byte_end":228627,"line_start":126,"line_end":126,"column_start":5,"column_end":95}},{"value":"/ (The true \"UNIX timestamp\" cannot represent a leap second unambiguously.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":228632,"byte_end":228709,"line_start":127,"line_end":127,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":228714,"byte_end":228717,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range number of seconds and/or invalid nanosecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":228722,"byte_end":228805,"line_start":129,"line_end":129,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":228810,"byte_end":228813,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":228818,"byte_end":228831,"line_start":131,"line_end":131,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":228836,"byte_end":228839,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":228844,"byte_end":228852,"line_start":133,"line_end":133,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":228857,"byte_end":228900,"line_start":134,"line_end":134,"column_start":5,"column_end":48}},{"value":"/ use std::i64;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":228905,"byte_end":228922,"line_start":135,"line_end":135,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":228927,"byte_end":228930,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ let from_timestamp_opt = NaiveDateTime::from_timestamp_opt;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":228935,"byte_end":228998,"line_start":137,"line_end":137,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":229003,"byte_end":229006,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ assert!(from_timestamp_opt(0, 0).is_some());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":229011,"byte_end":229059,"line_start":139,"line_end":139,"column_start":5,"column_end":53}},{"value":"/ assert!(from_timestamp_opt(0, 999_999_999).is_some());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":229064,"byte_end":229122,"line_start":140,"line_end":140,"column_start":5,"column_end":63}},{"value":"/ assert!(from_timestamp_opt(0, 1_500_000_000).is_some()); // leap second","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":229127,"byte_end":229202,"line_start":141,"line_end":141,"column_start":5,"column_end":80}},{"value":"/ assert!(from_timestamp_opt(0, 2_000_000_000).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":229207,"byte_end":229267,"line_start":142,"line_end":142,"column_start":5,"column_end":65}},{"value":"/ assert!(from_timestamp_opt(i64::MAX, 0).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":229272,"byte_end":229327,"line_start":143,"line_end":143,"column_start":5,"column_end":60}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":229332,"byte_end":229340,"line_start":144,"line_end":144,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":229345,"byte_end":229354,"line_start":145,"line_end":145,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":904},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":232769,"byte_end":232783,"line_start":220,"line_end":220,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDateTime>::parse_from_str","value":"pub fn parse_from_str(&str, &str) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDateTime`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveDateTime`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":229906,"byte_end":229993,"line_start":159,"line_end":159,"column_start":5,"column_end":92}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":229998,"byte_end":230068,"line_start":160,"line_end":160,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":230073,"byte_end":230111,"line_start":161,"line_end":161,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":230116,"byte_end":230119,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":230124,"byte_end":230137,"line_start":163,"line_end":163,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":230142,"byte_end":230145,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":230150,"byte_end":230158,"line_start":165,"line_end":165,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":230163,"byte_end":230206,"line_start":166,"line_end":166,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":230211,"byte_end":230214,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":230219,"byte_end":230274,"line_start":168,"line_end":168,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":230279,"byte_end":230282,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"2015-09-05 23:56:04\", \"%Y-%m-%d %H:%M:%S\"),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":230287,"byte_end":230361,"line_start":170,"line_end":170,"column_start":5,"column_end":79}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":230366,"byte_end":230437,"line_start":171,"line_end":171,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(parse_from_str(\"5sep2015pm012345.6789\", \"%d%b%Y%p%I%M%S%.f\"),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":230442,"byte_end":230518,"line_start":172,"line_end":172,"column_start":5,"column_end":81}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5).and_hms_micro(13, 23, 45, 678_900)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":230523,"byte_end":230610,"line_start":173,"line_end":173,"column_start":5,"column_end":92}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":230615,"byte_end":230623,"line_start":174,"line_end":174,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":230628,"byte_end":230631,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ Offset is ignored for the purpose of parsing.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":230636,"byte_end":230685,"line_start":176,"line_end":176,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":230690,"byte_end":230693,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":230698,"byte_end":230706,"line_start":178,"line_end":178,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":230711,"byte_end":230756,"line_start":179,"line_end":179,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":230761,"byte_end":230818,"line_start":180,"line_end":180,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":230823,"byte_end":230904,"line_start":181,"line_end":181,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2014, 5, 17).and_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":230909,"byte_end":230982,"line_start":182,"line_end":182,"column_start":5,"column_end":78}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":230987,"byte_end":230995,"line_start":183,"line_end":183,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":231000,"byte_end":231003,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ [Leap seconds](./struct.NaiveTime.html#leap-second-handling) are correctly handled by","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":231008,"byte_end":231097,"line_start":185,"line_end":185,"column_start":5,"column_end":94}},{"value":"/ treating any time of the form `hh:mm:60` as a leap second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":231102,"byte_end":231164,"line_start":186,"line_end":186,"column_start":5,"column_end":67}},{"value":"/ (This equally applies to the formatting, so the round trip is possible.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":231169,"byte_end":231245,"line_start":187,"line_end":187,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":231250,"byte_end":231253,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":231258,"byte_end":231266,"line_start":189,"line_end":189,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":231271,"byte_end":231316,"line_start":190,"line_end":190,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":231321,"byte_end":231378,"line_start":191,"line_end":191,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"2015-07-01 08:59:60.123\", \"%Y-%m-%d %H:%M:%S%.f\"),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":231383,"byte_end":231464,"line_start":192,"line_end":192,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 7, 1).and_hms_milli(8, 59, 59, 1_123)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":231469,"byte_end":231553,"line_start":193,"line_end":193,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":231558,"byte_end":231566,"line_start":194,"line_end":194,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":231571,"byte_end":231574,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ Missing seconds are assumed to be zero,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":231579,"byte_end":231622,"line_start":196,"line_end":196,"column_start":5,"column_end":48}},{"value":"/ but out-of-bound times or insufficient fields are errors otherwise.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":231627,"byte_end":231698,"line_start":197,"line_end":197,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":231703,"byte_end":231706,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":231711,"byte_end":231719,"line_start":199,"line_end":199,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":231724,"byte_end":231769,"line_start":200,"line_end":200,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":231774,"byte_end":231831,"line_start":201,"line_end":201,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"94/9/4 7:15\", \"%y/%m/%d %H:%M\"),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":231836,"byte_end":231899,"line_start":202,"line_end":202,"column_start":5,"column_end":68}},{"value":"/            Ok(NaiveDate::from_ymd(1994, 9, 4).and_hms(7, 15, 0)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":231904,"byte_end":231974,"line_start":203,"line_end":203,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":231979,"byte_end":231982,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ assert!(parse_from_str(\"04m33s\", \"%Mm%Ss\").is_err());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":231987,"byte_end":232044,"line_start":205,"line_end":205,"column_start":5,"column_end":62}},{"value":"/ assert!(parse_from_str(\"94/9/4 12\", \"%y/%m/%d %H\").is_err());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":232049,"byte_end":232114,"line_start":206,"line_end":206,"column_start":5,"column_end":70}},{"value":"/ assert!(parse_from_str(\"94/9/4 17:60\", \"%y/%m/%d %H:%M\").is_err());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":232119,"byte_end":232190,"line_start":207,"line_end":207,"column_start":5,"column_end":76}},{"value":"/ assert!(parse_from_str(\"94/9/4 24:00:00\", \"%y/%m/%d %H:%M:%S\").is_err());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":232195,"byte_end":232272,"line_start":208,"line_end":208,"column_start":5,"column_end":82}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":232277,"byte_end":232285,"line_start":209,"line_end":209,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":232290,"byte_end":232293,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":232298,"byte_end":232380,"line_start":211,"line_end":211,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":232385,"byte_end":232388,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":232393,"byte_end":232401,"line_start":213,"line_end":213,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDateTime;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":232406,"byte_end":232438,"line_start":214,"line_end":214,"column_start":5,"column_end":37}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":232443,"byte_end":232500,"line_start":215,"line_end":215,"column_start":5,"column_end":62}},{"value":"/ let fmt = \"%Y-%m-%d %H:%M:%S = UNIX timestamp %s\";","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":232505,"byte_end":232559,"line_start":216,"line_end":216,"column_start":5,"column_end":59}},{"value":"/ assert!(parse_from_str(\"2001-09-09 01:46:39 = UNIX timestamp 999999999\", fmt).is_ok());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":232564,"byte_end":232655,"line_start":217,"line_end":217,"column_start":5,"column_end":96}},{"value":"/ assert!(parse_from_str(\"1970-01-01 00:00:00 = UNIX timestamp 1\", fmt).is_err());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":232660,"byte_end":232744,"line_start":218,"line_end":218,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":232749,"byte_end":232757,"line_start":219,"line_end":219,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":905},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233305,"byte_end":233309,"line_start":237,"line_end":237,"column_start":12,"column_end":16},"name":"date","qualname":"<NaiveDateTime>::date","value":"pub fn date(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component.","sig":null,"attributes":[{"value":"/ Retrieves a date component.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233016,"byte_end":233047,"line_start":226,"line_end":226,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233052,"byte_end":233055,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233060,"byte_end":233073,"line_start":228,"line_end":228,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233078,"byte_end":233081,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233086,"byte_end":233094,"line_start":230,"line_end":230,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233099,"byte_end":233125,"line_start":231,"line_end":231,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233130,"byte_end":233133,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233138,"byte_end":233202,"line_start":233,"line_end":233,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.date(), NaiveDate::from_ymd(2016, 7, 8));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233207,"byte_end":233266,"line_start":234,"line_end":234,"column_start":5,"column_end":64}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233271,"byte_end":233279,"line_start":235,"line_end":235,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233284,"byte_end":233293,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":906},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233662,"byte_end":233666,"line_start":252,"line_end":252,"column_start":12,"column_end":16},"name":"time","qualname":"<NaiveDateTime>::time","value":"pub fn time(&Self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.","sig":null,"attributes":[{"value":"/ Retrieves a time component.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233361,"byte_end":233392,"line_start":241,"line_end":241,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233397,"byte_end":233400,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233405,"byte_end":233418,"line_start":243,"line_end":243,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233423,"byte_end":233426,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233431,"byte_end":233439,"line_start":245,"line_end":245,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233444,"byte_end":233483,"line_start":246,"line_end":246,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233488,"byte_end":233491,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233496,"byte_end":233560,"line_start":248,"line_end":248,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.time(), NaiveTime::from_hms(9, 10, 11));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233565,"byte_end":233623,"line_start":249,"line_end":249,"column_start":5,"column_end":63}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233628,"byte_end":233636,"line_start":250,"line_end":250,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233641,"byte_end":233650,"line_start":251,"line_end":251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":907},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":234573,"byte_end":234582,"line_start":279,"line_end":279,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<NaiveDateTime>::timestamp","value":"pub fn timestamp(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since the midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds since the midnight on January 1, 1970.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233718,"byte_end":233799,"line_start":256,"line_end":256,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233804,"byte_end":233807,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233812,"byte_end":233867,"line_start":258,"line_end":258,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233872,"byte_end":233960,"line_start":259,"line_end":259,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233965,"byte_end":233968,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233973,"byte_end":233986,"line_start":261,"line_end":261,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233991,"byte_end":233994,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":233999,"byte_end":234007,"line_start":263,"line_end":263,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":234012,"byte_end":234038,"line_start":264,"line_end":264,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":234043,"byte_end":234046,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 980);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":234051,"byte_end":234124,"line_start":266,"line_end":266,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(dt.timestamp(), 1);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":234129,"byte_end":234163,"line_start":267,"line_end":267,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":234168,"byte_end":234171,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms(1, 46, 40);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":234176,"byte_end":234240,"line_start":269,"line_end":269,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.timestamp(), 1_000_000_000);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":234245,"byte_end":234291,"line_start":270,"line_end":270,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":234296,"byte_end":234299,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1969, 12, 31).and_hms(23, 59, 59);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":234304,"byte_end":234371,"line_start":272,"line_end":272,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(dt.timestamp(), -1);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":234376,"byte_end":234411,"line_start":273,"line_end":273,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":234416,"byte_end":234419,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(-1, 1, 1).and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":234424,"byte_end":234484,"line_start":275,"line_end":275,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(dt.timestamp(), -62198755200);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":234489,"byte_end":234534,"line_start":276,"line_end":276,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":234539,"byte_end":234547,"line_start":277,"line_end":277,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":234552,"byte_end":234561,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":235960,"byte_end":235976,"line_start":311,"line_end":311,"column_start":12,"column_end":28},"name":"timestamp_millis","qualname":"<NaiveDateTime>::timestamp_millis","value":"pub fn timestamp_millis(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *milliseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap *milliseconds* since midnight on January 1, 1970.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":234884,"byte_end":234968,"line_start":286,"line_end":286,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":234973,"byte_end":234976,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":234981,"byte_end":235036,"line_start":288,"line_end":288,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":235041,"byte_end":235129,"line_start":289,"line_end":289,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":235134,"byte_end":235137,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ Note also that this does reduce the number of years that can be","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":235142,"byte_end":235209,"line_start":291,"line_end":291,"column_start":5,"column_end":72}},{"value":"/ represented from ~584 Billion to ~584 Million. (If this is a problem,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":235214,"byte_end":235287,"line_start":292,"line_end":292,"column_start":5,"column_end":78}},{"value":"/ please file an issue to let me know what domain needs millisecond","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":235292,"byte_end":235361,"line_start":293,"line_end":293,"column_start":5,"column_end":74}},{"value":"/ precision over billions of years, I'm curious.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":235366,"byte_end":235417,"line_start":294,"line_end":294,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":235422,"byte_end":235425,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":235430,"byte_end":235443,"line_start":296,"line_end":296,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":235448,"byte_end":235451,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":235456,"byte_end":235464,"line_start":298,"line_end":298,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":235469,"byte_end":235495,"line_start":299,"line_end":299,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":235500,"byte_end":235503,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 444);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":235508,"byte_end":235581,"line_start":301,"line_end":301,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_444);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":235586,"byte_end":235631,"line_start":302,"line_end":302,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":235636,"byte_end":235639,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms_milli(1, 46, 40, 555);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":235644,"byte_end":235719,"line_start":304,"line_end":304,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_000_000_000_555);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":235724,"byte_end":235781,"line_start":305,"line_end":305,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":235786,"byte_end":235789,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1969, 12, 31).and_hms_milli(23, 59, 59, 100);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":235794,"byte_end":235872,"line_start":307,"line_end":307,"column_start":5,"column_end":83}},{"value":"/ assert_eq!(dt.timestamp_millis(), -900);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":235877,"byte_end":235921,"line_start":308,"line_end":308,"column_start":5,"column_end":49}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":235926,"byte_end":235934,"line_start":309,"line_end":309,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":235939,"byte_end":235948,"line_start":310,"line_end":310,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":910},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":237444,"byte_end":237459,"line_start":350,"line_end":350,"column_start":12,"column_end":27},"name":"timestamp_nanos","qualname":"<NaiveDateTime>::timestamp_nanos","value":"pub fn timestamp_nanos(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *nanoseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap *nanoseconds* since midnight on January 1, 1970.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":236107,"byte_end":236190,"line_start":316,"line_end":316,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":236195,"byte_end":236198,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":236203,"byte_end":236258,"line_start":318,"line_end":318,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":236263,"byte_end":236351,"line_start":319,"line_end":319,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":236356,"byte_end":236359,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":236364,"byte_end":236376,"line_start":321,"line_end":321,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":236381,"byte_end":236384,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ Note also that this does reduce the number of years that can be","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":236389,"byte_end":236456,"line_start":323,"line_end":323,"column_start":5,"column_end":72}},{"value":"/ represented from ~584 Billion to ~584 years. The dates that can be","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":236461,"byte_end":236531,"line_start":324,"line_end":324,"column_start":5,"column_end":75}},{"value":"/ represented as nanoseconds are between 1677-09-21T00:12:44.0 and","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":236536,"byte_end":236604,"line_start":325,"line_end":325,"column_start":5,"column_end":73}},{"value":"/ 2262-04-11T23:47:16.854775804.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":236609,"byte_end":236643,"line_start":326,"line_end":326,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":236648,"byte_end":236651,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ (If this is a problem, please file an issue to let me know what domain","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":236656,"byte_end":236730,"line_start":328,"line_end":328,"column_start":5,"column_end":79}},{"value":"/ needs nanosecond precision over millennia, I'm curious.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":236735,"byte_end":236795,"line_start":329,"line_end":329,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":236800,"byte_end":236803,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":236808,"byte_end":236821,"line_start":331,"line_end":331,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":236826,"byte_end":236829,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":236834,"byte_end":236842,"line_start":333,"line_end":333,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":236847,"byte_end":236890,"line_start":334,"line_end":334,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":236895,"byte_end":236898,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_nano(0, 0, 1, 444);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":236903,"byte_end":236975,"line_start":336,"line_end":336,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_444);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":236980,"byte_end":237032,"line_start":337,"line_end":337,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":237037,"byte_end":237040,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms_nano(1, 46, 40, 555);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":237045,"byte_end":237119,"line_start":339,"line_end":339,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":237124,"byte_end":237127,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ const A_BILLION: i64 = 1_000_000_000;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":237132,"byte_end":237173,"line_start":341,"line_end":341,"column_start":5,"column_end":46}},{"value":"/ let nanos = dt.timestamp_nanos();","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":237178,"byte_end":237215,"line_start":342,"line_end":342,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(nanos, 1_000_000_000_000_000_555);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":237220,"byte_end":237269,"line_start":343,"line_end":343,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":237274,"byte_end":237289,"line_start":344,"line_end":344,"column_start":5,"column_end":20}},{"value":"/     dt,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":237294,"byte_end":237305,"line_start":345,"line_end":345,"column_start":5,"column_end":16}},{"value":"/     NaiveDateTime::from_timestamp(nanos / A_BILLION, (nanos % A_BILLION) as u32)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":237310,"byte_end":237394,"line_start":346,"line_end":346,"column_start":5,"column_end":89}},{"value":"/ );","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":237399,"byte_end":237405,"line_start":347,"line_end":347,"column_start":5,"column_end":11}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":237410,"byte_end":237418,"line_start":348,"line_end":348,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":237423,"byte_end":237432,"line_start":349,"line_end":349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":911},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":238237,"byte_end":238260,"line_start":372,"line_end":372,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<NaiveDateTime>::timestamp_subsec_millis","value":"pub fn timestamp_subsec_millis(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of milliseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":237598,"byte_end":237674,"line_start":355,"line_end":355,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":237679,"byte_end":237682,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":237687,"byte_end":237729,"line_start":357,"line_end":357,"column_start":5,"column_end":47}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":237734,"byte_end":237816,"line_start":358,"line_end":358,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":237821,"byte_end":237824,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":237829,"byte_end":237842,"line_start":360,"line_end":360,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":237847,"byte_end":237850,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":237855,"byte_end":237863,"line_start":362,"line_end":362,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":237868,"byte_end":237894,"line_start":363,"line_end":363,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":237899,"byte_end":237902,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":237907,"byte_end":237989,"line_start":365,"line_end":365,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_millis(), 123);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":237994,"byte_end":238044,"line_start":366,"line_end":366,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":238049,"byte_end":238052,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":238057,"byte_end":238141,"line_start":368,"line_end":368,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_millis(), 1_234);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":238146,"byte_end":238198,"line_start":369,"line_end":369,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":238203,"byte_end":238211,"line_start":370,"line_end":370,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":238216,"byte_end":238225,"line_start":371,"line_end":371,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":912},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":238993,"byte_end":239016,"line_start":393,"line_end":393,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<NaiveDateTime>::timestamp_subsec_micros","value":"pub fn timestamp_subsec_micros(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of microseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":238338,"byte_end":238414,"line_start":376,"line_end":376,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":238419,"byte_end":238422,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,999,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":238427,"byte_end":238473,"line_start":378,"line_end":378,"column_start":5,"column_end":51}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999,999.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":238478,"byte_end":238564,"line_start":379,"line_end":379,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":238569,"byte_end":238572,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":238577,"byte_end":238590,"line_start":381,"line_end":381,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":238595,"byte_end":238598,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":238603,"byte_end":238611,"line_start":383,"line_end":383,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":238616,"byte_end":238642,"line_start":384,"line_end":384,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":238647,"byte_end":238650,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":238655,"byte_end":238737,"line_start":386,"line_end":386,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_micros(), 123_456);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":238742,"byte_end":238796,"line_start":387,"line_end":387,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":238801,"byte_end":238804,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":238809,"byte_end":238893,"line_start":389,"line_end":389,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_micros(), 1_234_567);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":238898,"byte_end":238954,"line_start":390,"line_end":390,"column_start":5,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":238959,"byte_end":238967,"line_start":391,"line_end":391,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":238972,"byte_end":238981,"line_start":392,"line_end":392,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":913},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":239758,"byte_end":239780,"line_start":414,"line_end":414,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<NaiveDateTime>::timestamp_subsec_nanos","value":"pub fn timestamp_subsec_nanos(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":239090,"byte_end":239165,"line_start":397,"line_end":397,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":239170,"byte_end":239173,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,999,999,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":239178,"byte_end":239228,"line_start":399,"line_end":399,"column_start":5,"column_end":55}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999,999,999.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":239233,"byte_end":239323,"line_start":400,"line_end":400,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":239328,"byte_end":239331,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":239336,"byte_end":239349,"line_start":402,"line_end":402,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":239354,"byte_end":239357,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":239362,"byte_end":239370,"line_start":404,"line_end":404,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":239375,"byte_end":239401,"line_start":405,"line_end":405,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":239406,"byte_end":239409,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":239414,"byte_end":239496,"line_start":407,"line_end":407,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_nanos(), 123_456_789);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":239501,"byte_end":239558,"line_start":408,"line_end":408,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":239563,"byte_end":239566,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":239571,"byte_end":239655,"line_start":410,"line_end":410,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_nanos(), 1_234_567_890);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":239660,"byte_end":239719,"line_start":411,"line_end":411,"column_start":5,"column_end":64}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":239724,"byte_end":239732,"line_start":412,"line_end":412,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":239737,"byte_end":239746,"line_start":413,"line_end":413,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":243050,"byte_end":243068,"line_start":489,"line_end":489,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<NaiveDateTime>::checked_add_signed","value":"pub fn checked_add_signed(Self, OldDuration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date and time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":239839,"byte_end":239894,"line_start":418,"line_end":418,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":239899,"byte_end":239902,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":239907,"byte_end":240002,"line_start":420,"line_end":420,"column_start":5,"column_end":100}},{"value":"/ the addition assumes that **there is no leap second ever**,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":240007,"byte_end":240070,"line_start":421,"line_end":421,"column_start":5,"column_end":68}},{"value":"/ except when the `NaiveDateTime` itself represents a leap second","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":240075,"byte_end":240142,"line_start":422,"line_end":422,"column_start":5,"column_end":72}},{"value":"/ in which case the assumption becomes that **there is exactly a single leap second ever**.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":240147,"byte_end":240240,"line_start":423,"line_end":423,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":240245,"byte_end":240248,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":240253,"byte_end":240304,"line_start":425,"line_end":425,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":240309,"byte_end":240312,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":240317,"byte_end":240330,"line_start":427,"line_end":427,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":240335,"byte_end":240338,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":240343,"byte_end":240351,"line_start":429,"line_end":429,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":240356,"byte_end":240394,"line_start":430,"line_end":430,"column_start":5,"column_end":43}},{"value":"/ use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":240399,"byte_end":240437,"line_start":431,"line_end":431,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":240442,"byte_end":240445,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":240450,"byte_end":240489,"line_start":433,"line_end":433,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":240494,"byte_end":240497,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":240502,"byte_end":240535,"line_start":435,"line_end":435,"column_start":5,"column_end":38}},{"value":"/ let hms = |h, m, s| d.and_hms(h, m, s);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":240540,"byte_end":240583,"line_start":436,"line_end":436,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::zero()),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":240588,"byte_end":240653,"line_start":437,"line_end":437,"column_start":5,"column_end":70}},{"value":"/            Some(hms(3, 5, 7)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":240658,"byte_end":240693,"line_start":438,"line_end":438,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(1)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":240698,"byte_end":240767,"line_start":439,"line_end":439,"column_start":5,"column_end":74}},{"value":"/            Some(hms(3, 5, 8)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":240772,"byte_end":240807,"line_start":440,"line_end":440,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(-1)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":240812,"byte_end":240882,"line_start":441,"line_end":441,"column_start":5,"column_end":75}},{"value":"/            Some(hms(3, 5, 6)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":240887,"byte_end":240922,"line_start":442,"line_end":442,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(3600 + 60)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":240927,"byte_end":241004,"line_start":443,"line_end":443,"column_start":5,"column_end":82}},{"value":"/            Some(hms(4, 6, 7)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":241009,"byte_end":241044,"line_start":444,"line_end":444,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(86_400)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":241049,"byte_end":241123,"line_start":445,"line_end":445,"column_start":5,"column_end":79}},{"value":"/            Some(from_ymd(2016, 7, 9).and_hms(3, 5, 7)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":241128,"byte_end":241188,"line_start":446,"line_end":446,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":241193,"byte_end":241196,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ let hmsm = |h, m, s, milli| d.and_hms_milli(h, m, s, milli);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":241201,"byte_end":241265,"line_start":448,"line_end":448,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(hmsm(3, 5, 7, 980).checked_add_signed(Duration::milliseconds(450)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":241270,"byte_end":241352,"line_start":449,"line_end":449,"column_start":5,"column_end":87}},{"value":"/            Some(hmsm(3, 5, 8, 430)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":241357,"byte_end":241398,"line_start":450,"line_end":450,"column_start":5,"column_end":46}},{"value":"/ # }","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":241403,"byte_end":241410,"line_start":451,"line_end":451,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":241415,"byte_end":241423,"line_start":452,"line_end":452,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":241428,"byte_end":241431,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ Overflow returns `None`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":241436,"byte_end":241464,"line_start":454,"line_end":454,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":241469,"byte_end":241472,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":241477,"byte_end":241485,"line_start":456,"line_end":456,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":241490,"byte_end":241528,"line_start":457,"line_end":457,"column_start":5,"column_end":43}},{"value":"/ # use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":241533,"byte_end":241573,"line_start":458,"line_end":458,"column_start":5,"column_end":45}},{"value":"/ # let hms = |h, m, s| NaiveDate::from_ymd(2016, 7, 8).and_hms(h, m, s);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":241578,"byte_end":241653,"line_start":459,"line_end":459,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":241658,"byte_end":241743,"line_start":460,"line_end":460,"column_start":5,"column_end":90}},{"value":"/ # }","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":241748,"byte_end":241755,"line_start":461,"line_end":461,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":241760,"byte_end":241768,"line_start":462,"line_end":462,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":241773,"byte_end":241776,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":241781,"byte_end":241810,"line_start":464,"line_end":464,"column_start":5,"column_end":34}},{"value":"/ but the addition assumes that it is the only leap second happened.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":241815,"byte_end":241885,"line_start":465,"line_end":465,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":241890,"byte_end":241893,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":241898,"byte_end":241906,"line_start":467,"line_end":467,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":241911,"byte_end":241949,"line_start":468,"line_end":468,"column_start":5,"column_end":43}},{"value":"/ # use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":241954,"byte_end":241994,"line_start":469,"line_end":469,"column_start":5,"column_end":45}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":241999,"byte_end":242040,"line_start":470,"line_end":470,"column_start":5,"column_end":46}},{"value":"/ # let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli(h, m, s, milli);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":242045,"byte_end":242130,"line_start":471,"line_end":471,"column_start":5,"column_end":90}},{"value":"/ let leap = hmsm(3, 5, 59, 1_300);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":242135,"byte_end":242172,"line_start":472,"line_end":472,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::zero()),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":242177,"byte_end":242234,"line_start":473,"line_end":473,"column_start":5,"column_end":62}},{"value":"/            Some(hmsm(3, 5, 59, 1_300)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":242239,"byte_end":242283,"line_start":474,"line_end":474,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(-500)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":242288,"byte_end":242357,"line_start":475,"line_end":475,"column_start":5,"column_end":74}},{"value":"/            Some(hmsm(3, 5, 59, 800)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":242362,"byte_end":242404,"line_start":476,"line_end":476,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(500)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":242409,"byte_end":242477,"line_start":477,"line_end":477,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 1_800)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":242482,"byte_end":242526,"line_start":478,"line_end":478,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(800)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":242531,"byte_end":242599,"line_start":479,"line_end":479,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 6, 0, 100)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":242604,"byte_end":242645,"line_start":480,"line_end":480,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::seconds(10)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":242650,"byte_end":242712,"line_start":481,"line_end":481,"column_start":5,"column_end":67}},{"value":"/            Some(hmsm(3, 6, 9, 300)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":242717,"byte_end":242758,"line_start":482,"line_end":482,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::seconds(-10)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":242763,"byte_end":242826,"line_start":483,"line_end":483,"column_start":5,"column_end":68}},{"value":"/            Some(hmsm(3, 5, 50, 300)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":242831,"byte_end":242873,"line_start":484,"line_end":484,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::days(1)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":242878,"byte_end":242936,"line_start":485,"line_end":485,"column_start":5,"column_end":63}},{"value":"/            Some(from_ymd(2016, 7, 9).and_hms_milli(3, 5, 59, 300)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":242941,"byte_end":243013,"line_start":486,"line_end":486,"column_start":5,"column_end":77}},{"value":"/ # }","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":243018,"byte_end":243025,"line_start":487,"line_end":487,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":243030,"byte_end":243038,"line_start":488,"line_end":488,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":915},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":246503,"byte_end":246521,"line_start":568,"line_end":568,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<NaiveDateTime>::checked_sub_signed","value":"pub fn checked_sub_signed(Self, OldDuration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date and time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":243515,"byte_end":243577,"line_start":501,"line_end":501,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":243582,"byte_end":243585,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":243590,"byte_end":243685,"line_start":503,"line_end":503,"column_start":5,"column_end":100}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":243690,"byte_end":243756,"line_start":504,"line_end":504,"column_start":5,"column_end":71}},{"value":"/ except when the `NaiveDateTime` itself represents a leap second","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":243761,"byte_end":243828,"line_start":505,"line_end":505,"column_start":5,"column_end":72}},{"value":"/ in which case the assumption becomes that **there is exactly a single leap second ever**.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":243833,"byte_end":243926,"line_start":506,"line_end":506,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":243931,"byte_end":243934,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":243939,"byte_end":243990,"line_start":508,"line_end":508,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":243995,"byte_end":243998,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":244003,"byte_end":244016,"line_start":510,"line_end":510,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":244021,"byte_end":244024,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":244029,"byte_end":244037,"line_start":512,"line_end":512,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":244042,"byte_end":244080,"line_start":513,"line_end":513,"column_start":5,"column_end":43}},{"value":"/ use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":244085,"byte_end":244123,"line_start":514,"line_end":514,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":244128,"byte_end":244131,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":244136,"byte_end":244175,"line_start":516,"line_end":516,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":244180,"byte_end":244183,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":244188,"byte_end":244221,"line_start":518,"line_end":518,"column_start":5,"column_end":38}},{"value":"/ let hms = |h, m, s| d.and_hms(h, m, s);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":244226,"byte_end":244269,"line_start":519,"line_end":519,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::zero()),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":244274,"byte_end":244339,"line_start":520,"line_end":520,"column_start":5,"column_end":70}},{"value":"/            Some(hms(3, 5, 7)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":244344,"byte_end":244379,"line_start":521,"line_end":521,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(1)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":244384,"byte_end":244453,"line_start":522,"line_end":522,"column_start":5,"column_end":74}},{"value":"/            Some(hms(3, 5, 6)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":244458,"byte_end":244493,"line_start":523,"line_end":523,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(-1)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":244498,"byte_end":244568,"line_start":524,"line_end":524,"column_start":5,"column_end":75}},{"value":"/            Some(hms(3, 5, 8)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":244573,"byte_end":244608,"line_start":525,"line_end":525,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(3600 + 60)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":244613,"byte_end":244690,"line_start":526,"line_end":526,"column_start":5,"column_end":82}},{"value":"/            Some(hms(2, 4, 7)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":244695,"byte_end":244730,"line_start":527,"line_end":527,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(86_400)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":244735,"byte_end":244809,"line_start":528,"line_end":528,"column_start":5,"column_end":79}},{"value":"/            Some(from_ymd(2016, 7, 7).and_hms(3, 5, 7)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":244814,"byte_end":244874,"line_start":529,"line_end":529,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":244879,"byte_end":244882,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ let hmsm = |h, m, s, milli| d.and_hms_milli(h, m, s, milli);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":244887,"byte_end":244951,"line_start":531,"line_end":531,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(hmsm(3, 5, 7, 450).checked_sub_signed(Duration::milliseconds(670)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":244956,"byte_end":245038,"line_start":532,"line_end":532,"column_start":5,"column_end":87}},{"value":"/            Some(hmsm(3, 5, 6, 780)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":245043,"byte_end":245084,"line_start":533,"line_end":533,"column_start":5,"column_end":46}},{"value":"/ # }","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":245089,"byte_end":245096,"line_start":534,"line_end":534,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":245101,"byte_end":245109,"line_start":535,"line_end":535,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":245114,"byte_end":245117,"line_start":536,"line_end":536,"column_start":5,"column_end":8}},{"value":"/ Overflow returns `None`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":245122,"byte_end":245150,"line_start":537,"line_end":537,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":245155,"byte_end":245158,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":245163,"byte_end":245171,"line_start":539,"line_end":539,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":245176,"byte_end":245214,"line_start":540,"line_end":540,"column_start":5,"column_end":43}},{"value":"/ # use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":245219,"byte_end":245259,"line_start":541,"line_end":541,"column_start":5,"column_end":45}},{"value":"/ # let hms = |h, m, s| NaiveDate::from_ymd(2016, 7, 8).and_hms(h, m, s);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":245264,"byte_end":245339,"line_start":542,"line_end":542,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":245344,"byte_end":245429,"line_start":543,"line_end":543,"column_start":5,"column_end":90}},{"value":"/ # }","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":245434,"byte_end":245441,"line_start":544,"line_end":544,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":245446,"byte_end":245454,"line_start":545,"line_end":545,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":245459,"byte_end":245462,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":245467,"byte_end":245496,"line_start":547,"line_end":547,"column_start":5,"column_end":34}},{"value":"/ but the subtraction assumes that it is the only leap second happened.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":245501,"byte_end":245574,"line_start":548,"line_end":548,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":245579,"byte_end":245582,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":245587,"byte_end":245595,"line_start":550,"line_end":550,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":245600,"byte_end":245638,"line_start":551,"line_end":551,"column_start":5,"column_end":43}},{"value":"/ # use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":245643,"byte_end":245683,"line_start":552,"line_end":552,"column_start":5,"column_end":45}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":245688,"byte_end":245729,"line_start":553,"line_end":553,"column_start":5,"column_end":46}},{"value":"/ # let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli(h, m, s, milli);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":245734,"byte_end":245819,"line_start":554,"line_end":554,"column_start":5,"column_end":90}},{"value":"/ let leap = hmsm(3, 5, 59, 1_300);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":245824,"byte_end":245861,"line_start":555,"line_end":555,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::zero()),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":245866,"byte_end":245923,"line_start":556,"line_end":556,"column_start":5,"column_end":62}},{"value":"/            Some(hmsm(3, 5, 59, 1_300)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":245928,"byte_end":245972,"line_start":557,"line_end":557,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::milliseconds(200)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":245977,"byte_end":246045,"line_start":558,"line_end":558,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 1_100)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":246050,"byte_end":246094,"line_start":559,"line_end":559,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::milliseconds(500)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":246099,"byte_end":246167,"line_start":560,"line_end":560,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 800)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":246172,"byte_end":246214,"line_start":561,"line_end":561,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::seconds(60)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":246219,"byte_end":246281,"line_start":562,"line_end":562,"column_start":5,"column_end":67}},{"value":"/            Some(hmsm(3, 5, 0, 300)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":246286,"byte_end":246327,"line_start":563,"line_end":563,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::days(1)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":246332,"byte_end":246390,"line_start":564,"line_end":564,"column_start":5,"column_end":63}},{"value":"/            Some(from_ymd(2016, 7, 7).and_hms_milli(3, 6, 0, 300)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":246395,"byte_end":246466,"line_start":565,"line_end":565,"column_start":5,"column_end":76}},{"value":"/ # }","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":246471,"byte_end":246478,"line_start":566,"line_end":566,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":246483,"byte_end":246491,"line_start":567,"line_end":567,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":916},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":248858,"byte_end":248879,"line_start":622,"line_end":622,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveDateTime>::signed_duration_since","value":"pub fn signed_duration_since(Self, NaiveDateTime) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveDateTime` from the current date and time.\n This does not overflow or underflow at all.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveDateTime` from the current date and time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":246968,"byte_end":247037,"line_start":580,"line_end":580,"column_start":5,"column_end":74}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":247042,"byte_end":247089,"line_start":581,"line_end":581,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":247094,"byte_end":247097,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":247102,"byte_end":247197,"line_start":583,"line_end":583,"column_start":5,"column_end":100}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":247202,"byte_end":247268,"line_start":584,"line_end":584,"column_start":5,"column_end":71}},{"value":"/ except when any of the `NaiveDateTime`s themselves represents a leap second","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":247273,"byte_end":247352,"line_start":585,"line_end":585,"column_start":5,"column_end":84}},{"value":"/ in which case the assumption becomes that","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":247357,"byte_end":247402,"line_start":586,"line_end":586,"column_start":5,"column_end":50}},{"value":"/ **there are exactly one (or two) leap second(s) ever**.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":247407,"byte_end":247466,"line_start":587,"line_end":587,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":247471,"byte_end":247474,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":247479,"byte_end":247492,"line_start":589,"line_end":589,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":247497,"byte_end":247500,"line_start":590,"line_end":590,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":247505,"byte_end":247513,"line_start":591,"line_end":591,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":247518,"byte_end":247556,"line_start":592,"line_end":592,"column_start":5,"column_end":43}},{"value":"/ use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":247561,"byte_end":247599,"line_start":593,"line_end":593,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":247604,"byte_end":247607,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":247612,"byte_end":247651,"line_start":595,"line_end":595,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":247656,"byte_end":247659,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":247664,"byte_end":247697,"line_start":597,"line_end":597,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(d.and_hms(3, 5, 7).signed_duration_since(d.and_hms(2, 4, 6)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":247702,"byte_end":247778,"line_start":598,"line_end":598,"column_start":5,"column_end":81}},{"value":"/            Duration::seconds(3600 + 60 + 1));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":247783,"byte_end":247832,"line_start":599,"line_end":599,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":247837,"byte_end":247840,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ // July 8 is 190th day in the year 2016","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":247845,"byte_end":247888,"line_start":601,"line_end":601,"column_start":5,"column_end":48}},{"value":"/ let d0 = from_ymd(2016, 1, 1);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":247893,"byte_end":247927,"line_start":602,"line_end":602,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(d.and_hms_milli(0, 7, 6, 500).signed_duration_since(d0.and_hms(0, 0, 0)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":247932,"byte_end":248020,"line_start":603,"line_end":603,"column_start":5,"column_end":93}},{"value":"/            Duration::seconds(189 * 86_400 + 7 * 60 + 6) + Duration::milliseconds(500));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":248025,"byte_end":248116,"line_start":604,"line_end":604,"column_start":5,"column_end":96}},{"value":"/ # }","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":248121,"byte_end":248128,"line_start":605,"line_end":605,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":248133,"byte_end":248141,"line_start":606,"line_end":606,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":248146,"byte_end":248149,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled, but the subtraction assumes that","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":248154,"byte_end":248216,"line_start":608,"line_end":608,"column_start":5,"column_end":67}},{"value":"/ there were no other leap seconds happened.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":248221,"byte_end":248267,"line_start":609,"line_end":609,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":248272,"byte_end":248275,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":248280,"byte_end":248288,"line_start":611,"line_end":611,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":248293,"byte_end":248331,"line_start":612,"line_end":612,"column_start":5,"column_end":43}},{"value":"/ # use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":248336,"byte_end":248376,"line_start":613,"line_end":613,"column_start":5,"column_end":45}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":248381,"byte_end":248422,"line_start":614,"line_end":614,"column_start":5,"column_end":46}},{"value":"/ let leap = from_ymd(2015, 6, 30).and_hms_milli(23, 59, 59, 1_500);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":248427,"byte_end":248497,"line_start":615,"line_end":615,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(leap.signed_duration_since(from_ymd(2015, 6, 30).and_hms(23, 0, 0)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":248502,"byte_end":248585,"line_start":616,"line_end":616,"column_start":5,"column_end":88}},{"value":"/            Duration::seconds(3600) + Duration::milliseconds(500));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":248590,"byte_end":248660,"line_start":617,"line_end":617,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(from_ymd(2015, 7, 1).and_hms(1, 0, 0).signed_duration_since(leap),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":248665,"byte_end":248746,"line_start":618,"line_end":618,"column_start":5,"column_end":86}},{"value":"/            Duration::seconds(3600) - Duration::milliseconds(500));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":248751,"byte_end":248821,"line_start":619,"line_end":619,"column_start":5,"column_end":75}},{"value":"/ # }","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":248826,"byte_end":248833,"line_start":620,"line_end":620,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":248838,"byte_end":248846,"line_start":621,"line_end":621,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":917},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":250321,"byte_end":250338,"line_start":655,"line_end":655,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveDateTime>::format_with_items","value":"pub fn format_with_items<'a, I, B>(&Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified formatting items.\n Otherwise it is the same as the ordinary [`format`](#method.format) method.","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified formatting items.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":249028,"byte_end":249103,"line_start":626,"line_end":626,"column_start":5,"column_end":80}},{"value":"/ Otherwise it is the same as the ordinary [`format`](#method.format) method.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":249108,"byte_end":249187,"line_start":627,"line_end":627,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":249192,"byte_end":249195,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":249200,"byte_end":249250,"line_start":629,"line_end":629,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":249255,"byte_end":249333,"line_start":630,"line_end":630,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":249338,"byte_end":249341,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":249346,"byte_end":249359,"line_start":632,"line_end":632,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":249364,"byte_end":249367,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":249372,"byte_end":249380,"line_start":634,"line_end":634,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":249385,"byte_end":249411,"line_start":635,"line_end":635,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":249416,"byte_end":249464,"line_start":636,"line_end":636,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":249469,"byte_end":249472,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%Y-%m-%d %H:%M:%S\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":249477,"byte_end":249531,"line_start":638,"line_end":638,"column_start":5,"column_end":59}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":249536,"byte_end":249600,"line_start":639,"line_end":639,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.format_with_items(fmt.clone()).to_string(), \"2015-09-05 23:56:04\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":249605,"byte_end":249690,"line_start":640,"line_end":640,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(),    \"2015-09-05 23:56:04\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":249695,"byte_end":249780,"line_start":641,"line_end":641,"column_start":5,"column_end":90}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":249785,"byte_end":249793,"line_start":642,"line_end":642,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":249798,"byte_end":249801,"line_start":643,"line_end":643,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":249806,"byte_end":249890,"line_start":644,"line_end":644,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":249895,"byte_end":249898,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":249903,"byte_end":249911,"line_start":646,"line_end":646,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":249916,"byte_end":249944,"line_start":647,"line_end":647,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":249949,"byte_end":249999,"line_start":648,"line_end":648,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%Y-%m-%d %H:%M:%S\").clone();","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":250004,"byte_end":250068,"line_start":649,"line_end":649,"column_start":5,"column_end":69}},{"value":"/ # let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":250073,"byte_end":250139,"line_start":650,"line_end":650,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", dt.format_with_items(fmt)), \"2015-09-05 23:56:04\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":250144,"byte_end":250224,"line_start":651,"line_end":651,"column_start":5,"column_end":85}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":250229,"byte_end":250237,"line_start":652,"line_end":652,"column_start":5,"column_end":13}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":250242,"byte_end":250295,"line_start":653,"line_end":653,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":250300,"byte_end":250309,"line_start":654,"line_end":654,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":921},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":252139,"byte_end":252145,"line_start":697,"line_end":697,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveDateTime>::format","value":"pub fn format<'a>(&Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified format string.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":250549,"byte_end":250621,"line_start":663,"line_end":663,"column_start":5,"column_end":77}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":250626,"byte_end":250696,"line_start":664,"line_end":664,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":250701,"byte_end":250739,"line_start":665,"line_end":665,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":250744,"byte_end":250747,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":250752,"byte_end":250787,"line_start":667,"line_end":667,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":250792,"byte_end":250865,"line_start":668,"line_end":668,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":250870,"byte_end":250927,"line_start":669,"line_end":669,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":250932,"byte_end":250994,"line_start":670,"line_end":670,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":250999,"byte_end":251059,"line_start":671,"line_end":671,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":251064,"byte_end":251067,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":251072,"byte_end":251136,"line_start":673,"line_end":673,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":251141,"byte_end":251204,"line_start":674,"line_end":674,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":251209,"byte_end":251284,"line_start":675,"line_end":675,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":251289,"byte_end":251292,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":251297,"byte_end":251310,"line_start":677,"line_end":677,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":251315,"byte_end":251318,"line_start":678,"line_end":678,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":251323,"byte_end":251331,"line_start":679,"line_end":679,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":251336,"byte_end":251362,"line_start":680,"line_end":680,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":251367,"byte_end":251370,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":251375,"byte_end":251439,"line_start":682,"line_end":682,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(), \"2015-09-05 23:56:04\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":251444,"byte_end":251526,"line_start":683,"line_end":683,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.format(\"around %l %p on %b %-d\").to_string(), \"around 11 PM on Sep 5\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":251531,"byte_end":251620,"line_start":684,"line_end":684,"column_start":5,"column_end":94}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":251625,"byte_end":251633,"line_start":685,"line_end":685,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":251638,"byte_end":251641,"line_start":686,"line_end":686,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":251646,"byte_end":251730,"line_start":687,"line_end":687,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":251735,"byte_end":251738,"line_start":688,"line_end":688,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":251743,"byte_end":251751,"line_start":689,"line_end":689,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":251756,"byte_end":251784,"line_start":690,"line_end":690,"column_start":5,"column_end":33}},{"value":"/ # let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":251789,"byte_end":251855,"line_start":691,"line_end":691,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", dt.format(\"%Y-%m-%d %H:%M:%S\")), \"2015-09-05 23:56:04\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":251860,"byte_end":251945,"line_start":692,"line_end":692,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(format!(\"{}\", dt.format(\"around %l %p on %b %-d\")), \"around 11 PM on Sep 5\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":251950,"byte_end":252042,"line_start":693,"line_end":693,"column_start":5,"column_end":97}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":252047,"byte_end":252055,"line_start":694,"line_end":694,"column_start":5,"column_end":13}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":252060,"byte_end":252113,"line_start":695,"line_end":695,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":252118,"byte_end":252127,"line_start":696,"line_end":696,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2510},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":350809,"byte_end":350816,"line_start":17,"line_end":17,"column_start":12,"column_end":19},"name":"IsoWeek","qualname":"::naive::isoweek::IsoWeek","value":"IsoWeek {  }","parent":null,"children":[{"krate":0,"index":2511}],"decl_id":null,"docs":" ISO 8601 week.","sig":null,"attributes":[{"value":"/ ISO 8601 week.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":350403,"byte_end":350421,"line_start":10,"line_end":10,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":350422,"byte_end":350425,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This type, combined with [`Weekday`](../enum.Weekday.html),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":350426,"byte_end":350489,"line_start":12,"line_end":12,"column_start":1,"column_end":64}},{"value":"/ constitues the ISO 8601 [week date](./struct.NaiveDate.html#week-date).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":350490,"byte_end":350565,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"/ One can retrieve this type from the existing [`Datelike`](../trait.Datelike.html) types","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":350566,"byte_end":350657,"line_start":14,"line_end":14,"column_start":1,"column_end":92}},{"value":"/ via the [`Datelike::iso_week`](../trait.Datelike.html#tymethod.iso_week) method.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":350658,"byte_end":350742,"line_start":15,"line_end":15,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1092},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":352774,"byte_end":352778,"line_start":70,"line_end":70,"column_start":12,"column_end":16},"name":"year","qualname":"<IsoWeek>::year","value":"pub fn year(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the year number for this ISO week.","sig":null,"attributes":[{"value":"/ Returns the year number for this ISO week.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":352116,"byte_end":352162,"line_start":49,"line_end":49,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":352167,"byte_end":352170,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":352175,"byte_end":352188,"line_start":51,"line_end":51,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":352193,"byte_end":352196,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":352201,"byte_end":352209,"line_start":53,"line_end":53,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":352214,"byte_end":352261,"line_start":54,"line_end":54,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":352266,"byte_end":352269,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 1, Weekday::Mon);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":352274,"byte_end":352332,"line_start":56,"line_end":56,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":352337,"byte_end":352379,"line_start":57,"line_end":57,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":352384,"byte_end":352392,"line_start":58,"line_end":58,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":352397,"byte_end":352400,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ This year number might not match the calendar year number.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":352405,"byte_end":352467,"line_start":60,"line_end":60,"column_start":5,"column_end":67}},{"value":"/ Continuing the example...","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":352472,"byte_end":352501,"line_start":61,"line_end":61,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":352506,"byte_end":352509,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":352514,"byte_end":352522,"line_start":63,"line_end":63,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":352527,"byte_end":352576,"line_start":64,"line_end":64,"column_start":5,"column_end":54}},{"value":"/ # let d = NaiveDate::from_isoywd(2015, 1, Weekday::Mon);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":352581,"byte_end":352641,"line_start":65,"line_end":65,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(d.year(), 2014);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":352646,"byte_end":352677,"line_start":66,"line_end":66,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d, NaiveDate::from_ymd(2014, 12, 29));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":352682,"byte_end":352735,"line_start":67,"line_end":67,"column_start":5,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":352740,"byte_end":352748,"line_start":68,"line_end":68,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":352753,"byte_end":352762,"line_start":69,"line_end":69,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1093},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":353228,"byte_end":353232,"line_start":87,"line_end":87,"column_start":12,"column_end":16},"name":"week","qualname":"<IsoWeek>::week","value":"pub fn week(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ISO week number starting from 1.","sig":null,"attributes":[{"value":"/ Returns the ISO week number starting from 1.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":352829,"byte_end":352877,"line_start":74,"line_end":74,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":352882,"byte_end":352885,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 53. (The last week of year differs by years.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":352890,"byte_end":352973,"line_start":76,"line_end":76,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":352978,"byte_end":352981,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":352986,"byte_end":352999,"line_start":78,"line_end":78,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":353004,"byte_end":353007,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":353012,"byte_end":353020,"line_start":80,"line_end":80,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":353025,"byte_end":353072,"line_start":81,"line_end":81,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":353077,"byte_end":353080,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 15, Weekday::Mon);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":353085,"byte_end":353144,"line_start":83,"line_end":83,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().week(), 15);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":353149,"byte_end":353189,"line_start":84,"line_end":84,"column_start":5,"column_end":45}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":353194,"byte_end":353202,"line_start":85,"line_end":85,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":353207,"byte_end":353216,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1094},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":353700,"byte_end":353705,"line_start":104,"line_end":104,"column_start":12,"column_end":17},"name":"week0","qualname":"<IsoWeek>::week0","value":"pub fn week0(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ISO week number starting from 0.","sig":null,"attributes":[{"value":"/ Returns the ISO week number starting from 0.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":353300,"byte_end":353348,"line_start":91,"line_end":91,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":353353,"byte_end":353356,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 52. (The last week of year differs by years.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":353361,"byte_end":353444,"line_start":93,"line_end":93,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":353449,"byte_end":353452,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":353457,"byte_end":353470,"line_start":95,"line_end":95,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":353475,"byte_end":353478,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":353483,"byte_end":353491,"line_start":97,"line_end":97,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":353496,"byte_end":353543,"line_start":98,"line_end":98,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":353548,"byte_end":353551,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 15, Weekday::Mon);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":353556,"byte_end":353615,"line_start":100,"line_end":100,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().week0(), 14);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":353620,"byte_end":353661,"line_start":101,"line_end":101,"column_start":5,"column_end":46}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":353666,"byte_end":353674,"line_start":102,"line_end":102,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":353679,"byte_end":353688,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2526},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":363631,"byte_end":363640,"line_start":182,"line_end":182,"column_start":12,"column_end":21},"name":"NaiveTime","qualname":"::naive::time::NaiveTime","value":"NaiveTime {  }","parent":null,"children":[{"krate":0,"index":2527},{"krate":0,"index":2528}],"decl_id":null,"docs":" ISO 8601 time without timezone.\n Allows for the nanosecond precision and optional leap second representation.","sig":null,"attributes":[{"value":"/ ISO 8601 time without timezone.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":356420,"byte_end":356455,"line_start":22,"line_end":22,"column_start":1,"column_end":36}},{"value":"/ Allows for the nanosecond precision and optional leap second representation.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":356456,"byte_end":356536,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":356537,"byte_end":356540,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Leap Second Handling","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":356541,"byte_end":356567,"line_start":25,"line_end":25,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":356568,"byte_end":356571,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Since 1960s, the manmade atomic clock has been so accurate that","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":356572,"byte_end":356639,"line_start":27,"line_end":27,"column_start":1,"column_end":68}},{"value":"/ it is much more accurate than Earth's own motion.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":356640,"byte_end":356693,"line_start":28,"line_end":28,"column_start":1,"column_end":54}},{"value":"/ It became desirable to define the civil time in terms of the atomic clock,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":356694,"byte_end":356772,"line_start":29,"line_end":29,"column_start":1,"column_end":79}},{"value":"/ but that risks the desynchronization of the civil time from Earth.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":356773,"byte_end":356843,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"/ To account for this, the designers of the Coordinated Universal Time (UTC)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":356844,"byte_end":356922,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/ made that the UTC should be kept within 0.9 seconds of the observed Earth-bound time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":356923,"byte_end":357012,"line_start":32,"line_end":32,"column_start":1,"column_end":90}},{"value":"/ When the mean solar day is longer than the ideal (86,400 seconds),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":357013,"byte_end":357083,"line_start":33,"line_end":33,"column_start":1,"column_end":71}},{"value":"/ the error slowly accumulates and it is necessary to add a **leap second**","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":357084,"byte_end":357161,"line_start":34,"line_end":34,"column_start":1,"column_end":78}},{"value":"/ to slow the UTC down a bit.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":357162,"byte_end":357193,"line_start":35,"line_end":35,"column_start":1,"column_end":32}},{"value":"/ (We may also remove a second to speed the UTC up a bit, but it never happened.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":357194,"byte_end":357277,"line_start":36,"line_end":36,"column_start":1,"column_end":84}},{"value":"/ The leap second, if any, follows 23:59:59 of June 30 or December 31 in the UTC.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":357278,"byte_end":357361,"line_start":37,"line_end":37,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":357362,"byte_end":357365,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Fast forward to the 21st century,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":357366,"byte_end":357403,"line_start":39,"line_end":39,"column_start":1,"column_end":38}},{"value":"/ we have seen 26 leap seconds from January 1972 to December 2015.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":357404,"byte_end":357472,"line_start":40,"line_end":40,"column_start":1,"column_end":69}},{"value":"/ Yes, 26 seconds. Probably you can read this paragraph within 26 seconds.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":357473,"byte_end":357549,"line_start":41,"line_end":41,"column_start":1,"column_end":77}},{"value":"/ But those 26 seconds, and possibly more in the future, are never predictable,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":357550,"byte_end":357631,"line_start":42,"line_end":42,"column_start":1,"column_end":82}},{"value":"/ and whether to add a leap second or not is known only before 6 months.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":357632,"byte_end":357706,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ Internet-based clocks (via NTP) do account for known leap seconds,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":357707,"byte_end":357777,"line_start":44,"line_end":44,"column_start":1,"column_end":71}},{"value":"/ but the system API normally doesn't (and often can't, with no network connection)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":357778,"byte_end":357863,"line_start":45,"line_end":45,"column_start":1,"column_end":86}},{"value":"/ and there is no reliable way to retrieve leap second information.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":357864,"byte_end":357933,"line_start":46,"line_end":46,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":357934,"byte_end":357937,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Chrono does not try to accurately implement leap seconds; it is impossible.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":357938,"byte_end":358017,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/ Rather, **it allows for leap seconds but behaves as if there are *no other* leap seconds.**","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358018,"byte_end":358113,"line_start":49,"line_end":49,"column_start":1,"column_end":96}},{"value":"/ Various operations will ignore any possible leap second(s)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358114,"byte_end":358176,"line_start":50,"line_end":50,"column_start":1,"column_end":63}},{"value":"/ except when any of the operands were actually leap seconds.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358177,"byte_end":358240,"line_start":51,"line_end":51,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358241,"byte_end":358244,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ If you cannot tolerate this behavior,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358245,"byte_end":358286,"line_start":53,"line_end":53,"column_start":1,"column_end":42}},{"value":"/ you must use a separate `TimeZone` for the International Atomic Time (TAI).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358287,"byte_end":358366,"line_start":54,"line_end":54,"column_start":1,"column_end":80}},{"value":"/ TAI is like UTC but has no leap seconds, and thus slightly differs from UTC.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358367,"byte_end":358447,"line_start":55,"line_end":55,"column_start":1,"column_end":81}},{"value":"/ Chrono does not yet provide such implementation, but it is planned.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358448,"byte_end":358519,"line_start":56,"line_end":56,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358520,"byte_end":358523,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ ## Representing Leap Seconds","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358524,"byte_end":358556,"line_start":58,"line_end":58,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358557,"byte_end":358560,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ The leap second is indicated via fractional seconds more than 1 second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358561,"byte_end":358636,"line_start":60,"line_end":60,"column_start":1,"column_end":76}},{"value":"/ This makes possible to treat a leap second as the prior non-leap second","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358637,"byte_end":358712,"line_start":61,"line_end":61,"column_start":1,"column_end":76}},{"value":"/ if you don't care about sub-second accuracy.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358713,"byte_end":358761,"line_start":62,"line_end":62,"column_start":1,"column_end":49}},{"value":"/ You should use the proper formatting to get the raw leap second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358762,"byte_end":358830,"line_start":63,"line_end":63,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358831,"byte_end":358834,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ All methods accepting fractional seconds will accept such values.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358835,"byte_end":358904,"line_start":65,"line_end":65,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358905,"byte_end":358908,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358909,"byte_end":358917,"line_start":67,"line_end":67,"column_start":1,"column_end":9}},{"value":"/ use chrono::{NaiveDate, NaiveTime, Utc, TimeZone};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358918,"byte_end":358972,"line_start":68,"line_end":68,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358973,"byte_end":358976,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ let t = NaiveTime::from_hms_milli(8, 59, 59, 1_000);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358977,"byte_end":359033,"line_start":70,"line_end":70,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359034,"byte_end":359037,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ let dt1 = NaiveDate::from_ymd(2015, 7, 1).and_hms_micro(8, 59, 59, 1_000_000);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359038,"byte_end":359120,"line_start":72,"line_end":72,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359121,"byte_end":359124,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ let dt2 = Utc.ymd(2015, 6, 30).and_hms_nano(23, 59, 59, 1_000_000_000);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359125,"byte_end":359200,"line_start":74,"line_end":74,"column_start":1,"column_end":76}},{"value":"/ # let _ = (t, dt1, dt2);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359201,"byte_end":359229,"line_start":75,"line_end":75,"column_start":1,"column_end":29}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359230,"byte_end":359238,"line_start":76,"line_end":76,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359239,"byte_end":359242,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ Note that the leap second can happen anytime given an appropriate time zone;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359243,"byte_end":359323,"line_start":78,"line_end":78,"column_start":1,"column_end":81}},{"value":"/ 2015-07-01 01:23:60 would be a proper leap second if UTC+01:24 had existed.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359324,"byte_end":359403,"line_start":79,"line_end":79,"column_start":1,"column_end":80}},{"value":"/ Practically speaking, though, by the time of the first leap second on 1972-06-30,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359404,"byte_end":359489,"line_start":80,"line_end":80,"column_start":1,"column_end":86}},{"value":"/ every time zone offset around the world has standardized to the 5-minute alignment.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359490,"byte_end":359577,"line_start":81,"line_end":81,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359578,"byte_end":359581,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ ## Date And Time Arithmetics","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359582,"byte_end":359614,"line_start":83,"line_end":83,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359615,"byte_end":359618,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ As a concrete example, let's assume that `03:00:60` and `04:00:60` are leap seconds.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359619,"byte_end":359707,"line_start":85,"line_end":85,"column_start":1,"column_end":89}},{"value":"/ In reality, of course, leap seconds are separated by at least 6 months.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359708,"byte_end":359783,"line_start":86,"line_end":86,"column_start":1,"column_end":76}},{"value":"/ We will also use some intuitive concise notations for the explanation.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359784,"byte_end":359858,"line_start":87,"line_end":87,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359859,"byte_end":359862,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ `Time + Duration`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359863,"byte_end":359884,"line_start":89,"line_end":89,"column_start":1,"column_end":22}},{"value":"/ (short for [`NaiveTime::overflowing_add_signed`](#method.overflowing_add_signed)):","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359885,"byte_end":359971,"line_start":90,"line_end":90,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359972,"byte_end":359975,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ - `03:00:00 + 1s = 03:00:01`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359976,"byte_end":360009,"line_start":92,"line_end":92,"column_start":1,"column_end":34}},{"value":"/ - `03:00:59 + 60s = 03:02:00`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360010,"byte_end":360044,"line_start":93,"line_end":93,"column_start":1,"column_end":35}},{"value":"/ - `03:00:59 + 1s = 03:01:00`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360045,"byte_end":360078,"line_start":94,"line_end":94,"column_start":1,"column_end":34}},{"value":"/ - `03:00:60 + 1s = 03:01:00`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360079,"byte_end":360112,"line_start":95,"line_end":95,"column_start":1,"column_end":34}},{"value":"/   Note that the sum is identical to the previous.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360113,"byte_end":360166,"line_start":96,"line_end":96,"column_start":1,"column_end":54}},{"value":"/ - `03:00:60 + 60s = 03:01:59`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360167,"byte_end":360201,"line_start":97,"line_end":97,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 + 61s = 03:02:00`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360202,"byte_end":360236,"line_start":98,"line_end":98,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60.1 + 0.8s = 03:00:60.9`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360237,"byte_end":360276,"line_start":99,"line_end":99,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360277,"byte_end":360280,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ `Time - Duration`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360281,"byte_end":360302,"line_start":101,"line_end":101,"column_start":1,"column_end":22}},{"value":"/ (short for [`NaiveTime::overflowing_sub_signed`](#method.overflowing_sub_signed)):","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360303,"byte_end":360389,"line_start":102,"line_end":102,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360390,"byte_end":360393,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ - `03:00:00 - 1s = 02:59:59`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360394,"byte_end":360427,"line_start":104,"line_end":104,"column_start":1,"column_end":34}},{"value":"/ - `03:01:00 - 1s = 03:00:59`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360428,"byte_end":360461,"line_start":105,"line_end":105,"column_start":1,"column_end":34}},{"value":"/ - `03:01:00 - 60s = 03:00:00`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360462,"byte_end":360496,"line_start":106,"line_end":106,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 - 60s = 03:00:00`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360497,"byte_end":360531,"line_start":107,"line_end":107,"column_start":1,"column_end":35}},{"value":"/   Note that the result is identical to the previous.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360532,"byte_end":360588,"line_start":108,"line_end":108,"column_start":1,"column_end":57}},{"value":"/ - `03:00:60.7 - 0.4s = 03:00:60.3`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360589,"byte_end":360628,"line_start":109,"line_end":109,"column_start":1,"column_end":40}},{"value":"/ - `03:00:60.7 - 0.9s = 03:00:59.8`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360629,"byte_end":360668,"line_start":110,"line_end":110,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360669,"byte_end":360672,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ `Time - Time`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360673,"byte_end":360690,"line_start":112,"line_end":112,"column_start":1,"column_end":18}},{"value":"/ (short for [`NaiveTime::signed_duration_since`](#method.signed_duration_since)):","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360691,"byte_end":360775,"line_start":113,"line_end":113,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360776,"byte_end":360779,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ - `04:00:00 - 03:00:00 = 3600s`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360780,"byte_end":360816,"line_start":115,"line_end":115,"column_start":1,"column_end":37}},{"value":"/ - `03:01:00 - 03:00:00 = 60s`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360817,"byte_end":360851,"line_start":116,"line_end":116,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 - 03:00:00 = 60s`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360852,"byte_end":360886,"line_start":117,"line_end":117,"column_start":1,"column_end":35}},{"value":"/   Note that the difference is identical to the previous.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360887,"byte_end":360947,"line_start":118,"line_end":118,"column_start":1,"column_end":61}},{"value":"/ - `03:00:60.6 - 03:00:59.4 = 1.2s`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360948,"byte_end":360987,"line_start":119,"line_end":119,"column_start":1,"column_end":40}},{"value":"/ - `03:01:00 - 03:00:59.8 = 0.2s`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360988,"byte_end":361025,"line_start":120,"line_end":120,"column_start":1,"column_end":38}},{"value":"/ - `03:01:00 - 03:00:60.5 = 0.5s`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361026,"byte_end":361063,"line_start":121,"line_end":121,"column_start":1,"column_end":38}},{"value":"/   Note that the difference is larger than the previous,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361064,"byte_end":361123,"line_start":122,"line_end":122,"column_start":1,"column_end":60}},{"value":"/   even though the leap second clearly follows the previous whole second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361124,"byte_end":361200,"line_start":123,"line_end":123,"column_start":1,"column_end":77}},{"value":"/ - `04:00:60.9 - 03:00:60.1 =","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361201,"byte_end":361233,"line_start":124,"line_end":124,"column_start":1,"column_end":33}},{"value":"/   (04:00:60.9 - 04:00:00) + (04:00:00 - 03:01:00) + (03:01:00 - 03:00:60.1) =","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361234,"byte_end":361315,"line_start":125,"line_end":125,"column_start":1,"column_end":82}},{"value":"/   60.9s + 3540s + 0.9s = 3601.8s`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361316,"byte_end":361354,"line_start":126,"line_end":126,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361355,"byte_end":361358,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ In general,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361359,"byte_end":361374,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361375,"byte_end":361378,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ - `Time + Duration` unconditionally equals to `Duration + Time`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361379,"byte_end":361447,"line_start":130,"line_end":130,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361448,"byte_end":361451,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ - `Time - Duration` unconditionally equals to `Time + (-Duration)`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361452,"byte_end":361523,"line_start":132,"line_end":132,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361524,"byte_end":361527,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ - `Time1 - Time2` unconditionally equals to `-(Time2 - Time1)`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361528,"byte_end":361595,"line_start":134,"line_end":134,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361596,"byte_end":361599,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ - Associativity does not generally hold, because","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361600,"byte_end":361652,"line_start":136,"line_end":136,"column_start":1,"column_end":53}},{"value":"/   `(Time + Duration1) - Duration2` no longer equals to `Time + (Duration1 - Duration2)`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361653,"byte_end":361744,"line_start":137,"line_end":137,"column_start":1,"column_end":92}},{"value":"/   for two positive durations.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361745,"byte_end":361778,"line_start":138,"line_end":138,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361779,"byte_end":361782,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/     - As a special case, `(Time + Duration) - Duration` also does not equal to `Time`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361783,"byte_end":361873,"line_start":140,"line_end":140,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361874,"byte_end":361877,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/     - If you can assume that all durations have the same sign, however,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361878,"byte_end":361953,"line_start":142,"line_end":142,"column_start":1,"column_end":76}},{"value":"/       then the associativity holds:","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361954,"byte_end":361993,"line_start":143,"line_end":143,"column_start":1,"column_end":40}},{"value":"/       `(Time + Duration1) + Duration2` equals to `Time + (Duration1 + Duration2)`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361994,"byte_end":362079,"line_start":144,"line_end":144,"column_start":1,"column_end":86}},{"value":"/       for two positive durations.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":362080,"byte_end":362117,"line_start":145,"line_end":145,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":362118,"byte_end":362121,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ ## Reading And Writing Leap Seconds","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":362122,"byte_end":362161,"line_start":147,"line_end":147,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":362162,"byte_end":362165,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ The \"typical\" leap seconds on the minute boundary are","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":362166,"byte_end":362223,"line_start":149,"line_end":149,"column_start":1,"column_end":58}},{"value":"/ correctly handled both in the formatting and parsing.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":362224,"byte_end":362281,"line_start":150,"line_end":150,"column_start":1,"column_end":58}},{"value":"/ The leap second in the human-readable representation","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":362282,"byte_end":362338,"line_start":151,"line_end":151,"column_start":1,"column_end":57}},{"value":"/ will be represented as the second part being 60, as required by ISO 8601.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":362339,"byte_end":362416,"line_start":152,"line_end":152,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":362417,"byte_end":362420,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":362421,"byte_end":362429,"line_start":154,"line_end":154,"column_start":1,"column_end":9}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":362430,"byte_end":362462,"line_start":155,"line_end":155,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":362463,"byte_end":362466,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms_milli(23, 59, 59, 1_000);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":362467,"byte_end":362534,"line_start":157,"line_end":157,"column_start":1,"column_end":68}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:59:60Z\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":362535,"byte_end":362595,"line_start":158,"line_end":158,"column_start":1,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":362596,"byte_end":362604,"line_start":159,"line_end":159,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":362605,"byte_end":362608,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ There are hypothetical leap seconds not on the minute boundary","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":362609,"byte_end":362675,"line_start":161,"line_end":161,"column_start":1,"column_end":67}},{"value":"/ nevertheless supported by Chrono.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":362676,"byte_end":362713,"line_start":162,"line_end":162,"column_start":1,"column_end":38}},{"value":"/ They are allowed for the sake of completeness and consistency;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":362714,"byte_end":362780,"line_start":163,"line_end":163,"column_start":1,"column_end":67}},{"value":"/ there were several \"exotic\" time zone offsets with fractional minutes prior to UTC after all.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":362781,"byte_end":362878,"line_start":164,"line_end":164,"column_start":1,"column_end":98}},{"value":"/ For such cases the human-readable representation is ambiguous","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":362879,"byte_end":362944,"line_start":165,"line_end":165,"column_start":1,"column_end":66}},{"value":"/ and would be read back to the next non-leap second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":362945,"byte_end":363000,"line_start":166,"line_end":166,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":363001,"byte_end":363004,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":363005,"byte_end":363013,"line_start":168,"line_end":168,"column_start":1,"column_end":9}},{"value":"/ use chrono::{DateTime, Utc, TimeZone};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":363014,"byte_end":363056,"line_start":169,"line_end":169,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":363057,"byte_end":363060,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms_milli(23, 56, 4, 1_000);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":363061,"byte_end":363127,"line_start":171,"line_end":171,"column_start":1,"column_end":67}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:56:05Z\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":363128,"byte_end":363188,"line_start":172,"line_end":172,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":363189,"byte_end":363192,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms(23, 56, 5);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":363193,"byte_end":363246,"line_start":174,"line_end":174,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:56:05Z\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":363247,"byte_end":363307,"line_start":175,"line_end":175,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(DateTime::parse_from_rfc3339(\"2015-06-30T23:56:05Z\").unwrap(), dt);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":363308,"byte_end":363390,"line_start":176,"line_end":176,"column_start":1,"column_end":83}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":363391,"byte_end":363399,"line_start":177,"line_end":177,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":363400,"byte_end":363403,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ Since Chrono alone cannot determine any existence of leap seconds,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":363404,"byte_end":363474,"line_start":179,"line_end":179,"column_start":1,"column_end":71}},{"value":"/ **there is absolutely no guarantee that the leap second read has actually happened**.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":363475,"byte_end":363564,"line_start":180,"line_end":180,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":1168},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":364298,"byte_end":364306,"line_start":207,"line_end":207,"column_start":12,"column_end":20},"name":"from_hms","qualname":"<NaiveTime>::from_hms","value":"pub fn from_hms(u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute and second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":363697,"byte_end":363754,"line_start":188,"line_end":188,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":363759,"byte_end":363762,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ No [leap second](#leap-second-handling) is allowed here;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":363767,"byte_end":363827,"line_start":190,"line_end":190,"column_start":5,"column_end":65}},{"value":"/ use `NaiveTime::from_hms_*` methods with a subsecond parameter instead.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":363832,"byte_end":363907,"line_start":191,"line_end":191,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":363912,"byte_end":363915,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":363920,"byte_end":363969,"line_start":193,"line_end":193,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":363974,"byte_end":363977,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":363982,"byte_end":363995,"line_start":195,"line_end":195,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":364000,"byte_end":364003,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":364008,"byte_end":364016,"line_start":197,"line_end":197,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":364021,"byte_end":364059,"line_start":198,"line_end":198,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":364064,"byte_end":364067,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":364072,"byte_end":364115,"line_start":200,"line_end":200,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":364120,"byte_end":364149,"line_start":201,"line_end":201,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":364154,"byte_end":364185,"line_start":202,"line_end":202,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":364190,"byte_end":364220,"line_start":203,"line_end":203,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 0);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":364225,"byte_end":364259,"line_start":204,"line_end":204,"column_start":5,"column_end":39}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":364264,"byte_end":364272,"line_start":205,"line_end":205,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":364277,"byte_end":364286,"line_start":206,"line_end":206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1169},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":365163,"byte_end":365175,"line_start":232,"line_end":232,"column_start":12,"column_end":24},"name":"from_hms_opt","qualname":"<NaiveTime>::from_hms_opt","value":"pub fn from_hms_opt(u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute and second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":364435,"byte_end":364492,"line_start":211,"line_end":211,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":364497,"byte_end":364500,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ No [leap second](#leap-second-handling) is allowed here;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":364505,"byte_end":364565,"line_start":213,"line_end":213,"column_start":5,"column_end":65}},{"value":"/ use `NaiveTime::from_hms_*_opt` methods with a subsecond parameter instead.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":364570,"byte_end":364649,"line_start":214,"line_end":214,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":364654,"byte_end":364657,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":364662,"byte_end":364719,"line_start":216,"line_end":216,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":364724,"byte_end":364727,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":364732,"byte_end":364745,"line_start":218,"line_end":218,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":364750,"byte_end":364753,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":364758,"byte_end":364766,"line_start":220,"line_end":220,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":364771,"byte_end":364797,"line_start":221,"line_end":221,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":364802,"byte_end":364805,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ let from_hms_opt = NaiveTime::from_hms_opt;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":364810,"byte_end":364857,"line_start":223,"line_end":223,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":364862,"byte_end":364865,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hms_opt(0, 0, 0).is_some());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":364870,"byte_end":364915,"line_start":225,"line_end":225,"column_start":5,"column_end":50}},{"value":"/ assert!(from_hms_opt(23, 59, 59).is_some());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":364920,"byte_end":364968,"line_start":226,"line_end":226,"column_start":5,"column_end":53}},{"value":"/ assert!(from_hms_opt(24, 0, 0).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":364973,"byte_end":365019,"line_start":227,"line_end":227,"column_start":5,"column_end":51}},{"value":"/ assert!(from_hms_opt(23, 60, 0).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":365024,"byte_end":365071,"line_start":228,"line_end":228,"column_start":5,"column_end":52}},{"value":"/ assert!(from_hms_opt(23, 59, 60).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":365076,"byte_end":365124,"line_start":229,"line_end":229,"column_start":5,"column_end":53}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":365129,"byte_end":365137,"line_start":230,"line_end":230,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":365142,"byte_end":365151,"line_start":231,"line_end":231,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1170},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":365916,"byte_end":365930,"line_start":255,"line_end":255,"column_start":12,"column_end":26},"name":"from_hms_milli","qualname":"<NaiveTime>::from_hms_milli","value":"pub fn from_hms_milli(u32, u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":365297,"byte_end":365367,"line_start":236,"line_end":236,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":365372,"byte_end":365375,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":365380,"byte_end":365421,"line_start":238,"line_end":238,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":365426,"byte_end":365493,"line_start":239,"line_end":239,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":365498,"byte_end":365501,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":365506,"byte_end":365568,"line_start":241,"line_end":241,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":365573,"byte_end":365576,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":365581,"byte_end":365594,"line_start":243,"line_end":243,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":365599,"byte_end":365602,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":365607,"byte_end":365615,"line_start":245,"line_end":245,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":365620,"byte_end":365658,"line_start":246,"line_end":246,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":365663,"byte_end":365666,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_milli(23, 56, 4, 12);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":365671,"byte_end":365724,"line_start":248,"line_end":248,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":365729,"byte_end":365758,"line_start":249,"line_end":249,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":365763,"byte_end":365794,"line_start":250,"line_end":250,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":365799,"byte_end":365829,"line_start":251,"line_end":251,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_000_000);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":365834,"byte_end":365877,"line_start":252,"line_end":252,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":365882,"byte_end":365890,"line_start":253,"line_end":253,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":365895,"byte_end":365904,"line_start":254,"line_end":254,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1171},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":366990,"byte_end":367008,"line_start":282,"line_end":282,"column_start":12,"column_end":30},"name":"from_hms_milli_opt","qualname":"<NaiveTime>::from_hms_milli_opt","value":"pub fn from_hms_milli_opt(u32, u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":366084,"byte_end":366154,"line_start":259,"line_end":259,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":366159,"byte_end":366162,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":366167,"byte_end":366208,"line_start":261,"line_end":261,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":366213,"byte_end":366280,"line_start":262,"line_end":262,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":366285,"byte_end":366288,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":366293,"byte_end":366363,"line_start":264,"line_end":264,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":366368,"byte_end":366371,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":366376,"byte_end":366389,"line_start":266,"line_end":266,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":366394,"byte_end":366397,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":366402,"byte_end":366410,"line_start":268,"line_end":268,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":366415,"byte_end":366441,"line_start":269,"line_end":269,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":366446,"byte_end":366449,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ let from_hmsm_opt = NaiveTime::from_hms_milli_opt;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":366454,"byte_end":366508,"line_start":271,"line_end":271,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":366513,"byte_end":366516,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsm_opt(0, 0, 0, 0).is_some());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":366521,"byte_end":366570,"line_start":273,"line_end":273,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 999).is_some());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":366575,"byte_end":366629,"line_start":274,"line_end":274,"column_start":5,"column_end":59}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 1_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":366634,"byte_end":366722,"line_start":275,"line_end":275,"column_start":5,"column_end":93}},{"value":"/ assert!(from_hmsm_opt(24, 0, 0, 0).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":366727,"byte_end":366777,"line_start":276,"line_end":276,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsm_opt(23, 60, 0, 0).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":366782,"byte_end":366833,"line_start":277,"line_end":277,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsm_opt(23, 59, 60, 0).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":366838,"byte_end":366890,"line_start":278,"line_end":278,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 2_000).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":366895,"byte_end":366951,"line_start":279,"line_end":279,"column_start":5,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":366956,"byte_end":366964,"line_start":280,"line_end":280,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":366969,"byte_end":366978,"line_start":281,"line_end":281,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1173},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":367844,"byte_end":367858,"line_start":307,"line_end":307,"column_start":12,"column_end":26},"name":"from_hms_micro","qualname":"<NaiveTime>::from_hms_micro","value":"pub fn from_hms_micro(u32, u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":367217,"byte_end":367287,"line_start":288,"line_end":288,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":367292,"byte_end":367295,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":367300,"byte_end":367345,"line_start":290,"line_end":290,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":367350,"byte_end":367417,"line_start":291,"line_end":291,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":367422,"byte_end":367425,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":367430,"byte_end":367492,"line_start":293,"line_end":293,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":367497,"byte_end":367500,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":367505,"byte_end":367518,"line_start":295,"line_end":295,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":367523,"byte_end":367526,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":367531,"byte_end":367539,"line_start":297,"line_end":297,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":367544,"byte_end":367582,"line_start":298,"line_end":298,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":367587,"byte_end":367590,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_micro(23, 56, 4, 12_345);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":367595,"byte_end":367652,"line_start":300,"line_end":300,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":367657,"byte_end":367686,"line_start":301,"line_end":301,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":367691,"byte_end":367722,"line_start":302,"line_end":302,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":367727,"byte_end":367757,"line_start":303,"line_end":303,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_000);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":367762,"byte_end":367805,"line_start":304,"line_end":304,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":367810,"byte_end":367818,"line_start":305,"line_end":305,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":367823,"byte_end":367832,"line_start":306,"line_end":306,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1174},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":368934,"byte_end":368952,"line_start":334,"line_end":334,"column_start":12,"column_end":30},"name":"from_hms_micro_opt","qualname":"<NaiveTime>::from_hms_micro_opt","value":"pub fn from_hms_micro_opt(u32, u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":368012,"byte_end":368082,"line_start":311,"line_end":311,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":368087,"byte_end":368090,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":368095,"byte_end":368140,"line_start":313,"line_end":313,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":368145,"byte_end":368212,"line_start":314,"line_end":314,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":368217,"byte_end":368220,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":368225,"byte_end":368295,"line_start":316,"line_end":316,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":368300,"byte_end":368303,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":368308,"byte_end":368321,"line_start":318,"line_end":318,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":368326,"byte_end":368329,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":368334,"byte_end":368342,"line_start":320,"line_end":320,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":368347,"byte_end":368373,"line_start":321,"line_end":321,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":368378,"byte_end":368381,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ let from_hmsu_opt = NaiveTime::from_hms_micro_opt;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":368386,"byte_end":368440,"line_start":323,"line_end":323,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":368445,"byte_end":368448,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsu_opt(0, 0, 0, 0).is_some());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":368453,"byte_end":368502,"line_start":325,"line_end":325,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 999_999).is_some());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":368507,"byte_end":368565,"line_start":326,"line_end":326,"column_start":5,"column_end":63}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 1_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":368570,"byte_end":368662,"line_start":327,"line_end":327,"column_start":5,"column_end":97}},{"value":"/ assert!(from_hmsu_opt(24, 0, 0, 0).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":368667,"byte_end":368717,"line_start":328,"line_end":328,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsu_opt(23, 60, 0, 0).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":368722,"byte_end":368773,"line_start":329,"line_end":329,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsu_opt(23, 59, 60, 0).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":368778,"byte_end":368830,"line_start":330,"line_end":330,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 2_000_000).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":368835,"byte_end":368895,"line_start":331,"line_end":331,"column_start":5,"column_end":65}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":368900,"byte_end":368908,"line_start":332,"line_end":332,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":368913,"byte_end":368922,"line_start":333,"line_end":333,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1176},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":369762,"byte_end":369775,"line_start":357,"line_end":357,"column_start":12,"column_end":25},"name":"from_hms_nano","qualname":"<NaiveTime>::from_hms_nano","value":"pub fn from_hms_nano(u32, u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":369131,"byte_end":369200,"line_start":338,"line_end":338,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":369205,"byte_end":369208,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":369213,"byte_end":369261,"line_start":340,"line_end":340,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":369266,"byte_end":369333,"line_start":341,"line_end":341,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":369338,"byte_end":369341,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":369346,"byte_end":369407,"line_start":343,"line_end":343,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":369412,"byte_end":369415,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":369420,"byte_end":369433,"line_start":345,"line_end":345,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":369438,"byte_end":369441,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":369446,"byte_end":369454,"line_start":347,"line_end":347,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":369459,"byte_end":369497,"line_start":348,"line_end":348,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":369502,"byte_end":369505,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":369510,"byte_end":369570,"line_start":350,"line_end":350,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":369575,"byte_end":369604,"line_start":351,"line_end":351,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":369609,"byte_end":369640,"line_start":352,"line_end":352,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":369645,"byte_end":369675,"line_start":353,"line_end":353,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_678);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":369680,"byte_end":369723,"line_start":354,"line_end":354,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":369728,"byte_end":369736,"line_start":355,"line_end":355,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":369741,"byte_end":369750,"line_start":356,"line_end":356,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1177},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":370860,"byte_end":370877,"line_start":384,"line_end":384,"column_start":12,"column_end":29},"name":"from_hms_nano_opt","qualname":"<NaiveTime>::from_hms_nano_opt","value":"pub fn from_hms_nano_opt(u32, u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":369926,"byte_end":369995,"line_start":361,"line_end":361,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":370000,"byte_end":370003,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":370008,"byte_end":370056,"line_start":363,"line_end":363,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":370061,"byte_end":370128,"line_start":364,"line_end":364,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":370133,"byte_end":370136,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":370141,"byte_end":370210,"line_start":366,"line_end":366,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":370215,"byte_end":370218,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":370223,"byte_end":370236,"line_start":368,"line_end":368,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":370241,"byte_end":370244,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":370249,"byte_end":370257,"line_start":370,"line_end":370,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":370262,"byte_end":370288,"line_start":371,"line_end":371,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":370293,"byte_end":370296,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ let from_hmsn_opt = NaiveTime::from_hms_nano_opt;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":370301,"byte_end":370354,"line_start":373,"line_end":373,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":370359,"byte_end":370362,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsn_opt(0, 0, 0, 0).is_some());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":370367,"byte_end":370416,"line_start":375,"line_end":375,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 999_999_999).is_some());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":370421,"byte_end":370483,"line_start":376,"line_end":376,"column_start":5,"column_end":67}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 1_999_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":370488,"byte_end":370584,"line_start":377,"line_end":377,"column_start":5,"column_end":101}},{"value":"/ assert!(from_hmsn_opt(24, 0, 0, 0).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":370589,"byte_end":370639,"line_start":378,"line_end":378,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsn_opt(23, 60, 0, 0).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":370644,"byte_end":370695,"line_start":379,"line_end":379,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsn_opt(23, 59, 60, 0).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":370700,"byte_end":370752,"line_start":380,"line_end":380,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 2_000_000_000).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":370757,"byte_end":370821,"line_start":381,"line_end":381,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":370826,"byte_end":370834,"line_start":382,"line_end":382,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":370839,"byte_end":370848,"line_start":383,"line_end":383,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1178},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":371821,"byte_end":371851,"line_start":411,"line_end":411,"column_start":12,"column_end":42},"name":"from_num_seconds_from_midnight","qualname":"<NaiveTime>::from_num_seconds_from_midnight","value":"pub fn from_num_seconds_from_midnight(u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":371164,"byte_end":371249,"line_start":392,"line_end":392,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":371254,"byte_end":371257,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":371262,"byte_end":371310,"line_start":394,"line_end":394,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":371315,"byte_end":371382,"line_start":395,"line_end":395,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":371387,"byte_end":371390,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid number of seconds and/or nanosecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":371395,"byte_end":371453,"line_start":397,"line_end":397,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":371458,"byte_end":371461,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":371466,"byte_end":371479,"line_start":399,"line_end":399,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":371484,"byte_end":371487,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":371492,"byte_end":371500,"line_start":401,"line_end":401,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":371505,"byte_end":371543,"line_start":402,"line_end":402,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":371548,"byte_end":371551,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_num_seconds_from_midnight(86164, 12_345_678);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":371556,"byte_end":371629,"line_start":404,"line_end":404,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":371634,"byte_end":371663,"line_start":405,"line_end":405,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":371668,"byte_end":371699,"line_start":406,"line_end":406,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":371704,"byte_end":371734,"line_start":407,"line_end":407,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_678);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":371739,"byte_end":371782,"line_start":408,"line_end":408,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":371787,"byte_end":371795,"line_start":409,"line_end":409,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":371800,"byte_end":371809,"line_start":410,"line_end":410,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1179},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":372823,"byte_end":372857,"line_start":436,"line_end":436,"column_start":12,"column_end":46},"name":"from_num_seconds_from_midnight_opt","qualname":"<NaiveTime>::from_num_seconds_from_midnight_opt","value":"pub fn from_num_seconds_from_midnight_opt(u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":371989,"byte_end":372074,"line_start":415,"line_end":415,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":372079,"byte_end":372082,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":372087,"byte_end":372135,"line_start":417,"line_end":417,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":372140,"byte_end":372207,"line_start":418,"line_end":418,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":372212,"byte_end":372215,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid number of seconds and/or nanosecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":372220,"byte_end":372286,"line_start":420,"line_end":420,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":372291,"byte_end":372294,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":372299,"byte_end":372312,"line_start":422,"line_end":422,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":372317,"byte_end":372320,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":372325,"byte_end":372333,"line_start":424,"line_end":424,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":372338,"byte_end":372364,"line_start":425,"line_end":425,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":372369,"byte_end":372372,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ let from_nsecs_opt = NaiveTime::from_num_seconds_from_midnight_opt;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":372377,"byte_end":372448,"line_start":427,"line_end":427,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":372453,"byte_end":372456,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ assert!(from_nsecs_opt(0, 0).is_some());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":372461,"byte_end":372505,"line_start":429,"line_end":429,"column_start":5,"column_end":49}},{"value":"/ assert!(from_nsecs_opt(86399, 999_999_999).is_some());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":372510,"byte_end":372568,"line_start":430,"line_end":430,"column_start":5,"column_end":63}},{"value":"/ assert!(from_nsecs_opt(86399, 1_999_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":372573,"byte_end":372665,"line_start":431,"line_end":431,"column_start":5,"column_end":97}},{"value":"/ assert!(from_nsecs_opt(86_400, 0).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":372670,"byte_end":372719,"line_start":432,"line_end":432,"column_start":5,"column_end":54}},{"value":"/ assert!(from_nsecs_opt(86399, 2_000_000_000).is_none());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":372724,"byte_end":372784,"line_start":433,"line_end":433,"column_start":5,"column_end":65}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":372789,"byte_end":372797,"line_start":434,"line_end":434,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":372802,"byte_end":372811,"line_start":435,"line_end":435,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1180},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":375527,"byte_end":375541,"line_start":504,"line_end":504,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveTime>::parse_from_str","value":"pub fn parse_from_str(&str, &str) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveTime`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveTime`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":373053,"byte_end":373136,"line_start":443,"line_end":443,"column_start":5,"column_end":88}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":373141,"byte_end":373211,"line_start":444,"line_end":444,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":373216,"byte_end":373254,"line_start":445,"line_end":445,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":373259,"byte_end":373262,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":373267,"byte_end":373280,"line_start":447,"line_end":447,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":373285,"byte_end":373288,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":373293,"byte_end":373301,"line_start":449,"line_end":449,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":373306,"byte_end":373332,"line_start":450,"line_end":450,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":373337,"byte_end":373340,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":373345,"byte_end":373396,"line_start":452,"line_end":452,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":373401,"byte_end":373404,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"23:56:04\", \"%H:%M:%S\"),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":373409,"byte_end":373463,"line_start":454,"line_end":454,"column_start":5,"column_end":59}},{"value":"/            Ok(NaiveTime::from_hms(23, 56, 4)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":373468,"byte_end":373519,"line_start":455,"line_end":455,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(parse_from_str(\"pm012345.6789\", \"%p%I%M%S%.f\"),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":373524,"byte_end":373586,"line_start":456,"line_end":456,"column_start":5,"column_end":67}},{"value":"/            Ok(NaiveTime::from_hms_micro(13, 23, 45, 678_900)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":373591,"byte_end":373658,"line_start":457,"line_end":457,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":373663,"byte_end":373671,"line_start":458,"line_end":458,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":373676,"byte_end":373679,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ Date and offset is ignored for the purpose of parsing.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":373684,"byte_end":373742,"line_start":460,"line_end":460,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":373747,"byte_end":373750,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":373755,"byte_end":373763,"line_start":462,"line_end":462,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":373768,"byte_end":373796,"line_start":463,"line_end":463,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":373801,"byte_end":373854,"line_start":464,"line_end":464,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":373859,"byte_end":373940,"line_start":465,"line_end":465,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveTime::from_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":373945,"byte_end":373997,"line_start":466,"line_end":466,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":374002,"byte_end":374010,"line_start":467,"line_end":467,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":374015,"byte_end":374018,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ [Leap seconds](#leap-second-handling) are correctly handled by","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":374023,"byte_end":374089,"line_start":469,"line_end":469,"column_start":5,"column_end":71}},{"value":"/ treating any time of the form `hh:mm:60` as a leap second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":374094,"byte_end":374156,"line_start":470,"line_end":470,"column_start":5,"column_end":67}},{"value":"/ (This equally applies to the formatting, so the round trip is possible.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":374161,"byte_end":374237,"line_start":471,"line_end":471,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":374242,"byte_end":374245,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":374250,"byte_end":374258,"line_start":473,"line_end":473,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":374263,"byte_end":374291,"line_start":474,"line_end":474,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":374296,"byte_end":374349,"line_start":475,"line_end":475,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"08:59:60.123\", \"%H:%M:%S%.f\"),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":374354,"byte_end":374415,"line_start":476,"line_end":476,"column_start":5,"column_end":66}},{"value":"/            Ok(NaiveTime::from_hms_milli(8, 59, 59, 1_123)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":374420,"byte_end":374484,"line_start":477,"line_end":477,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":374489,"byte_end":374497,"line_start":478,"line_end":478,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":374502,"byte_end":374505,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ Missing seconds are assumed to be zero,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":374510,"byte_end":374553,"line_start":480,"line_end":480,"column_start":5,"column_end":48}},{"value":"/ but out-of-bound times or insufficient fields are errors otherwise.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":374558,"byte_end":374629,"line_start":481,"line_end":481,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":374634,"byte_end":374637,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":374642,"byte_end":374650,"line_start":483,"line_end":483,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":374655,"byte_end":374683,"line_start":484,"line_end":484,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":374688,"byte_end":374741,"line_start":485,"line_end":485,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"7:15\", \"%H:%M\"),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":374746,"byte_end":374793,"line_start":486,"line_end":486,"column_start":5,"column_end":52}},{"value":"/            Ok(NaiveTime::from_hms(7, 15, 0)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":374798,"byte_end":374848,"line_start":487,"line_end":487,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":374853,"byte_end":374856,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ assert!(parse_from_str(\"04m33s\", \"%Mm%Ss\").is_err());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":374861,"byte_end":374918,"line_start":489,"line_end":489,"column_start":5,"column_end":62}},{"value":"/ assert!(parse_from_str(\"12\", \"%H\").is_err());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":374923,"byte_end":374972,"line_start":490,"line_end":490,"column_start":5,"column_end":54}},{"value":"/ assert!(parse_from_str(\"17:60\", \"%H:%M\").is_err());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":374977,"byte_end":375032,"line_start":491,"line_end":491,"column_start":5,"column_end":60}},{"value":"/ assert!(parse_from_str(\"24:00:00\", \"%H:%M:%S\").is_err());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":375037,"byte_end":375098,"line_start":492,"line_end":492,"column_start":5,"column_end":66}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":375103,"byte_end":375111,"line_start":493,"line_end":493,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":375116,"byte_end":375119,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":375124,"byte_end":375206,"line_start":495,"line_end":495,"column_start":5,"column_end":87}},{"value":"/ Here `%H` is for 24-hour clocks, unlike `%I`,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":375211,"byte_end":375260,"line_start":496,"line_end":496,"column_start":5,"column_end":54}},{"value":"/ and thus can be independently determined without AM/PM.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":375265,"byte_end":375324,"line_start":497,"line_end":497,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":375329,"byte_end":375332,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":375337,"byte_end":375345,"line_start":499,"line_end":499,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":375350,"byte_end":375378,"line_start":500,"line_end":500,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":375383,"byte_end":375436,"line_start":501,"line_end":501,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"13:07 AM\", \"%H:%M %p\").is_err());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":375441,"byte_end":375502,"line_start":502,"line_end":502,"column_start":5,"column_end":66}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":375507,"byte_end":375515,"line_start":503,"line_end":503,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":1181},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":376669,"byte_end":376691,"line_start":532,"line_end":532,"column_start":12,"column_end":34},"name":"overflowing_add_signed","qualname":"<NaiveTime>::overflowing_add_signed","value":"pub fn overflowing_add_signed(&Self, OldDuration) -> (NaiveTime, i64)","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current time,\n and also returns the number of *seconds*\n in the integral number of days ignored from the addition.\n (We cannot return `Duration` because it is subject to overflow or underflow.)","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current time,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":375729,"byte_end":375775,"line_start":510,"line_end":510,"column_start":5,"column_end":51}},{"value":"/ and also returns the number of *seconds*","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":375780,"byte_end":375824,"line_start":511,"line_end":511,"column_start":5,"column_end":49}},{"value":"/ in the integral number of days ignored from the addition.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":375829,"byte_end":375890,"line_start":512,"line_end":512,"column_start":5,"column_end":66}},{"value":"/ (We cannot return `Duration` because it is subject to overflow or underflow.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":375895,"byte_end":375976,"line_start":513,"line_end":513,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":375981,"byte_end":375984,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":375989,"byte_end":376002,"line_start":515,"line_end":515,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":376007,"byte_end":376010,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":376015,"byte_end":376023,"line_start":517,"line_end":517,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":376028,"byte_end":376066,"line_start":518,"line_end":518,"column_start":5,"column_end":43}},{"value":"/ use chrono::{Duration, NaiveTime};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":376071,"byte_end":376109,"line_start":519,"line_end":519,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":376114,"byte_end":376117,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ let from_hms = NaiveTime::from_hms;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":376122,"byte_end":376161,"line_start":521,"line_end":521,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":376166,"byte_end":376169,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(11)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":376174,"byte_end":376251,"line_start":523,"line_end":523,"column_start":5,"column_end":82}},{"value":"/            (from_hms(14, 4, 5), 0));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":376256,"byte_end":376296,"line_start":524,"line_end":524,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(23)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":376301,"byte_end":376378,"line_start":525,"line_end":525,"column_start":5,"column_end":82}},{"value":"/            (from_hms(2, 4, 5), 86_400));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":376383,"byte_end":376427,"line_start":526,"line_end":526,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(-7)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":376432,"byte_end":376509,"line_start":527,"line_end":527,"column_start":5,"column_end":82}},{"value":"/            (from_hms(20, 4, 5), -86_400));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":376514,"byte_end":376560,"line_start":528,"line_end":528,"column_start":5,"column_end":51}},{"value":"/ # }","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":376565,"byte_end":376572,"line_start":529,"line_end":529,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":376577,"byte_end":376585,"line_start":530,"line_end":530,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":1182},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":380165,"byte_end":380187,"line_start":617,"line_end":617,"column_start":12,"column_end":34},"name":"overflowing_sub_signed","qualname":"<NaiveTime>::overflowing_sub_signed","value":"pub fn overflowing_sub_signed(&Self, OldDuration) -> (NaiveTime, i64)","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current time,\n and also returns the number of *seconds*\n in the integral number of days ignored from the subtraction.\n (We cannot return `Duration` because it is subject to overflow or underflow.)","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current time,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":379274,"byte_end":379327,"line_start":595,"line_end":595,"column_start":5,"column_end":58}},{"value":"/ and also returns the number of *seconds*","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":379332,"byte_end":379376,"line_start":596,"line_end":596,"column_start":5,"column_end":49}},{"value":"/ in the integral number of days ignored from the subtraction.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":379381,"byte_end":379445,"line_start":597,"line_end":597,"column_start":5,"column_end":69}},{"value":"/ (We cannot return `Duration` because it is subject to overflow or underflow.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":379450,"byte_end":379531,"line_start":598,"line_end":598,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":379536,"byte_end":379539,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":379544,"byte_end":379557,"line_start":600,"line_end":600,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":379562,"byte_end":379565,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":379570,"byte_end":379578,"line_start":602,"line_end":602,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":379583,"byte_end":379621,"line_start":603,"line_end":603,"column_start":5,"column_end":43}},{"value":"/ use chrono::{Duration, NaiveTime};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":379626,"byte_end":379664,"line_start":604,"line_end":604,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":379669,"byte_end":379672,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ let from_hms = NaiveTime::from_hms;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":379677,"byte_end":379716,"line_start":606,"line_end":606,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":379721,"byte_end":379724,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(2)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":379729,"byte_end":379805,"line_start":608,"line_end":608,"column_start":5,"column_end":81}},{"value":"/            (from_hms(1, 4, 5), 0));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":379810,"byte_end":379849,"line_start":609,"line_end":609,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(17)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":379854,"byte_end":379931,"line_start":610,"line_end":610,"column_start":5,"column_end":82}},{"value":"/            (from_hms(10, 4, 5), 86_400));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":379936,"byte_end":379981,"line_start":611,"line_end":611,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(-22)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":379986,"byte_end":380064,"line_start":612,"line_end":612,"column_start":5,"column_end":83}},{"value":"/            (from_hms(1, 4, 5), -86_400));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":380069,"byte_end":380114,"line_start":613,"line_end":613,"column_start":5,"column_end":50}},{"value":"/ # }","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":380119,"byte_end":380126,"line_start":614,"line_end":614,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":380131,"byte_end":380139,"line_start":615,"line_end":615,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":380144,"byte_end":380153,"line_start":616,"line_end":616,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1183},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":383169,"byte_end":383190,"line_start":680,"line_end":680,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveTime>::signed_duration_since","value":"pub fn signed_duration_since(Self, NaiveTime) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveTime` from the current time.\n Returns a `Duration` within +/- 1 day.\n This does not overflow or underflow at all.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveTime` from the current time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":380379,"byte_end":380435,"line_start":622,"line_end":622,"column_start":5,"column_end":61}},{"value":"/ Returns a `Duration` within +/- 1 day.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":380440,"byte_end":380482,"line_start":623,"line_end":623,"column_start":5,"column_end":47}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":380487,"byte_end":380534,"line_start":624,"line_end":624,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":380539,"byte_end":380542,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](#leap-second-handling),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":380547,"byte_end":380619,"line_start":626,"line_end":626,"column_start":5,"column_end":77}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":380624,"byte_end":380690,"line_start":627,"line_end":627,"column_start":5,"column_end":71}},{"value":"/ except when any of the `NaiveTime`s themselves represents a leap second","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":380695,"byte_end":380770,"line_start":628,"line_end":628,"column_start":5,"column_end":80}},{"value":"/ in which case the assumption becomes that","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":380775,"byte_end":380820,"line_start":629,"line_end":629,"column_start":5,"column_end":50}},{"value":"/ **there are exactly one (or two) leap second(s) ever**.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":380825,"byte_end":380884,"line_start":630,"line_end":630,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":380889,"byte_end":380892,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":380897,"byte_end":380910,"line_start":632,"line_end":632,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":380915,"byte_end":380918,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":380923,"byte_end":380931,"line_start":634,"line_end":634,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":380936,"byte_end":380974,"line_start":635,"line_end":635,"column_start":5,"column_end":43}},{"value":"/ use chrono::{Duration, NaiveTime};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":380979,"byte_end":381017,"line_start":636,"line_end":636,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":381022,"byte_end":381025,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ let from_hmsm = NaiveTime::from_hms_milli;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":381030,"byte_end":381076,"line_start":638,"line_end":638,"column_start":5,"column_end":51}},{"value":"/ let since = NaiveTime::signed_duration_since;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":381081,"byte_end":381130,"line_start":639,"line_end":639,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":381135,"byte_end":381138,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 7, 900)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":381143,"byte_end":381214,"line_start":641,"line_end":641,"column_start":5,"column_end":76}},{"value":"/            Duration::zero());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":381219,"byte_end":381252,"line_start":642,"line_end":642,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 7, 875)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":381257,"byte_end":381328,"line_start":643,"line_end":643,"column_start":5,"column_end":76}},{"value":"/            Duration::milliseconds(25));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":381333,"byte_end":381376,"line_start":644,"line_end":644,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 6, 925)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":381381,"byte_end":381452,"line_start":645,"line_end":645,"column_start":5,"column_end":76}},{"value":"/            Duration::milliseconds(975));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":381457,"byte_end":381501,"line_start":646,"line_end":646,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 0, 900)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":381506,"byte_end":381577,"line_start":647,"line_end":647,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(7));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":381582,"byte_end":381619,"line_start":648,"line_end":648,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 0, 7, 900)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":381624,"byte_end":381695,"line_start":649,"line_end":649,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(5 * 60));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":381700,"byte_end":381742,"line_start":650,"line_end":650,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(0, 5, 7, 900)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":381747,"byte_end":381818,"line_start":651,"line_end":651,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(3 * 3600));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":381823,"byte_end":381867,"line_start":652,"line_end":652,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(4, 5, 7, 900)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":381872,"byte_end":381943,"line_start":653,"line_end":653,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(-3600));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":381948,"byte_end":381989,"line_start":654,"line_end":654,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(2, 4, 6, 800)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":381994,"byte_end":382065,"line_start":655,"line_end":655,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(3600 + 60 + 1) + Duration::milliseconds(100));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":382070,"byte_end":382149,"line_start":656,"line_end":656,"column_start":5,"column_end":84}},{"value":"/ # }","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":382154,"byte_end":382161,"line_start":657,"line_end":657,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":382166,"byte_end":382174,"line_start":658,"line_end":658,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":382179,"byte_end":382182,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled, but the subtraction assumes that","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":382187,"byte_end":382249,"line_start":660,"line_end":660,"column_start":5,"column_end":67}},{"value":"/ there were no other leap seconds happened.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":382254,"byte_end":382300,"line_start":661,"line_end":661,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":382305,"byte_end":382308,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":382313,"byte_end":382321,"line_start":663,"line_end":663,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":382326,"byte_end":382364,"line_start":664,"line_end":664,"column_start":5,"column_end":43}},{"value":"/ # use chrono::{Duration, NaiveTime};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":382369,"byte_end":382409,"line_start":665,"line_end":665,"column_start":5,"column_end":45}},{"value":"/ # let from_hmsm = NaiveTime::from_hms_milli;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":382414,"byte_end":382462,"line_start":666,"line_end":666,"column_start":5,"column_end":53}},{"value":"/ # let since = NaiveTime::signed_duration_since;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":382467,"byte_end":382518,"line_start":667,"line_end":667,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(3, 0, 59, 0)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":382523,"byte_end":382596,"line_start":668,"line_end":668,"column_start":5,"column_end":78}},{"value":"/            Duration::seconds(1));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":382601,"byte_end":382638,"line_start":669,"line_end":669,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_500), from_hmsm(3, 0, 59, 0)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":382643,"byte_end":382716,"line_start":670,"line_end":670,"column_start":5,"column_end":78}},{"value":"/            Duration::milliseconds(1500));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":382721,"byte_end":382766,"line_start":671,"line_end":671,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(3, 0, 0, 0)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":382771,"byte_end":382843,"line_start":672,"line_end":672,"column_start":5,"column_end":77}},{"value":"/            Duration::seconds(60));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":382848,"byte_end":382886,"line_start":673,"line_end":673,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 0, 0), from_hmsm(2, 59, 59, 1_000)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":382891,"byte_end":382964,"line_start":674,"line_end":674,"column_start":5,"column_end":78}},{"value":"/            Duration::seconds(1));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":382969,"byte_end":383006,"line_start":675,"line_end":675,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(2, 59, 59, 1_000)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":383011,"byte_end":383089,"line_start":676,"line_end":676,"column_start":5,"column_end":83}},{"value":"/            Duration::seconds(61));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":383094,"byte_end":383132,"line_start":677,"line_end":677,"column_start":5,"column_end":43}},{"value":"/ # }","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":383137,"byte_end":383144,"line_start":678,"line_end":678,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":383149,"byte_end":383157,"line_start":679,"line_end":679,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":1187},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":385846,"byte_end":385863,"line_start":747,"line_end":747,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveTime>::format_with_items","value":"pub fn format_with_items<'a, I, B>(&Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Formats the time with the specified formatting items.\n Otherwise it is the same as the ordinary [`format`](#method.format) method.","sig":null,"attributes":[{"value":"/ Formats the time with the specified formatting items.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":384667,"byte_end":384724,"line_start":718,"line_end":718,"column_start":5,"column_end":62}},{"value":"/ Otherwise it is the same as the ordinary [`format`](#method.format) method.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":384729,"byte_end":384808,"line_start":719,"line_end":719,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":384813,"byte_end":384816,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":384821,"byte_end":384871,"line_start":721,"line_end":721,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":384876,"byte_end":384954,"line_start":722,"line_end":722,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":384959,"byte_end":384962,"line_start":723,"line_end":723,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":384967,"byte_end":384980,"line_start":724,"line_end":724,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":384985,"byte_end":384988,"line_start":725,"line_end":725,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":384993,"byte_end":385001,"line_start":726,"line_end":726,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":385006,"byte_end":385032,"line_start":727,"line_end":727,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":385037,"byte_end":385085,"line_start":728,"line_end":728,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":385090,"byte_end":385093,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%H:%M:%S\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":385098,"byte_end":385143,"line_start":730,"line_end":730,"column_start":5,"column_end":50}},{"value":"/ let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":385148,"byte_end":385191,"line_start":731,"line_end":731,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(t.format_with_items(fmt.clone()).to_string(), \"23:56:04\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":385196,"byte_end":385269,"line_start":732,"line_end":732,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S\").to_string(),             \"23:56:04\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":385274,"byte_end":385347,"line_start":733,"line_end":733,"column_start":5,"column_end":78}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":385352,"byte_end":385360,"line_start":734,"line_end":734,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":385365,"byte_end":385368,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":385373,"byte_end":385457,"line_start":736,"line_end":736,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":385462,"byte_end":385465,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":385470,"byte_end":385478,"line_start":738,"line_end":738,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":385483,"byte_end":385511,"line_start":739,"line_end":739,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":385516,"byte_end":385566,"line_start":740,"line_end":740,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%H:%M:%S\").clone();","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":385571,"byte_end":385626,"line_start":741,"line_end":741,"column_start":5,"column_end":60}},{"value":"/ # let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":385631,"byte_end":385676,"line_start":742,"line_end":742,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(format!(\"{}\", t.format_with_items(fmt)), \"23:56:04\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":385681,"byte_end":385749,"line_start":743,"line_end":743,"column_start":5,"column_end":73}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":385754,"byte_end":385762,"line_start":744,"line_end":744,"column_start":5,"column_end":13}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":385767,"byte_end":385820,"line_start":745,"line_end":745,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":385825,"byte_end":385834,"line_start":746,"line_end":746,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1191},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":387684,"byte_end":387690,"line_start":791,"line_end":791,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveTime>::format","value":"pub fn format<'a>(&Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the time with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the time with the specified format string.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":386059,"byte_end":386113,"line_start":755,"line_end":755,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":386118,"byte_end":386188,"line_start":756,"line_end":756,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":386193,"byte_end":386231,"line_start":757,"line_end":757,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":386236,"byte_end":386239,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":386244,"byte_end":386279,"line_start":759,"line_end":759,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":386284,"byte_end":386357,"line_start":760,"line_end":760,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":386362,"byte_end":386419,"line_start":761,"line_end":761,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":386424,"byte_end":386486,"line_start":762,"line_end":762,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":386491,"byte_end":386551,"line_start":763,"line_end":763,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":386556,"byte_end":386559,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":386564,"byte_end":386628,"line_start":765,"line_end":765,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":386633,"byte_end":386696,"line_start":766,"line_end":766,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":386701,"byte_end":386776,"line_start":767,"line_end":767,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":386781,"byte_end":386784,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":386789,"byte_end":386802,"line_start":769,"line_end":769,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":386807,"byte_end":386810,"line_start":770,"line_end":770,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":386815,"byte_end":386823,"line_start":771,"line_end":771,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":386828,"byte_end":386854,"line_start":772,"line_end":772,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":386859,"byte_end":386862,"line_start":773,"line_end":773,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":386867,"byte_end":386927,"line_start":774,"line_end":774,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S\").to_string(), \"23:56:04\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":386932,"byte_end":386993,"line_start":775,"line_end":775,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S%.6f\").to_string(), \"23:56:04.012345\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":386998,"byte_end":387070,"line_start":776,"line_end":776,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(t.format(\"%-I:%M %p\").to_string(), \"11:56 PM\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":387075,"byte_end":387137,"line_start":777,"line_end":777,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":387142,"byte_end":387150,"line_start":778,"line_end":778,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":387155,"byte_end":387158,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":387163,"byte_end":387247,"line_start":780,"line_end":780,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":387252,"byte_end":387255,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":387260,"byte_end":387268,"line_start":782,"line_end":782,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":387273,"byte_end":387301,"line_start":783,"line_end":783,"column_start":5,"column_end":33}},{"value":"/ # let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":387306,"byte_end":387368,"line_start":784,"line_end":784,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%H:%M:%S\")), \"23:56:04\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":387373,"byte_end":387437,"line_start":785,"line_end":785,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%H:%M:%S%.6f\")), \"23:56:04.012345\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":387442,"byte_end":387517,"line_start":786,"line_end":786,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%-I:%M %p\")), \"11:56 PM\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":387522,"byte_end":387587,"line_start":787,"line_end":787,"column_start":5,"column_end":70}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":387592,"byte_end":387600,"line_start":788,"line_end":788,"column_start":5,"column_end":13}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":387605,"byte_end":387658,"line_start":789,"line_end":789,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":387663,"byte_end":387672,"line_start":790,"line_end":790,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2543},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":428635,"byte_end":428639,"line_start":47,"line_end":47,"column_start":12,"column_end":16},"name":"Date","qualname":"::date::Date","value":"Date {  }","parent":null,"children":[{"krate":0,"index":2545},{"krate":0,"index":2546}],"decl_id":null,"docs":" ISO 8601 calendar date with time zone.","sig":null,"attributes":[{"value":"/ ISO 8601 calendar date with time zone.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":427262,"byte_end":427304,"line_start":22,"line_end":22,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":427305,"byte_end":427308,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ This type should be considered ambiguous at best,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":427309,"byte_end":427362,"line_start":24,"line_end":24,"column_start":1,"column_end":54}},{"value":"/ due to the inherent lack of precision required for the time zone resolution.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":427363,"byte_end":427443,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/ For serialization and deserialization uses, it is best to use `NaiveDate` instead.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":427444,"byte_end":427530,"line_start":26,"line_end":26,"column_start":1,"column_end":87}},{"value":"/ There are some guarantees on the usage of `Date<Tz>`:","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":427531,"byte_end":427588,"line_start":27,"line_end":27,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":427589,"byte_end":427592,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ - If properly constructed via `TimeZone::ymd` and others without an error,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":427593,"byte_end":427671,"line_start":29,"line_end":29,"column_start":1,"column_end":79}},{"value":"/   the corresponding local date should exist for at least a moment.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":427672,"byte_end":427742,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"/   (It may still have a gap from the offset changes.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":427743,"byte_end":427799,"line_start":31,"line_end":31,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":427800,"byte_end":427803,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ - The `TimeZone` is free to assign *any* `Offset` to the local date,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":427804,"byte_end":427876,"line_start":33,"line_end":33,"column_start":1,"column_end":73}},{"value":"/   as long as that offset did occur in given day.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":427877,"byte_end":427929,"line_start":34,"line_end":34,"column_start":1,"column_end":53}},{"value":"/   For example, if `2015-03-08T01:59-08:00` is followed by `2015-03-08T03:00-07:00`,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":427930,"byte_end":428017,"line_start":35,"line_end":35,"column_start":1,"column_end":88}},{"value":"/   it may produce either `2015-03-08-08:00` or `2015-03-08-07:00`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":428018,"byte_end":428086,"line_start":36,"line_end":36,"column_start":1,"column_end":69}},{"value":"/   but *not* `2015-03-08+00:00` and others.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":428087,"byte_end":428133,"line_start":37,"line_end":37,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":428134,"byte_end":428137,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ - Once constructed as a full `DateTime`,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":428138,"byte_end":428182,"line_start":39,"line_end":39,"column_start":1,"column_end":45}},{"value":"/   `DateTime::date` and other associated methods should return those for the original `Date`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":428183,"byte_end":428279,"line_start":40,"line_end":40,"column_start":1,"column_end":97}},{"value":"/   For example, if `dt = tz.ymd(y,m,d).hms(h,n,s)` were valid, `dt.date() == tz.ymd(y,m,d)`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":428280,"byte_end":428375,"line_start":41,"line_end":41,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":428376,"byte_end":428379,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ - The date is timezone-agnostic up to one day (i.e. practically always),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":428380,"byte_end":428456,"line_start":43,"line_end":43,"column_start":1,"column_end":77}},{"value":"/   so the local date and UTC date should be equal for most cases","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":428457,"byte_end":428524,"line_start":44,"line_end":44,"column_start":1,"column_end":68}},{"value":"/   even though the raw calculation between `NaiveDate` and `Duration` may not.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":428525,"byte_end":428606,"line_start":45,"line_end":45,"column_start":1,"column_end":82}}]},{"kind":"Const","id":{"krate":0,"index":1318},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":428747,"byte_end":428755,"line_start":53,"line_end":53,"column_start":11,"column_end":19},"name":"MIN_DATE","qualname":"::date::MIN_DATE","value":"Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `Date`.\n","sig":null,"attributes":[{"value":"/ The minimum possible `Date`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":428704,"byte_end":428736,"line_start":52,"line_end":52,"column_start":1,"column_end":33}}]},{"kind":"Const","id":{"krate":0,"index":1319},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":428857,"byte_end":428865,"line_start":55,"line_end":55,"column_start":11,"column_end":19},"name":"MAX_DATE","qualname":"::date::MAX_DATE","value":"Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `Date`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `Date`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":428814,"byte_end":428846,"line_start":54,"line_end":54,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1322},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":429213,"byte_end":429221,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<Date<Tz>>::from_utc","value":"pub fn from_utc(NaiveDate, Tz::Offset) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` with given *UTC* date and offset.\n The local date should be constructed via the `TimeZone` trait.\n","sig":null,"attributes":[{"value":"/ Makes a new `Date` with given *UTC* date and offset.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":428959,"byte_end":429015,"line_start":58,"line_end":58,"column_start":5,"column_end":61}},{"value":"/ The local date should be constructed via the `TimeZone` trait.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":429020,"byte_end":429086,"line_start":59,"line_end":59,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":429192,"byte_end":429201,"line_start":62,"line_end":62,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1323},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":429522,"byte_end":429530,"line_start":72,"line_end":72,"column_start":12,"column_end":20},"name":"and_time","qualname":"<Date<Tz>>::and_time","value":"pub fn and_time(&Self, NaiveTime) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date and given `NaiveTime`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":429328,"byte_end":429399,"line_start":67,"line_end":67,"column_start":5,"column_end":76}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":429404,"byte_end":429452,"line_start":68,"line_end":68,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":429457,"byte_end":429460,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid datetime.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":429465,"byte_end":429496,"line_start":70,"line_end":70,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":429501,"byte_end":429510,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1324},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":429927,"byte_end":429934,"line_start":82,"line_end":82,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<Date<Tz>>::and_hms","value":"pub fn and_hms(&Self, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":429712,"byte_end":429786,"line_start":77,"line_end":77,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":429791,"byte_end":429839,"line_start":78,"line_end":78,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":429844,"byte_end":429847,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":429852,"byte_end":429901,"line_start":80,"line_end":80,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":429906,"byte_end":429915,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1325},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":430289,"byte_end":430300,"line_start":91,"line_end":91,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<Date<Tz>>::and_hms_opt","value":"pub fn and_hms_opt(&Self, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":430066,"byte_end":430140,"line_start":86,"line_end":86,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":430145,"byte_end":430193,"line_start":87,"line_end":87,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":430198,"byte_end":430201,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":430206,"byte_end":430263,"line_start":89,"line_end":89,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":430268,"byte_end":430277,"line_start":90,"line_end":90,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1327},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":430787,"byte_end":430800,"line_start":101,"line_end":101,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<Date<Tz>>::and_hms_milli","value":"pub fn and_hms_milli(&Self, u32, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":430461,"byte_end":430548,"line_start":95,"line_end":95,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":430553,"byte_end":430633,"line_start":96,"line_end":96,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":430638,"byte_end":430686,"line_start":97,"line_end":97,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":430691,"byte_end":430694,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":430699,"byte_end":430761,"line_start":99,"line_end":99,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":430766,"byte_end":430775,"line_start":100,"line_end":100,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1328},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":431291,"byte_end":431308,"line_start":111,"line_end":111,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<Date<Tz>>::and_hms_milli_opt","value":"pub fn and_hms_milli_opt(&Self, u32, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":430957,"byte_end":431044,"line_start":105,"line_end":105,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":431049,"byte_end":431129,"line_start":106,"line_end":106,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":431134,"byte_end":431182,"line_start":107,"line_end":107,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":431187,"byte_end":431190,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":431195,"byte_end":431265,"line_start":109,"line_end":109,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":431270,"byte_end":431279,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1330},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":431871,"byte_end":431884,"line_start":127,"line_end":127,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<Date<Tz>>::and_hms_micro","value":"pub fn and_hms_micro(&Self, u32, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":431541,"byte_end":431628,"line_start":121,"line_end":121,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":431633,"byte_end":431717,"line_start":122,"line_end":122,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":431722,"byte_end":431770,"line_start":123,"line_end":123,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":431775,"byte_end":431778,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":431783,"byte_end":431845,"line_start":125,"line_end":125,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":431850,"byte_end":431859,"line_start":126,"line_end":126,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1331},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":432379,"byte_end":432396,"line_start":137,"line_end":137,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<Date<Tz>>::and_hms_micro_opt","value":"pub fn and_hms_micro_opt(&Self, u32, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":432041,"byte_end":432128,"line_start":131,"line_end":131,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":432133,"byte_end":432217,"line_start":132,"line_end":132,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":432222,"byte_end":432270,"line_start":133,"line_end":133,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":432275,"byte_end":432278,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":432283,"byte_end":432353,"line_start":135,"line_end":135,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":432358,"byte_end":432367,"line_start":136,"line_end":136,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1333},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":432960,"byte_end":432972,"line_start":153,"line_end":153,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<Date<Tz>>::and_hms_nano","value":"pub fn and_hms_nano(&Self, u32, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":432629,"byte_end":432715,"line_start":147,"line_end":147,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":432720,"byte_end":432807,"line_start":148,"line_end":148,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":432812,"byte_end":432860,"line_start":149,"line_end":149,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":432865,"byte_end":432868,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":432873,"byte_end":432934,"line_start":151,"line_end":151,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":432939,"byte_end":432948,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1334},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":433465,"byte_end":433481,"line_start":163,"line_end":163,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<Date<Tz>>::and_hms_nano_opt","value":"pub fn and_hms_nano_opt(&Self, u32, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":433126,"byte_end":433212,"line_start":157,"line_end":157,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":433217,"byte_end":433304,"line_start":158,"line_end":158,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":433309,"byte_end":433357,"line_start":159,"line_end":159,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":433362,"byte_end":433365,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":433370,"byte_end":433439,"line_start":161,"line_end":161,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":433444,"byte_end":433453,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1336},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":433845,"byte_end":433849,"line_start":177,"line_end":177,"column_start":12,"column_end":16},"name":"succ","qualname":"<Date<Tz>>::succ","value":"pub fn succ(&Self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the next date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":433711,"byte_end":433752,"line_start":173,"line_end":173,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":433757,"byte_end":433760,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the last representable date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":433765,"byte_end":433819,"line_start":175,"line_end":175,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":433824,"byte_end":433833,"line_start":176,"line_end":176,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1337},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":434071,"byte_end":434079,"line_start":185,"line_end":185,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<Date<Tz>>::succ_opt","value":"pub fn succ_opt(&Self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the next date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":433929,"byte_end":433970,"line_start":181,"line_end":181,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":433975,"byte_end":433978,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the last representable date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":433983,"byte_end":434045,"line_start":183,"line_end":183,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":434050,"byte_end":434059,"line_start":184,"line_end":184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1339},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":434339,"byte_end":434343,"line_start":193,"line_end":193,"column_start":12,"column_end":16},"name":"pred","qualname":"<Date<Tz>>::pred","value":"pub fn pred(&Self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the prior date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":434203,"byte_end":434245,"line_start":189,"line_end":189,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":434250,"byte_end":434253,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the first representable date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":434258,"byte_end":434313,"line_start":191,"line_end":191,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":434318,"byte_end":434327,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1340},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":434567,"byte_end":434575,"line_start":201,"line_end":201,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<Date<Tz>>::pred_opt","value":"pub fn pred_opt(&Self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the prior date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":434423,"byte_end":434465,"line_start":197,"line_end":197,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":434470,"byte_end":434473,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the first representable date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":434478,"byte_end":434541,"line_start":199,"line_end":199,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":434546,"byte_end":434555,"line_start":200,"line_end":200,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1342},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":434769,"byte_end":434775,"line_start":207,"line_end":207,"column_start":12,"column_end":18},"name":"offset","qualname":"<Date<Tz>>::offset","value":"pub fn offset(&Self) -> &Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated offset from UTC.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":434699,"byte_end":434743,"line_start":205,"line_end":205,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":434748,"byte_end":434757,"line_start":206,"line_end":206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1343},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":434896,"byte_end":434904,"line_start":213,"line_end":213,"column_start":12,"column_end":20},"name":"timezone","qualname":"<Date<Tz>>::timezone","value":"pub fn timezone(&Self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated time zone.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":434832,"byte_end":434870,"line_start":211,"line_end":211,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":434875,"byte_end":434884,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1344},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":435130,"byte_end":435143,"line_start":220,"line_end":220,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<Date<Tz>>::with_timezone","value":"pub fn with_timezone<Tz2: TimeZone>(&Self, &Tz2) -> Date<Tz2>","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n This does not change the actual `Date` (but will change the string representation).\n","sig":null,"attributes":[{"value":"/ Changes the associated time zone.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":434975,"byte_end":435012,"line_start":217,"line_end":217,"column_start":5,"column_end":42}},{"value":"/ This does not change the actual `Date` (but will change the string representation).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":435017,"byte_end":435104,"line_start":218,"line_end":218,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":435109,"byte_end":435118,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1346},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":435375,"byte_end":435393,"line_start":228,"line_end":228,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<Date<Tz>>::checked_add_signed","value":"pub fn checked_add_signed(Self, OldDuration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":435239,"byte_end":435285,"line_start":224,"line_end":224,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":435290,"byte_end":435293,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":435298,"byte_end":435349,"line_start":226,"line_end":226,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":435354,"byte_end":435363,"line_start":227,"line_end":227,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1347},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":435713,"byte_end":435731,"line_start":237,"line_end":237,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<Date<Tz>>::checked_sub_signed","value":"pub fn checked_sub_signed(Self, OldDuration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":435570,"byte_end":435623,"line_start":233,"line_end":233,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":435628,"byte_end":435631,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":435636,"byte_end":435687,"line_start":235,"line_end":235,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":435692,"byte_end":435701,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1348},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":436159,"byte_end":436180,"line_start":248,"line_end":248,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<Date<Tz>>::signed_duration_since","value":"pub fn signed_duration_since<Tz2: TimeZone>(Self, Date<Tz2>) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `Date` from the current date.\n Returns a `Duration` of integral numbers.","sig":null,"attributes":[{"value":"/ Subtracts another `Date` from the current date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":435908,"byte_end":435959,"line_start":242,"line_end":242,"column_start":5,"column_end":56}},{"value":"/ Returns a `Duration` of integral numbers.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":435964,"byte_end":436009,"line_start":243,"line_end":243,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":436014,"byte_end":436017,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ This does not overflow or underflow at all,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":436022,"byte_end":436069,"line_start":245,"line_end":245,"column_start":5,"column_end":52}},{"value":"/ as all possible output fits in the range of `Duration`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":436074,"byte_end":436133,"line_start":246,"line_end":246,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":436138,"byte_end":436147,"line_start":247,"line_end":247,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1350},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":436363,"byte_end":436372,"line_start":254,"line_end":254,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<Date<Tz>>::naive_utc","value":"pub fn naive_utc(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC date.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive UTC date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":436296,"byte_end":436337,"line_start":252,"line_end":252,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":436342,"byte_end":436351,"line_start":253,"line_end":253,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1351},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":436682,"byte_end":436693,"line_start":264,"line_end":264,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<Date<Tz>>::naive_local","value":"pub fn naive_local(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local date.","sig":null,"attributes":[{"value":"/ Returns a view to the naive local date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":436424,"byte_end":436467,"line_start":258,"line_end":258,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":436472,"byte_end":436475,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ This is technically the same as [`naive_utc`](#method.naive_utc)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":436480,"byte_end":436548,"line_start":260,"line_end":260,"column_start":5,"column_end":73}},{"value":"/ because the offset is restricted to never exceed one day,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":436553,"byte_end":436614,"line_start":261,"line_end":261,"column_start":5,"column_end":66}},{"value":"/ but provided for the consistency.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":436619,"byte_end":436656,"line_start":262,"line_end":262,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":436661,"byte_end":436670,"line_start":263,"line_end":263,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1358},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":437240,"byte_end":437257,"line_start":284,"line_end":284,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<Date<Tz>>::format_with_items","value":"pub fn format_with_items<'a, I, B>(&Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified formatting items.\n","sig":null,"attributes":[{"value":"/ Formats the date with the specified formatting items.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":437099,"byte_end":437156,"line_start":281,"line_end":281,"column_start":5,"column_end":62}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":437161,"byte_end":437214,"line_start":282,"line_end":282,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":437219,"byte_end":437228,"line_start":283,"line_end":283,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1362},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":437747,"byte_end":437753,"line_start":297,"line_end":297,"column_start":12,"column_end":18},"name":"format","qualname":"<Date<Tz>>::format","value":"pub fn format<'a>(&Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified format string.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.\n","sig":null,"attributes":[{"value":"/ Formats the date with the specified format string.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":437492,"byte_end":437546,"line_start":292,"line_end":292,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](./format/strftime/index.html)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":437551,"byte_end":437620,"line_start":293,"line_end":293,"column_start":5,"column_end":74}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":437625,"byte_end":437663,"line_start":294,"line_end":294,"column_start":5,"column_end":43}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":437668,"byte_end":437721,"line_start":295,"line_end":295,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":437726,"byte_end":437735,"line_start":296,"line_end":296,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2551},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":443888,"byte_end":443892,"line_start":40,"line_end":40,"column_start":5,"column_end":9},"name":"Secs","qualname":"::datetime::SecondsFormat::Secs","value":"SecondsFormat::Secs","parent":{"krate":0,"index":2550},"children":[],"decl_id":null,"docs":" Format whole seconds only, with no decimal point nor subseconds.\n","sig":null,"attributes":[{"value":"/ Format whole seconds only, with no decimal point nor subseconds.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":443815,"byte_end":443883,"line_start":39,"line_end":39,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2553},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":444031,"byte_end":444037,"line_start":44,"line_end":44,"column_start":5,"column_end":11},"name":"Millis","qualname":"::datetime::SecondsFormat::Millis","value":"SecondsFormat::Millis","parent":{"krate":0,"index":2550},"children":[],"decl_id":null,"docs":" Use fixed 3 subsecond digits. This corresponds to\n [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).\n","sig":null,"attributes":[{"value":"/ Use fixed 3 subsecond digits. This corresponds to","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":443899,"byte_end":443952,"line_start":42,"line_end":42,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":443957,"byte_end":444026,"line_start":43,"line_end":43,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2555},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":444176,"byte_end":444182,"line_start":48,"line_end":48,"column_start":5,"column_end":11},"name":"Micros","qualname":"::datetime::SecondsFormat::Micros","value":"SecondsFormat::Micros","parent":{"krate":0,"index":2550},"children":[],"decl_id":null,"docs":" Use fixed 6 subsecond digits. This corresponds to\n [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).\n","sig":null,"attributes":[{"value":"/ Use fixed 6 subsecond digits. This corresponds to","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":444044,"byte_end":444097,"line_start":46,"line_end":46,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":444102,"byte_end":444171,"line_start":47,"line_end":47,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2557},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":444321,"byte_end":444326,"line_start":52,"line_end":52,"column_start":5,"column_end":10},"name":"Nanos","qualname":"::datetime::SecondsFormat::Nanos","value":"SecondsFormat::Nanos","parent":{"krate":0,"index":2550},"children":[],"decl_id":null,"docs":" Use fixed 9 subsecond digits. This corresponds to\n [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).\n","sig":null,"attributes":[{"value":"/ Use fixed 9 subsecond digits. This corresponds to","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":444189,"byte_end":444242,"line_start":50,"line_end":50,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":444247,"byte_end":444316,"line_start":51,"line_end":51,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2559},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":444562,"byte_end":444568,"line_start":57,"line_end":57,"column_start":5,"column_end":11},"name":"AutoSi","qualname":"::datetime::SecondsFormat::AutoSi","value":"SecondsFormat::AutoSi","parent":{"krate":0,"index":2550},"children":[],"decl_id":null,"docs":" Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to\n display all available non-zero sub-second digits.  This corresponds to\n [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":444333,"byte_end":444406,"line_start":54,"line_end":54,"column_start":5,"column_end":78}},{"value":"/ display all available non-zero sub-second digits.  This corresponds to","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":444411,"byte_end":444485,"line_start":55,"line_end":55,"column_start":5,"column_end":79}},{"value":"/ [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":444490,"byte_end":444557,"line_start":56,"line_end":56,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2561},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":444628,"byte_end":444643,"line_start":61,"line_end":61,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::datetime::SecondsFormat::__NonExhaustive","value":"SecondsFormat::__NonExhaustive","parent":{"krate":0,"index":2550},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2550},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":443795,"byte_end":443808,"line_start":38,"line_end":38,"column_start":10,"column_end":23},"name":"SecondsFormat","qualname":"::datetime::SecondsFormat","value":"pub enum SecondsFormat {\n    Secs,\n    Millis,\n    Micros,\n    Nanos,\n    AutoSi,\n    __NonExhaustive,\n}","parent":null,"children":[{"krate":0,"index":2551},{"krate":0,"index":2553},{"krate":0,"index":2555},{"krate":0,"index":2557},{"krate":0,"index":2559},{"krate":0,"index":2561}],"decl_id":null,"docs":" Specific formatting options for seconds. This may be extended in the\n future, so exhaustive matching in external code is not recommended.","sig":null,"attributes":[{"value":"/ Specific formatting options for seconds. This may be extended in the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":443532,"byte_end":443604,"line_start":33,"line_end":33,"column_start":1,"column_end":73}},{"value":"/ future, so exhaustive matching in external code is not recommended.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":443605,"byte_end":443676,"line_start":34,"line_end":34,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":443677,"byte_end":443680,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ See the `TimeZone::to_rfc3339_opts` function for usage.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":443681,"byte_end":443740,"line_start":36,"line_end":36,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":2574},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":444941,"byte_end":444949,"line_start":70,"line_end":70,"column_start":12,"column_end":20},"name":"DateTime","qualname":"::datetime::DateTime","value":"DateTime {  }","parent":null,"children":[{"krate":0,"index":2576},{"krate":0,"index":2577}],"decl_id":null,"docs":" ISO 8601 combined date and time with time zone.","sig":null,"attributes":[{"value":"/ ISO 8601 combined date and time with time zone.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":444648,"byte_end":444699,"line_start":64,"line_end":64,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":444700,"byte_end":444703,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ There are some constructors implemented here (the `from_*` methods), but","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":444704,"byte_end":444780,"line_start":66,"line_end":66,"column_start":1,"column_end":77}},{"value":"/ the general-purpose constructors are all via the methods on the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":444781,"byte_end":444848,"line_start":67,"line_end":67,"column_start":1,"column_end":68}},{"value":"/ [`TimeZone`](./offset/trait.TimeZone.html) implementations.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":444849,"byte_end":444912,"line_start":68,"line_end":68,"column_start":1,"column_end":64}}]},{"kind":"Const","id":{"krate":0,"index":1532},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":445074,"byte_end":445086,"line_start":76,"line_end":76,"column_start":11,"column_end":23},"name":"MIN_DATETIME","qualname":"::datetime::MIN_DATETIME","value":"DateTime<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `DateTime<Utc>`.\n","sig":null,"attributes":[{"value":"/ The minimum possible `DateTime<Utc>`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":445022,"byte_end":445063,"line_start":75,"line_end":75,"column_start":1,"column_end":42}}]},{"kind":"Const","id":{"krate":0,"index":1533},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":445213,"byte_end":445225,"line_start":78,"line_end":78,"column_start":11,"column_end":23},"name":"MAX_DATETIME","qualname":"::datetime::MAX_DATETIME","value":"DateTime<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `DateTime<Utc>`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `DateTime<Utc>`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":445161,"byte_end":445202,"line_start":77,"line_end":77,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1536},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":445868,"byte_end":445876,"line_start":95,"line_end":95,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<DateTime<Tz>>::from_utc","value":"pub fn from_utc(NaiveDateTime, Tz::Offset) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` with given *UTC* datetime and offset.\n The local datetime should be constructed via the `TimeZone` trait.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` with given *UTC* datetime and offset.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":445339,"byte_end":445403,"line_start":81,"line_end":81,"column_start":5,"column_end":69}},{"value":"/ The local datetime should be constructed via the `TimeZone` trait.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":445408,"byte_end":445478,"line_start":82,"line_end":82,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":445483,"byte_end":445486,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":445491,"byte_end":445504,"line_start":84,"line_end":84,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":445509,"byte_end":445512,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":445517,"byte_end":445525,"line_start":86,"line_end":86,"column_start":5,"column_end":13}},{"value":"/ use chrono::{DateTime, TimeZone, NaiveDateTime, Utc};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":445530,"byte_end":445587,"line_start":87,"line_end":87,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":445592,"byte_end":445595,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ let dt = DateTime::<Utc>::from_utc(NaiveDateTime::from_timestamp(61, 0), Utc);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":445600,"byte_end":445682,"line_start":89,"line_end":89,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(Utc.timestamp(61, 0), dt);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":445687,"byte_end":445728,"line_start":90,"line_end":90,"column_start":5,"column_end":46}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":445733,"byte_end":445741,"line_start":91,"line_end":91,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":445847,"byte_end":445856,"line_start":94,"line_end":94,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1537},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":446064,"byte_end":446068,"line_start":101,"line_end":101,"column_start":12,"column_end":16},"name":"date","qualname":"<DateTime<Tz>>::date","value":"pub fn date(&Self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component.\n","sig":null,"attributes":[{"value":"/ Retrieves a date component.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":446007,"byte_end":446038,"line_start":99,"line_end":99,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":446043,"byte_end":446052,"line_start":100,"line_end":100,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1538},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":446293,"byte_end":446297,"line_start":108,"line_end":108,"column_start":12,"column_end":16},"name":"time","qualname":"<DateTime<Tz>>::time","value":"pub fn time(&Self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.\n Unlike `date`, this is not associated to the time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves a time component.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":446172,"byte_end":446203,"line_start":105,"line_end":105,"column_start":5,"column_end":36}},{"value":"/ Unlike `date`, this is not associated to the time zone.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":446208,"byte_end":446267,"line_start":106,"line_end":106,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":446272,"byte_end":446281,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1539},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":446514,"byte_end":446523,"line_start":115,"line_end":115,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<DateTime<Tz>>::timestamp","value":"pub fn timestamp(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n (aka \"UNIX timestamp\").\n","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":446380,"byte_end":446456,"line_start":112,"line_end":112,"column_start":5,"column_end":81}},{"value":"/ (aka \"UNIX timestamp\").","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":446461,"byte_end":446488,"line_start":113,"line_end":113,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":446493,"byte_end":446502,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1540},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":447344,"byte_end":447360,"line_start":139,"line_end":139,"column_start":12,"column_end":28},"name":"timestamp_millis","qualname":"<DateTime<Tz>>::timestamp_millis","value":"pub fn timestamp_millis(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-milliseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"/ Returns the number of non-leap-milliseconds since January 1, 1970 UTC","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":446585,"byte_end":446658,"line_start":119,"line_end":119,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":446663,"byte_end":446666,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ Note that this does reduce the number of years that can be represented","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":446671,"byte_end":446745,"line_start":121,"line_end":121,"column_start":5,"column_end":79}},{"value":"/ from ~584 Billion to ~584 Million. (If this is a problem, please file","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":446750,"byte_end":446823,"line_start":122,"line_end":122,"column_start":5,"column_end":78}},{"value":"/ an issue to let me know what domain needs millisecond precision over","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":446828,"byte_end":446900,"line_start":123,"line_end":123,"column_start":5,"column_end":77}},{"value":"/ billions of years, I'm curious.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":446905,"byte_end":446941,"line_start":124,"line_end":124,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":446946,"byte_end":446949,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":446954,"byte_end":446967,"line_start":126,"line_end":126,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":446972,"byte_end":446975,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":446980,"byte_end":446988,"line_start":128,"line_end":128,"column_start":5,"column_end":13}},{"value":"/ use chrono::Utc;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":446993,"byte_end":447013,"line_start":129,"line_end":129,"column_start":5,"column_end":25}},{"value":"/ use chrono::TimeZone;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":447018,"byte_end":447043,"line_start":130,"line_end":130,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":447048,"byte_end":447051,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 444);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":447056,"byte_end":447117,"line_start":132,"line_end":132,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_444);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":447122,"byte_end":447167,"line_start":133,"line_end":133,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":447172,"byte_end":447175,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(2001, 9, 9).and_hms_milli(1, 46, 40, 555);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":447180,"byte_end":447243,"line_start":135,"line_end":135,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_000_000_000_555);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":447248,"byte_end":447305,"line_start":136,"line_end":136,"column_start":5,"column_end":62}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":447310,"byte_end":447318,"line_start":137,"line_end":137,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":447323,"byte_end":447332,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1541},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":448182,"byte_end":448197,"line_start":163,"line_end":163,"column_start":12,"column_end":27},"name":"timestamp_nanos","qualname":"<DateTime<Tz>>::timestamp_nanos","value":"pub fn timestamp_nanos(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-nanoseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"/ Returns the number of non-leap-nanoseconds since January 1, 1970 UTC","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":447429,"byte_end":447501,"line_start":143,"line_end":143,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":447506,"byte_end":447509,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ Note that this does reduce the number of years that can be represented","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":447514,"byte_end":447588,"line_start":145,"line_end":145,"column_start":5,"column_end":79}},{"value":"/ from ~584 Billion to ~584. (If this is a problem, please file","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":447593,"byte_end":447658,"line_start":146,"line_end":146,"column_start":5,"column_end":70}},{"value":"/ an issue to let me know what domain needs nanosecond precision over","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":447663,"byte_end":447734,"line_start":147,"line_end":147,"column_start":5,"column_end":76}},{"value":"/ millennia, I'm curious.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":447739,"byte_end":447767,"line_start":148,"line_end":148,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":447772,"byte_end":447775,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":447780,"byte_end":447793,"line_start":150,"line_end":150,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":447798,"byte_end":447801,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":447806,"byte_end":447814,"line_start":152,"line_end":152,"column_start":5,"column_end":13}},{"value":"/ use chrono::Utc;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":447819,"byte_end":447839,"line_start":153,"line_end":153,"column_start":5,"column_end":25}},{"value":"/ use chrono::TimeZone;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":447844,"byte_end":447869,"line_start":154,"line_end":154,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":447874,"byte_end":447877,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(1970, 1, 1).and_hms_nano(0, 0, 1, 444);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":447882,"byte_end":447942,"line_start":156,"line_end":156,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_444);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":447947,"byte_end":447999,"line_start":157,"line_end":157,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":448004,"byte_end":448007,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(2001, 9, 9).and_hms_nano(1, 46, 40, 555);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":448012,"byte_end":448074,"line_start":159,"line_end":159,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_000_000_000_555);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":448079,"byte_end":448143,"line_start":160,"line_end":160,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":448148,"byte_end":448156,"line_start":161,"line_end":161,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":448161,"byte_end":448170,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1542},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":448527,"byte_end":448550,"line_start":173,"line_end":173,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<DateTime<Tz>>::timestamp_subsec_millis","value":"pub fn timestamp_subsec_millis(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of milliseconds since the last second boundary","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":448265,"byte_end":448334,"line_start":167,"line_end":167,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":448339,"byte_end":448342,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":448347,"byte_end":448406,"line_start":169,"line_end":169,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":448411,"byte_end":448414,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of milliseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":448419,"byte_end":448501,"line_start":171,"line_end":171,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":448506,"byte_end":448515,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1543},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":448892,"byte_end":448915,"line_start":183,"line_end":183,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<DateTime<Tz>>::timestamp_subsec_micros","value":"pub fn timestamp_subsec_micros(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of microseconds since the last second boundary","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":448626,"byte_end":448695,"line_start":177,"line_end":177,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":448700,"byte_end":448703,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999_999","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":448708,"byte_end":448771,"line_start":179,"line_end":179,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":448776,"byte_end":448779,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of microseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":448784,"byte_end":448866,"line_start":181,"line_end":181,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":448871,"byte_end":448880,"line_start":182,"line_end":182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1544},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":449259,"byte_end":449281,"line_start":193,"line_end":193,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<DateTime<Tz>>::timestamp_subsec_nanos","value":"pub fn timestamp_subsec_nanos(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the last second boundary","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":448991,"byte_end":449059,"line_start":187,"line_end":187,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":449064,"byte_end":449067,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999_999_999","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":449072,"byte_end":449139,"line_start":189,"line_end":189,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":449144,"byte_end":449147,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of nanoseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":449152,"byte_end":449233,"line_start":191,"line_end":191,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":449238,"byte_end":449247,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1545},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":449426,"byte_end":449432,"line_start":199,"line_end":199,"column_start":12,"column_end":18},"name":"offset","qualname":"<DateTime<Tz>>::offset","value":"pub fn offset(&Self) -> &Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated offset from UTC.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":449356,"byte_end":449400,"line_start":197,"line_end":197,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":449405,"byte_end":449414,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1546},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":449553,"byte_end":449561,"line_start":205,"line_end":205,"column_start":12,"column_end":20},"name":"timezone","qualname":"<DateTime<Tz>>::timezone","value":"pub fn timezone(&Self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated time zone.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":449489,"byte_end":449527,"line_start":203,"line_end":203,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":449532,"byte_end":449541,"line_start":204,"line_end":204,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1547},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":449791,"byte_end":449804,"line_start":212,"line_end":212,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<DateTime<Tz>>::with_timezone","value":"pub fn with_timezone<Tz2: TimeZone>(&Self, &Tz2) -> DateTime<Tz2>","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n This does not change the actual `DateTime` (but will change the string representation).\n","sig":null,"attributes":[{"value":"/ Changes the associated time zone.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":449632,"byte_end":449669,"line_start":209,"line_end":209,"column_start":5,"column_end":42}},{"value":"/ This does not change the actual `DateTime` (but will change the string representation).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":449674,"byte_end":449765,"line_start":210,"line_end":210,"column_start":5,"column_end":96}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":449770,"byte_end":449779,"line_start":211,"line_end":211,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1549},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":450057,"byte_end":450075,"line_start":220,"line_end":220,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<DateTime<Tz>>::checked_add_signed","value":"pub fn checked_add_signed(Self, OldDuration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date and time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":449912,"byte_end":449967,"line_start":216,"line_end":216,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":449972,"byte_end":449975,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":449980,"byte_end":450031,"line_start":218,"line_end":218,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":450036,"byte_end":450045,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1550},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":450441,"byte_end":450459,"line_start":230,"line_end":230,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<DateTime<Tz>>::checked_sub_signed","value":"pub fn checked_sub_signed(Self, OldDuration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date and time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":450289,"byte_end":450351,"line_start":226,"line_end":226,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":450356,"byte_end":450359,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":450364,"byte_end":450415,"line_start":228,"line_end":228,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":450420,"byte_end":450429,"line_start":229,"line_end":229,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1551},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":450815,"byte_end":450836,"line_start":239,"line_end":239,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<DateTime<Tz>>::signed_duration_since","value":"pub fn signed_duration_since<Tz2: TimeZone>(Self, DateTime<Tz2>)\n-> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `DateTime` from the current date and time.\n This does not overflow or underflow at all.\n","sig":null,"attributes":[{"value":"/ Subtracts another `DateTime` from the current date and time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":450673,"byte_end":450737,"line_start":236,"line_end":236,"column_start":5,"column_end":69}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":450742,"byte_end":450789,"line_start":237,"line_end":237,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":450794,"byte_end":450803,"line_start":238,"line_end":238,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1553},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":451035,"byte_end":451044,"line_start":245,"line_end":245,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<DateTime<Tz>>::naive_utc","value":"pub fn naive_utc(&Self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC datetime.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive UTC datetime.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":450964,"byte_end":451009,"line_start":243,"line_end":243,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":451014,"byte_end":451023,"line_start":244,"line_end":244,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1554},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":451177,"byte_end":451188,"line_start":251,"line_end":251,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<DateTime<Tz>>::naive_local","value":"pub fn naive_local(&Self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local datetime.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive local datetime.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":451104,"byte_end":451151,"line_start":249,"line_end":249,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":451156,"byte_end":451165,"line_start":250,"line_end":250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1572},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":454995,"byte_end":455013,"line_start":347,"line_end":347,"column_start":12,"column_end":30},"name":"parse_from_rfc2822","qualname":"<DateTime<FixedOffset>>::parse_from_rfc2822","value":"pub fn parse_from_rfc2822(&str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,\n then returns a new `DateTime` with a parsed `FixedOffset`.","sig":null,"attributes":[{"value":"/ Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":454421,"byte_end":454506,"line_start":334,"line_end":334,"column_start":5,"column_end":90}},{"value":"/ then returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":454511,"byte_end":454573,"line_start":335,"line_end":335,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":454578,"byte_end":454581,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ RFC 2822 is the internet message standard that specifices the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":454586,"byte_end":454651,"line_start":337,"line_end":337,"column_start":5,"column_end":70}},{"value":"/ representation of times in HTTP and email headers.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":454656,"byte_end":454710,"line_start":338,"line_end":338,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":454715,"byte_end":454718,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":454723,"byte_end":454730,"line_start":340,"line_end":340,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{DateTime, FixedOffset, TimeZone};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":454735,"byte_end":454787,"line_start":341,"line_end":341,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":454792,"byte_end":454807,"line_start":342,"line_end":342,"column_start":5,"column_end":20}},{"value":"/     DateTime::parse_from_rfc2822(\"Wed, 18 Feb 2015 23:16:09 GMT\").unwrap(),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":454812,"byte_end":454891,"line_start":343,"line_end":343,"column_start":5,"column_end":84}},{"value":"/     FixedOffset::east(0).ymd(2015, 2, 18).and_hms(23, 16, 9)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":454896,"byte_end":454960,"line_start":344,"line_end":344,"column_start":5,"column_end":69}},{"value":"/ );","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":454965,"byte_end":454971,"line_start":345,"line_end":345,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":454976,"byte_end":454983,"line_start":346,"line_end":346,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1574},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":455638,"byte_end":455656,"line_start":359,"line_end":359,"column_start":12,"column_end":30},"name":"parse_from_rfc3339","qualname":"<DateTime<FixedOffset>>::parse_from_rfc3339","value":"pub fn parse_from_rfc3339(&str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,\n then returns a new `DateTime` with a parsed `FixedOffset`.","sig":null,"attributes":[{"value":"/ Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":455269,"byte_end":455362,"line_start":354,"line_end":354,"column_start":5,"column_end":98}},{"value":"/ then returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":455367,"byte_end":455429,"line_start":355,"line_end":355,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":455434,"byte_end":455437,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ Why isn't this named `parse_from_iso8601`? That's because ISO 8601 allows some freedom","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":455442,"byte_end":455532,"line_start":357,"line_end":357,"column_start":5,"column_end":95}},{"value":"/ over the syntax and RFC 3339 exercises that freedom to rigidly define a fixed format.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":455537,"byte_end":455626,"line_start":358,"line_end":358,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1576},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":456864,"byte_end":456878,"line_start":386,"line_end":386,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<DateTime<FixedOffset>>::parse_from_str","value":"pub fn parse_from_str(&str, &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and\n returns a new `DateTime` with a parsed `FixedOffset`.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":455912,"byte_end":455968,"line_start":366,"line_end":366,"column_start":5,"column_end":61}},{"value":"/ returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":455973,"byte_end":456030,"line_start":367,"line_end":367,"column_start":5,"column_end":62}},{"value":"/ See the [`format::strftime` module](./format/strftime/index.html)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":456035,"byte_end":456104,"line_start":368,"line_end":368,"column_start":5,"column_end":74}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":456109,"byte_end":456147,"line_start":369,"line_end":369,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":456152,"byte_end":456155,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ See also `Offset::datetime_from_str` which gives a local `DateTime` on specific time zone.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":456160,"byte_end":456254,"line_start":371,"line_end":371,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":456259,"byte_end":456262,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ Note that this method *requires a timezone* in the string. See","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":456267,"byte_end":456333,"line_start":373,"line_end":373,"column_start":5,"column_end":71}},{"value":"/ [`NaiveDateTime::parse_from_str`](./naive/struct.NaiveDateTime.html#method.parse_from_str)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":456338,"byte_end":456432,"line_start":374,"line_end":374,"column_start":5,"column_end":99}},{"value":"/ for a version that does not require a timezone in the to-be-parsed str.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":456437,"byte_end":456512,"line_start":375,"line_end":375,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":456517,"byte_end":456520,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":456525,"byte_end":456538,"line_start":377,"line_end":377,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":456543,"byte_end":456546,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":456551,"byte_end":456562,"line_start":379,"line_end":379,"column_start":5,"column_end":16}},{"value":"/ use chrono::{DateTime, FixedOffset, TimeZone};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":456567,"byte_end":456617,"line_start":380,"line_end":380,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":456622,"byte_end":456625,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ let dt = DateTime::parse_from_str(","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":456630,"byte_end":456668,"line_start":382,"line_end":382,"column_start":5,"column_end":43}},{"value":"/     \"1983 Apr 13 12:09:14.274 +0000\", \"%Y %b %d %H:%M:%S%.3f %z\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":456673,"byte_end":456743,"line_start":383,"line_end":383,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(dt, Ok(FixedOffset::east(0).ymd(1983, 4, 13).and_hms_milli(12, 9, 14, 274)));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":456748,"byte_end":456840,"line_start":384,"line_end":384,"column_start":5,"column_end":97}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":456845,"byte_end":456852,"line_start":385,"line_end":385,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1579},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":457304,"byte_end":457314,"line_start":399,"line_end":399,"column_start":12,"column_end":22},"name":"to_rfc2822","qualname":"<DateTime<Tz>>::to_rfc2822","value":"pub fn to_rfc2822(&Self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.\n","sig":null,"attributes":[{"value":"/ Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":457148,"byte_end":457234,"line_start":397,"line_end":397,"column_start":5,"column_end":91}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":457239,"byte_end":457292,"line_start":398,"line_end":398,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1581},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":457646,"byte_end":457656,"line_start":406,"line_end":406,"column_start":12,"column_end":22},"name":"to_rfc3339","qualname":"<DateTime<Tz>>::to_rfc3339","value":"pub fn to_rfc3339(&Self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.\n","sig":null,"attributes":[{"value":"/ Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":457482,"byte_end":457576,"line_start":404,"line_end":404,"column_start":5,"column_end":99}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":457581,"byte_end":457634,"line_start":405,"line_end":405,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1583},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":459119,"byte_end":459134,"line_start":436,"line_end":436,"column_start":12,"column_end":27},"name":"to_rfc3339_opts","qualname":"<DateTime<Tz>>::to_rfc3339_opts","value":"pub fn to_rfc3339_opts(&Self, SecondsFormat, bool) -> String","parent":null,"children":[],"decl_id":null,"docs":" Return an RFC 3339 and ISO 8601 date and time string with subseconds\n formatted as per a `SecondsFormat`. If passed `use_z` true and the\n timezone is UTC (offset 0), use 'Z', as per\n [Fixed::TimezoneOffsetColonZ](format/enum.Fixed.html#variant.TimezoneOffsetColonZ).\n If passed `use_z` false, use\n [Fixed::TimezoneOffsetColon](format/enum.Fixed.html#variant.TimezoneOffsetColon).","sig":null,"attributes":[{"value":"/ Return an RFC 3339 and ISO 8601 date and time string with subseconds","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":457824,"byte_end":457896,"line_start":411,"line_end":411,"column_start":5,"column_end":77}},{"value":"/ formatted as per a `SecondsFormat`. If passed `use_z` true and the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":457901,"byte_end":457971,"line_start":412,"line_end":412,"column_start":5,"column_end":75}},{"value":"/ timezone is UTC (offset 0), use 'Z', as per","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":457976,"byte_end":458023,"line_start":413,"line_end":413,"column_start":5,"column_end":52}},{"value":"/ [Fixed::TimezoneOffsetColonZ](format/enum.Fixed.html#variant.TimezoneOffsetColonZ).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":458028,"byte_end":458115,"line_start":414,"line_end":414,"column_start":5,"column_end":92}},{"value":"/ If passed `use_z` false, use","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":458120,"byte_end":458152,"line_start":415,"line_end":415,"column_start":5,"column_end":37}},{"value":"/ [Fixed::TimezoneOffsetColon](format/enum.Fixed.html#variant.TimezoneOffsetColon).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":458157,"byte_end":458242,"line_start":416,"line_end":416,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":458247,"byte_end":458250,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":458255,"byte_end":458269,"line_start":418,"line_end":418,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":458274,"byte_end":458277,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":458282,"byte_end":458293,"line_start":420,"line_end":420,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{DateTime, FixedOffset, SecondsFormat, TimeZone, Utc};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":458298,"byte_end":458370,"line_start":421,"line_end":421,"column_start":5,"column_end":77}},{"value":"/ let dt = Utc.ymd(2018, 1, 26).and_hms_micro(18, 30, 9, 453_829);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":458375,"byte_end":458443,"line_start":422,"line_end":422,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Millis, false),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":458448,"byte_end":458512,"line_start":423,"line_end":423,"column_start":5,"column_end":69}},{"value":"/            \"2018-01-26T18:30:09.453+00:00\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":458517,"byte_end":458565,"line_start":424,"line_end":424,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Millis, true),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":458570,"byte_end":458633,"line_start":425,"line_end":425,"column_start":5,"column_end":68}},{"value":"/            \"2018-01-26T18:30:09.453Z\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":458638,"byte_end":458681,"line_start":426,"line_end":426,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Secs, true),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":458686,"byte_end":458747,"line_start":427,"line_end":427,"column_start":5,"column_end":66}},{"value":"/            \"2018-01-26T18:30:09Z\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":458752,"byte_end":458791,"line_start":428,"line_end":428,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":458796,"byte_end":458799,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ let pst = FixedOffset::east(8 * 60 * 60);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":458804,"byte_end":458849,"line_start":430,"line_end":430,"column_start":5,"column_end":50}},{"value":"/ let dt = pst.ymd(2018, 1, 26).and_hms_micro(10, 30, 9, 453_829);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":458854,"byte_end":458922,"line_start":431,"line_end":431,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Secs, true),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":458927,"byte_end":458988,"line_start":432,"line_end":432,"column_start":5,"column_end":66}},{"value":"/            \"2018-01-26T10:30:09+08:00\");","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":458993,"byte_end":459037,"line_start":433,"line_end":433,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":459042,"byte_end":459049,"line_start":434,"line_end":434,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":459054,"byte_end":459107,"line_start":435,"line_end":435,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1590},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":460744,"byte_end":460761,"line_start":481,"line_end":481,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<DateTime<Tz>>::format_with_items","value":"pub fn format_with_items<'a, I, B>(&Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified formatting items.\n","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified formatting items.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":460585,"byte_end":460660,"line_start":478,"line_end":478,"column_start":5,"column_end":80}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":460665,"byte_end":460718,"line_start":479,"line_end":479,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":460723,"byte_end":460732,"line_start":480,"line_end":480,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1594},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":461317,"byte_end":461323,"line_start":495,"line_end":495,"column_start":12,"column_end":18},"name":"format","qualname":"<DateTime<Tz>>::format","value":"pub fn format<'a>(&Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified format string.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.\n","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified format string.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":461044,"byte_end":461116,"line_start":490,"line_end":490,"column_start":5,"column_end":77}},{"value":"/ See the [`format::strftime` module](./format/strftime/index.html)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":461121,"byte_end":461190,"line_start":491,"line_end":491,"column_start":5,"column_end":74}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":461195,"byte_end":461233,"line_start":492,"line_end":492,"column_start":5,"column_end":43}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":461238,"byte_end":461291,"line_start":493,"line_end":493,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":461296,"byte_end":461305,"line_start":494,"line_end":494,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":1692},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"format","qualname":"::format","value":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","parent":null,"children":[{"krate":0,"index":1693},{"krate":0,"index":1696},{"krate":0,"index":1699},{"krate":0,"index":1702},{"krate":0,"index":1705},{"krate":0,"index":1706},{"krate":0,"index":1709},{"krate":0,"index":1712},{"krate":0,"index":1713},{"krate":0,"index":1716},{"krate":0,"index":1719},{"krate":0,"index":1720},{"krate":0,"index":1723},{"krate":0,"index":1726},{"krate":0,"index":1727},{"krate":0,"index":1730},{"krate":0,"index":1733},{"krate":0,"index":1736},{"krate":0,"index":1739},{"krate":0,"index":1742},{"krate":0,"index":1745},{"krate":0,"index":2581},{"krate":0,"index":2583},{"krate":0,"index":2585},{"krate":0,"index":2586},{"krate":0,"index":2588},{"krate":0,"index":2589},{"krate":0,"index":2591},{"krate":0,"index":2592},{"krate":0,"index":2594},{"krate":0,"index":2601},{"krate":0,"index":2602},{"krate":0,"index":2604},{"krate":0,"index":2605},{"krate":0,"index":2607},{"krate":0,"index":2608},{"krate":0,"index":2610},{"krate":0,"index":2612},{"krate":0,"index":2656},{"krate":0,"index":2658},{"krate":0,"index":2659},{"krate":0,"index":2662},{"krate":0,"index":2663},{"krate":0,"index":2665},{"krate":0,"index":1748},{"krate":0,"index":1750},{"krate":0,"index":1752},{"krate":0,"index":1754},{"krate":0,"index":1755},{"krate":0,"index":2667},{"krate":0,"index":2705},{"krate":0,"index":2707},{"krate":0,"index":2708},{"krate":0,"index":2711},{"krate":0,"index":2712},{"krate":0,"index":2714},{"krate":0,"index":2716},{"krate":0,"index":2718},{"krate":0,"index":2720},{"krate":0,"index":2722},{"krate":0,"index":2723},{"krate":0,"index":2726},{"krate":0,"index":2727},{"krate":0,"index":2729},{"krate":0,"index":2738},{"krate":0,"index":2740},{"krate":0,"index":2742},{"krate":0,"index":2743},{"krate":0,"index":2745},{"krate":0,"index":2746},{"krate":0,"index":2748},{"krate":0,"index":2771},{"krate":0,"index":2774},{"krate":0,"index":2776},{"krate":0,"index":2780},{"krate":0,"index":2782},{"krate":0,"index":2785},{"krate":0,"index":1757},{"krate":0,"index":1758},{"krate":0,"index":1759},{"krate":0,"index":1760},{"krate":0,"index":1761},{"krate":0,"index":1762},{"krate":0,"index":1763},{"krate":0,"index":2788},{"krate":0,"index":2791},{"krate":0,"index":2793},{"krate":0,"index":2795},{"krate":0,"index":2796},{"krate":0,"index":2799},{"krate":0,"index":2800},{"krate":0,"index":2802},{"krate":0,"index":2803},{"krate":0,"index":2818},{"krate":0,"index":2820},{"krate":0,"index":2822},{"krate":0,"index":2823},{"krate":0,"index":2825},{"krate":0,"index":2826},{"krate":0,"index":2828},{"krate":0,"index":1764},{"krate":0,"index":1766},{"krate":0,"index":1768},{"krate":0,"index":1770},{"krate":0,"index":1771},{"krate":0,"index":1772},{"krate":0,"index":1773},{"krate":0,"index":1774},{"krate":0,"index":1775},{"krate":0,"index":1776},{"krate":0,"index":1777},{"krate":0,"index":1779},{"krate":0,"index":1833},{"krate":0,"index":1837},{"krate":0,"index":1948},{"krate":0,"index":2063},{"krate":0,"index":2119},{"krate":0,"index":2879},{"krate":0,"index":2886},{"krate":0,"index":2162},{"krate":0,"index":2169},{"krate":0,"index":2174},{"krate":0,"index":2177}],"decl_id":null,"docs":" Formatting (and parsing) utilities for date and time.","sig":null,"attributes":[{"value":"/ Formatting (and parsing) utilities for date and time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":534639,"byte_end":534696,"line_start":4,"line_end":4,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":534697,"byte_end":534700,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This module provides the common types and routines to implement,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":534701,"byte_end":534769,"line_start":6,"line_end":6,"column_start":1,"column_end":69}},{"value":"/ for example, [`DateTime::format`](../struct.DateTime.html#method.format) or","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":534770,"byte_end":534849,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ [`DateTime::parse_from_str`](../struct.DateTime.html#method.parse_from_str) methods.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":534850,"byte_end":534938,"line_start":8,"line_end":8,"column_start":1,"column_end":89}},{"value":"/ For most cases you should use these high-level interfaces.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":534939,"byte_end":535001,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":535002,"byte_end":535005,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Internally the formatting and parsing shares the same abstract **formatting items**,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":535006,"byte_end":535094,"line_start":11,"line_end":11,"column_start":1,"column_end":89}},{"value":"/ which are just an [`Iterator`](https://doc.rust-lang.org/std/iter/trait.Iterator.html) of","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":535095,"byte_end":535188,"line_start":12,"line_end":12,"column_start":1,"column_end":94}},{"value":"/ the [`Item`](./enum.Item.html) type.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":535189,"byte_end":535229,"line_start":13,"line_end":13,"column_start":1,"column_end":41}},{"value":"/ They are generated from more readable **format strings**;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":535230,"byte_end":535291,"line_start":14,"line_end":14,"column_start":1,"column_end":62}},{"value":"/ currently Chrono supports [one built-in syntax closely resembling","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":535292,"byte_end":535361,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/ C's `strftime` format](./strftime/index.html).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":535362,"byte_end":535412,"line_start":16,"line_end":16,"column_start":1,"column_end":51}},{"value":"allow(ellipsis_inclusive_range_patterns)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":535414,"byte_end":535458,"line_start":18,"line_end":18,"column_start":1,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2595},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":536644,"byte_end":536648,"line_start":61,"line_end":61,"column_start":5,"column_end":9},"name":"None","qualname":"::format::Pad::None","value":"Pad::None","parent":{"krate":0,"index":2594},"children":[],"decl_id":null,"docs":" No padding.\n","sig":null,"attributes":[{"value":"/ No padding.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":536624,"byte_end":536639,"line_start":60,"line_end":60,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2597},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":536682,"byte_end":536686,"line_start":63,"line_end":63,"column_start":5,"column_end":9},"name":"Zero","qualname":"::format::Pad::Zero","value":"Pad::Zero","parent":{"krate":0,"index":2594},"children":[],"decl_id":null,"docs":" Zero (`0`) padding.\n","sig":null,"attributes":[{"value":"/ Zero (`0`) padding.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":536654,"byte_end":536677,"line_start":62,"line_end":62,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2599},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":536715,"byte_end":536720,"line_start":65,"line_end":65,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Pad::Space","value":"Pad::Space","parent":{"krate":0,"index":2594},"children":[],"decl_id":null,"docs":" Space padding.\n","sig":null,"attributes":[{"value":"/ Space padding.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":536692,"byte_end":536710,"line_start":64,"line_end":64,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":2594},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":536614,"byte_end":536617,"line_start":59,"line_end":59,"column_start":10,"column_end":13},"name":"Pad","qualname":"::format::Pad","value":"pub enum Pad { None, Zero, Space, }","parent":null,"children":[{"krate":0,"index":2595},{"krate":0,"index":2597},{"krate":0,"index":2599}],"decl_id":null,"docs":" Padding characters for numeric items.\n","sig":null,"attributes":[{"value":"/ Padding characters for numeric items.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":536518,"byte_end":536559,"line_start":57,"line_end":57,"column_start":1,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2613},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":537616,"byte_end":537620,"line_start":85,"line_end":85,"column_start":5,"column_end":9},"name":"Year","qualname":"::format::Numeric::Year","value":"Numeric::Year","parent":{"krate":0,"index":2612},"children":[],"decl_id":null,"docs":" Full Gregorian year (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[{"value":"/ Full Gregorian year (FW=4, PW=∞).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":537493,"byte_end":537532,"line_start":83,"line_end":83,"column_start":5,"column_end":42}},{"value":"/ May accept years before 1 BCE or after 9999 CE, given an initial sign.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":537537,"byte_end":537611,"line_start":84,"line_end":84,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2615},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":537722,"byte_end":537732,"line_start":87,"line_end":87,"column_start":5,"column_end":15},"name":"YearDiv100","qualname":"::format::Numeric::YearDiv100","value":"Numeric::YearDiv100","parent":{"krate":0,"index":2612},"children":[],"decl_id":null,"docs":" Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[{"value":"/ Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":537626,"byte_end":537717,"line_start":86,"line_end":86,"column_start":5,"column_end":96}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2617},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":537803,"byte_end":537813,"line_start":89,"line_end":89,"column_start":5,"column_end":15},"name":"YearMod100","qualname":"::format::Numeric::YearMod100","value":"Numeric::YearMod100","parent":{"krate":0,"index":2612},"children":[],"decl_id":null,"docs":" Gregorian year modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[{"value":"/ Gregorian year modulo 100 (FW=PW=2). Cannot be negative.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":537738,"byte_end":537798,"line_start":88,"line_end":88,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2619},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":537948,"byte_end":537955,"line_start":92,"line_end":92,"column_start":5,"column_end":12},"name":"IsoYear","qualname":"::format::Numeric::IsoYear","value":"Numeric::IsoYear","parent":{"krate":0,"index":2612},"children":[],"decl_id":null,"docs":" Year in the ISO week date (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date (FW=4, PW=∞).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":537819,"byte_end":537864,"line_start":90,"line_end":90,"column_start":5,"column_end":48}},{"value":"/ May accept years before 1 BCE or after 9999 CE, given an initial sign.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":537869,"byte_end":537943,"line_start":91,"line_end":91,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2621},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":538053,"byte_end":538066,"line_start":94,"line_end":94,"column_start":5,"column_end":18},"name":"IsoYearDiv100","qualname":"::format::Numeric::IsoYearDiv100","value":"Numeric::IsoYearDiv100","parent":{"krate":0,"index":2612},"children":[],"decl_id":null,"docs":" Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":537961,"byte_end":538048,"line_start":93,"line_end":93,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2623},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":538149,"byte_end":538162,"line_start":96,"line_end":96,"column_start":5,"column_end":18},"name":"IsoYearMod100","qualname":"::format::Numeric::IsoYearMod100","value":"Numeric::IsoYearMod100","parent":{"krate":0,"index":2612},"children":[],"decl_id":null,"docs":" Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":538072,"byte_end":538144,"line_start":95,"line_end":95,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2625},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":538193,"byte_end":538198,"line_start":98,"line_end":98,"column_start":5,"column_end":10},"name":"Month","qualname":"::format::Numeric::Month","value":"Numeric::Month","parent":{"krate":0,"index":2612},"children":[],"decl_id":null,"docs":" Month (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Month (FW=PW=2).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":538168,"byte_end":538188,"line_start":97,"line_end":97,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2627},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":538240,"byte_end":538243,"line_start":100,"line_end":100,"column_start":5,"column_end":8},"name":"Day","qualname":"::format::Numeric::Day","value":"Numeric::Day","parent":{"krate":0,"index":2612},"children":[],"decl_id":null,"docs":" Day of the month (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Day of the month (FW=PW=2).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":538204,"byte_end":538235,"line_start":99,"line_end":99,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2629},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":538336,"byte_end":538347,"line_start":102,"line_end":102,"column_start":5,"column_end":16},"name":"WeekFromSun","qualname":"::format::Numeric::WeekFromSun","value":"Numeric::WeekFromSun","parent":{"krate":0,"index":2612},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":538249,"byte_end":538331,"line_start":101,"line_end":101,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2631},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":538440,"byte_end":538451,"line_start":104,"line_end":104,"column_start":5,"column_end":16},"name":"WeekFromMon","qualname":"::format::Numeric::WeekFromMon","value":"Numeric::WeekFromMon","parent":{"krate":0,"index":2612},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Monday of January (FW=PW=2).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":538353,"byte_end":538435,"line_start":103,"line_end":103,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2633},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":538509,"byte_end":538516,"line_start":106,"line_end":106,"column_start":5,"column_end":12},"name":"IsoWeek","qualname":"::format::Numeric::IsoWeek","value":"Numeric::IsoWeek","parent":{"krate":0,"index":2612},"children":[],"decl_id":null,"docs":" Week number in the ISO week date (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number in the ISO week date (FW=PW=2).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":538457,"byte_end":538504,"line_start":105,"line_end":105,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2635},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":538592,"byte_end":538606,"line_start":108,"line_end":108,"column_start":5,"column_end":19},"name":"NumDaysFromSun","qualname":"::format::Numeric::NumDaysFromSun","value":"Numeric::NumDaysFromSun","parent":{"krate":0,"index":2612},"children":[],"decl_id":null,"docs":" Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).\n","sig":null,"attributes":[{"value":"/ Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":538522,"byte_end":538587,"line_start":107,"line_end":107,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2637},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":538680,"byte_end":538694,"line_start":110,"line_end":110,"column_start":5,"column_end":19},"name":"WeekdayFromMon","qualname":"::format::Numeric::WeekdayFromMon","value":"Numeric::WeekdayFromMon","parent":{"krate":0,"index":2612},"children":[],"decl_id":null,"docs":" Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).\n","sig":null,"attributes":[{"value":"/ Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":538612,"byte_end":538675,"line_start":109,"line_end":109,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2639},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":538735,"byte_end":538742,"line_start":112,"line_end":112,"column_start":5,"column_end":12},"name":"Ordinal","qualname":"::format::Numeric::Ordinal","value":"Numeric::Ordinal","parent":{"krate":0,"index":2612},"children":[],"decl_id":null,"docs":" Day of the year (FW=PW=3).\n","sig":null,"attributes":[{"value":"/ Day of the year (FW=PW=3).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":538700,"byte_end":538730,"line_start":111,"line_end":111,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2641},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":538801,"byte_end":538805,"line_start":114,"line_end":114,"column_start":5,"column_end":9},"name":"Hour","qualname":"::format::Numeric::Hour","value":"Numeric::Hour","parent":{"krate":0,"index":2612},"children":[],"decl_id":null,"docs":" Hour number in the 24-hour clocks (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Hour number in the 24-hour clocks (FW=PW=2).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":538748,"byte_end":538796,"line_start":113,"line_end":113,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2643},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":538864,"byte_end":538870,"line_start":116,"line_end":116,"column_start":5,"column_end":11},"name":"Hour12","qualname":"::format::Numeric::Hour12","value":"Numeric::Hour12","parent":{"krate":0,"index":2612},"children":[],"decl_id":null,"docs":" Hour number in the 12-hour clocks (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Hour number in the 12-hour clocks (FW=PW=2).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":538811,"byte_end":538859,"line_start":115,"line_end":115,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2645},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":538943,"byte_end":538949,"line_start":118,"line_end":118,"column_start":5,"column_end":11},"name":"Minute","qualname":"::format::Numeric::Minute","value":"Numeric::Minute","parent":{"krate":0,"index":2612},"children":[],"decl_id":null,"docs":" The number of minutes since the last whole hour (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ The number of minutes since the last whole hour (FW=PW=2).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":538876,"byte_end":538938,"line_start":117,"line_end":117,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2647},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":539024,"byte_end":539030,"line_start":120,"line_end":120,"column_start":5,"column_end":11},"name":"Second","qualname":"::format::Numeric::Second","value":"Numeric::Second","parent":{"krate":0,"index":2612},"children":[],"decl_id":null,"docs":" The number of seconds since the last whole minute (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ The number of seconds since the last whole minute (FW=PW=2).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":538955,"byte_end":539019,"line_start":119,"line_end":119,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2649},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":539233,"byte_end":539243,"line_start":124,"line_end":124,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Numeric::Nanosecond","value":"Numeric::Nanosecond","parent":{"krate":0,"index":2612},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the last whole second (FW=PW=9).\n Note that this is *not* left-aligned;\n see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ The number of nanoseconds since the last whole second (FW=PW=9).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":539036,"byte_end":539104,"line_start":121,"line_end":121,"column_start":5,"column_end":73}},{"value":"/ Note that this is *not* left-aligned;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":539109,"byte_end":539150,"line_start":122,"line_end":122,"column_start":5,"column_end":46}},{"value":"/ see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":539155,"byte_end":539228,"line_start":123,"line_end":123,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2651},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":539423,"byte_end":539432,"line_start":127,"line_end":127,"column_start":5,"column_end":14},"name":"Timestamp","qualname":"::format::Numeric::Timestamp","value":"Numeric::Timestamp","parent":{"krate":0,"index":2612},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).\n For formatting, it assumes UTC upon the absence of time zone offset.\n","sig":null,"attributes":[{"value":"/ The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":539249,"byte_end":539341,"line_start":125,"line_end":125,"column_start":5,"column_end":95}},{"value":"/ For formatting, it assumes UTC upon the absence of time zone offset.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":539346,"byte_end":539418,"line_start":126,"line_end":126,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2653},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":539651,"byte_end":539659,"line_start":133,"line_end":133,"column_start":5,"column_end":13},"name":"Internal","qualname":"::format::Numeric::Internal","value":"Numeric::Internal(InternalNumeric)","parent":{"krate":0,"index":2612},"children":[],"decl_id":null,"docs":" Internal uses only.","sig":null,"attributes":[{"value":"/ Internal uses only.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":539439,"byte_end":539462,"line_start":129,"line_end":129,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":539467,"byte_end":539470,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ This item exists so that one can add additional internal-only formatting","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":539475,"byte_end":539551,"line_start":131,"line_end":131,"column_start":5,"column_end":81}},{"value":"/ without breaking major compatibility (as enum variants cannot be selectively private).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":539556,"byte_end":539646,"line_start":132,"line_end":132,"column_start":5,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":2612},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":537479,"byte_end":537486,"line_start":82,"line_end":82,"column_start":10,"column_end":17},"name":"Numeric","qualname":"::format::Numeric","value":"pub enum Numeric {\n    Year,\n    YearDiv100,\n    YearMod100,\n    IsoYear,\n    IsoYearDiv100,\n    IsoYearMod100,\n    Month,\n    Day,\n    WeekFromSun,\n    WeekFromMon,\n    IsoWeek,\n    NumDaysFromSun,\n    WeekdayFromMon,\n    Ordinal,\n    Hour,\n    Hour12,\n    Minute,\n    Second,\n    Nanosecond,\n    Timestamp,\n    Internal(InternalNumeric),\n}","parent":null,"children":[{"krate":0,"index":2613},{"krate":0,"index":2615},{"krate":0,"index":2617},{"krate":0,"index":2619},{"krate":0,"index":2621},{"krate":0,"index":2623},{"krate":0,"index":2625},{"krate":0,"index":2627},{"krate":0,"index":2629},{"krate":0,"index":2631},{"krate":0,"index":2633},{"krate":0,"index":2635},{"krate":0,"index":2637},{"krate":0,"index":2639},{"krate":0,"index":2641},{"krate":0,"index":2643},{"krate":0,"index":2645},{"krate":0,"index":2647},{"krate":0,"index":2649},{"krate":0,"index":2651},{"krate":0,"index":2653}],"decl_id":null,"docs":" Numeric item types.\n They have associated formatting width (FW) and parsing width (PW).","sig":null,"attributes":[{"value":"/ Numeric item types.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":536725,"byte_end":536748,"line_start":68,"line_end":68,"column_start":1,"column_end":24}},{"value":"/ They have associated formatting width (FW) and parsing width (PW).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":536749,"byte_end":536819,"line_start":69,"line_end":69,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":536820,"byte_end":536823,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ The **formatting width** is the minimal width to be formatted.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":536824,"byte_end":536890,"line_start":71,"line_end":71,"column_start":1,"column_end":67}},{"value":"/ If the number is too short, and the padding is not [`Pad::None`](./enum.Pad.html#variant.None),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":536891,"byte_end":536990,"line_start":72,"line_end":72,"column_start":1,"column_end":100}},{"value":"/ then it is left-padded.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":536991,"byte_end":537018,"line_start":73,"line_end":73,"column_start":1,"column_end":28}},{"value":"/ If the number is too long or (in some cases) negative, it is printed as is.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":537019,"byte_end":537098,"line_start":74,"line_end":74,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":537099,"byte_end":537102,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ The **parsing width** is the maximal width to be scanned.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":537103,"byte_end":537164,"line_start":76,"line_end":76,"column_start":1,"column_end":62}},{"value":"/ The parser only tries to consume from one to given number of digits (greedily).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":537165,"byte_end":537248,"line_start":77,"line_end":77,"column_start":1,"column_end":84}},{"value":"/ It also trims the preceding whitespace if any.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":537249,"byte_end":537299,"line_start":78,"line_end":78,"column_start":1,"column_end":51}},{"value":"/ It cannot parse the negative number, so some date and time cannot be formatted then","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":537300,"byte_end":537387,"line_start":79,"line_end":79,"column_start":1,"column_end":88}},{"value":"/ parsed with the same formatting items.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":537388,"byte_end":537430,"line_start":80,"line_end":80,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1748},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":539767,"byte_end":539782,"line_start":137,"line_end":137,"column_start":12,"column_end":27},"name":"InternalNumeric","qualname":"::format::InternalNumeric","value":"InternalNumeric {  }","parent":null,"children":[{"krate":0,"index":1749}],"decl_id":null,"docs":" An opaque type representing numeric item types for internal uses only.\n","sig":null,"attributes":[{"value":"/ An opaque type representing numeric item types for internal uses only.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":539681,"byte_end":539755,"line_start":136,"line_end":136,"column_start":1,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2668},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":540580,"byte_end":540594,"line_start":170,"line_end":170,"column_start":5,"column_end":19},"name":"ShortMonthName","qualname":"::format::Fixed::ShortMonthName","value":"Fixed::ShortMonthName","parent":{"krate":0,"index":2667},"children":[],"decl_id":null,"docs":" Abbreviated month names.","sig":null,"attributes":[{"value":"/ Abbreviated month names.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":540447,"byte_end":540475,"line_start":167,"line_end":167,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":540480,"byte_end":540483,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ Prints a three-letter-long name in the title case, reads the same name in any case.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":540488,"byte_end":540575,"line_start":169,"line_end":169,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2670},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":540727,"byte_end":540740,"line_start":174,"line_end":174,"column_start":5,"column_end":18},"name":"LongMonthName","qualname":"::format::Fixed::LongMonthName","value":"Fixed::LongMonthName","parent":{"krate":0,"index":2667},"children":[],"decl_id":null,"docs":" Full month names.","sig":null,"attributes":[{"value":"/ Full month names.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":540600,"byte_end":540621,"line_start":171,"line_end":171,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":540626,"byte_end":540629,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ Prints a full name in the title case, reads either a short or full name in any case.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":540634,"byte_end":540722,"line_start":173,"line_end":173,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2672},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":540889,"byte_end":540905,"line_start":178,"line_end":178,"column_start":5,"column_end":21},"name":"ShortWeekdayName","qualname":"::format::Fixed::ShortWeekdayName","value":"Fixed::ShortWeekdayName","parent":{"krate":0,"index":2667},"children":[],"decl_id":null,"docs":" Abbreviated day of the week names.","sig":null,"attributes":[{"value":"/ Abbreviated day of the week names.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":540746,"byte_end":540784,"line_start":175,"line_end":175,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":540789,"byte_end":540792,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ Prints a three-letter-long name in the title case, reads the same name in any case.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":540797,"byte_end":540884,"line_start":177,"line_end":177,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2674},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":541048,"byte_end":541063,"line_start":182,"line_end":182,"column_start":5,"column_end":20},"name":"LongWeekdayName","qualname":"::format::Fixed::LongWeekdayName","value":"Fixed::LongWeekdayName","parent":{"krate":0,"index":2667},"children":[],"decl_id":null,"docs":" Full day of the week names.","sig":null,"attributes":[{"value":"/ Full day of the week names.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":540911,"byte_end":540942,"line_start":179,"line_end":179,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":540947,"byte_end":540950,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ Prints a full name in the title case, reads either a short or full name in any case.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":540955,"byte_end":541043,"line_start":181,"line_end":181,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2676},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":541141,"byte_end":541150,"line_start":186,"line_end":186,"column_start":5,"column_end":14},"name":"LowerAmPm","qualname":"::format::Fixed::LowerAmPm","value":"Fixed::LowerAmPm","parent":{"krate":0,"index":2667},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[{"value":"/ AM/PM.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":541069,"byte_end":541079,"line_start":183,"line_end":183,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":541084,"byte_end":541087,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ Prints in lower case, reads in any case.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":541092,"byte_end":541136,"line_start":185,"line_end":185,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2678},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":541228,"byte_end":541237,"line_start":190,"line_end":190,"column_start":5,"column_end":14},"name":"UpperAmPm","qualname":"::format::Fixed::UpperAmPm","value":"Fixed::UpperAmPm","parent":{"krate":0,"index":2667},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[{"value":"/ AM/PM.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":541156,"byte_end":541166,"line_start":187,"line_end":187,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":541171,"byte_end":541174,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ Prints in upper case, reads in any case.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":541179,"byte_end":541223,"line_start":189,"line_end":189,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2680},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":541484,"byte_end":541494,"line_start":194,"line_end":194,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Fixed::Nanosecond","value":"Fixed::Nanosecond","parent":{"krate":0,"index":2667},"children":[],"decl_id":null,"docs":" An optional dot plus one or more digits for left-aligned nanoseconds.\n May print nothing, 3, 6 or 9 digits according to the available accuracy.\n See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ An optional dot plus one or more digits for left-aligned nanoseconds.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":541243,"byte_end":541316,"line_start":191,"line_end":191,"column_start":5,"column_end":78}},{"value":"/ May print nothing, 3, 6 or 9 digits according to the available accuracy.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":541321,"byte_end":541397,"line_start":192,"line_end":192,"column_start":5,"column_end":81}},{"value":"/ See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":541402,"byte_end":541479,"line_start":193,"line_end":193,"column_start":5,"column_end":82}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2682},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":541584,"byte_end":541595,"line_start":196,"line_end":196,"column_start":5,"column_end":16},"name":"Nanosecond3","qualname":"::format::Fixed::Nanosecond3","value":"Fixed::Nanosecond3","parent":{"krate":0,"index":2667},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.\n","sig":null,"attributes":[{"value":"/ Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":541500,"byte_end":541579,"line_start":195,"line_end":195,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2684},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":541685,"byte_end":541696,"line_start":198,"line_end":198,"column_start":5,"column_end":16},"name":"Nanosecond6","qualname":"::format::Fixed::Nanosecond6","value":"Fixed::Nanosecond6","parent":{"krate":0,"index":2667},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.\n","sig":null,"attributes":[{"value":"/ Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":541601,"byte_end":541680,"line_start":197,"line_end":197,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2686},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":541786,"byte_end":541797,"line_start":200,"line_end":200,"column_start":5,"column_end":16},"name":"Nanosecond9","qualname":"::format::Fixed::Nanosecond9","value":"Fixed::Nanosecond9","parent":{"krate":0,"index":2667},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.\n","sig":null,"attributes":[{"value":"/ Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":541702,"byte_end":541781,"line_start":199,"line_end":199,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2688},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":541918,"byte_end":541930,"line_start":204,"line_end":204,"column_start":5,"column_end":17},"name":"TimezoneName","qualname":"::format::Fixed::TimezoneName","value":"Fixed::TimezoneName","parent":{"krate":0,"index":2667},"children":[],"decl_id":null,"docs":" Timezone name.","sig":null,"attributes":[{"value":"/ Timezone name.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":541803,"byte_end":541821,"line_start":201,"line_end":201,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":541826,"byte_end":541829,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ It does not support parsing, its use in the parser is an immediate failure.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":541834,"byte_end":541913,"line_start":203,"line_end":203,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2690},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":542265,"byte_end":542284,"line_start":210,"line_end":210,"column_start":5,"column_end":24},"name":"TimezoneOffsetColon","qualname":"::format::Fixed::TimezoneOffsetColon","value":"Fixed::TimezoneOffsetColon","parent":{"krate":0,"index":2667},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":541936,"byte_end":542009,"line_start":205,"line_end":205,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":542014,"byte_end":542017,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ In the parser, the colon can be omitted and/or surrounded with any amount of whitespace.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":542022,"byte_end":542114,"line_start":207,"line_end":207,"column_start":5,"column_end":97}},{"value":"/ The offset is limited from `-24:00` to `+24:00`,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":542119,"byte_end":542171,"line_start":208,"line_end":208,"column_start":5,"column_end":57}},{"value":"/ which is the same as [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":542176,"byte_end":542260,"line_start":209,"line_end":209,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2692},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":542676,"byte_end":542696,"line_start":217,"line_end":217,"column_start":5,"column_end":25},"name":"TimezoneOffsetColonZ","qualname":"::format::Fixed::TimezoneOffsetColonZ","value":"Fixed::TimezoneOffsetColonZ","parent":{"krate":0,"index":2667},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":542290,"byte_end":542358,"line_start":211,"line_end":211,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":542363,"byte_end":542366,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ In the parser, the colon can be omitted and/or surrounded with any amount of whitespace,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":542371,"byte_end":542463,"line_start":213,"line_end":213,"column_start":5,"column_end":97}},{"value":"/ and `Z` can be either in upper case or in lower case.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":542468,"byte_end":542525,"line_start":214,"line_end":214,"column_start":5,"column_end":62}},{"value":"/ The offset is limited from `-24:00` to `+24:00`,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":542530,"byte_end":542582,"line_start":215,"line_end":215,"column_start":5,"column_end":57}},{"value":"/ which is the same as [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":542587,"byte_end":542671,"line_start":216,"line_end":216,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2694},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":542835,"byte_end":542849,"line_start":220,"line_end":220,"column_start":5,"column_end":19},"name":"TimezoneOffset","qualname":"::format::Fixed::TimezoneOffset","value":"Fixed::TimezoneOffset","parent":{"krate":0,"index":2667},"children":[],"decl_id":null,"docs":" Same as [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[{"value":"/ Same as [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":542702,"byte_end":542788,"line_start":218,"line_end":218,"column_start":5,"column_end":91}},{"value":"/ Parsing allows an optional colon.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":542793,"byte_end":542830,"line_start":219,"line_end":219,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2696},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":542990,"byte_end":543005,"line_start":223,"line_end":223,"column_start":5,"column_end":20},"name":"TimezoneOffsetZ","qualname":"::format::Fixed::TimezoneOffsetZ","value":"Fixed::TimezoneOffsetZ","parent":{"krate":0,"index":2667},"children":[],"decl_id":null,"docs":" Same as [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[{"value":"/ Same as [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":542855,"byte_end":542943,"line_start":221,"line_end":221,"column_start":5,"column_end":93}},{"value":"/ Parsing allows an optional colon.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":542948,"byte_end":542985,"line_start":222,"line_end":222,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2698},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":543098,"byte_end":543105,"line_start":225,"line_end":225,"column_start":5,"column_end":12},"name":"RFC2822","qualname":"::format::Fixed::RFC2822","value":"Fixed::RFC2822","parent":{"krate":0,"index":2667},"children":[],"decl_id":null,"docs":" RFC 2822 date and time syntax. Commonly used for email and MIME date and time.\n","sig":null,"attributes":[{"value":"/ RFC 2822 date and time syntax. Commonly used for email and MIME date and time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":543011,"byte_end":543093,"line_start":224,"line_end":224,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2700},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":543161,"byte_end":543168,"line_start":227,"line_end":227,"column_start":5,"column_end":12},"name":"RFC3339","qualname":"::format::Fixed::RFC3339","value":"Fixed::RFC3339","parent":{"krate":0,"index":2667},"children":[],"decl_id":null,"docs":" RFC 3339 & ISO 8601 date and time syntax.\n","sig":null,"attributes":[{"value":"/ RFC 3339 & ISO 8601 date and time syntax.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":543111,"byte_end":543156,"line_start":226,"line_end":226,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2702},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":543387,"byte_end":543395,"line_start":233,"line_end":233,"column_start":5,"column_end":13},"name":"Internal","qualname":"::format::Fixed::Internal","value":"Fixed::Internal(InternalFixed)","parent":{"krate":0,"index":2667},"children":[],"decl_id":null,"docs":" Internal uses only.","sig":null,"attributes":[{"value":"/ Internal uses only.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":543175,"byte_end":543198,"line_start":229,"line_end":229,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":543203,"byte_end":543206,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ This item exists so that one can add additional internal-only formatting","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":543211,"byte_end":543287,"line_start":231,"line_end":231,"column_start":5,"column_end":81}},{"value":"/ without breaking major compatibility (as enum variants cannot be selectively private).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":543292,"byte_end":543382,"line_start":232,"line_end":232,"column_start":5,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":2667},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":540435,"byte_end":540440,"line_start":166,"line_end":166,"column_start":10,"column_end":15},"name":"Fixed","qualname":"::format::Fixed","value":"pub enum Fixed {\n    ShortMonthName,\n    LongMonthName,\n    ShortWeekdayName,\n    LongWeekdayName,\n    LowerAmPm,\n    UpperAmPm,\n    Nanosecond,\n    Nanosecond3,\n    Nanosecond6,\n    Nanosecond9,\n    TimezoneName,\n    TimezoneOffsetColon,\n    TimezoneOffsetColonZ,\n    TimezoneOffset,\n    TimezoneOffsetZ,\n    RFC2822,\n    RFC3339,\n    Internal(InternalFixed),\n}","parent":null,"children":[{"krate":0,"index":2668},{"krate":0,"index":2670},{"krate":0,"index":2672},{"krate":0,"index":2674},{"krate":0,"index":2676},{"krate":0,"index":2678},{"krate":0,"index":2680},{"krate":0,"index":2682},{"krate":0,"index":2684},{"krate":0,"index":2686},{"krate":0,"index":2688},{"krate":0,"index":2690},{"krate":0,"index":2692},{"krate":0,"index":2694},{"krate":0,"index":2696},{"krate":0,"index":2698},{"krate":0,"index":2700},{"krate":0,"index":2702}],"decl_id":null,"docs":" Fixed-format item types.","sig":null,"attributes":[{"value":"/ Fixed-format item types.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":540212,"byte_end":540240,"line_start":161,"line_end":161,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":540241,"byte_end":540244,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ They have their own rules of formatting and parsing.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":540245,"byte_end":540301,"line_start":163,"line_end":163,"column_start":1,"column_end":57}},{"value":"/ Otherwise noted, they print in the specified cases but parse case-insensitively.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":540302,"byte_end":540386,"line_start":164,"line_end":164,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":2716},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":543545,"byte_end":543558,"line_start":238,"line_end":238,"column_start":12,"column_end":25},"name":"InternalFixed","qualname":"::format::InternalFixed","value":"InternalFixed {  }","parent":null,"children":[{"krate":0,"index":2717}],"decl_id":null,"docs":" An opaque type representing fixed-format item types for internal uses only.\n","sig":null,"attributes":[{"value":"/ An opaque type representing fixed-format item types for internal uses only.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":543415,"byte_end":543494,"line_start":236,"line_end":236,"column_start":1,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2750},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":544574,"byte_end":544581,"line_start":265,"line_end":265,"column_start":5,"column_end":12},"name":"Literal","qualname":"::format::Item::Literal","value":"Item::Literal(&'a str)","parent":{"krate":0,"index":2748},"children":[],"decl_id":null,"docs":" A literally printed and parsed text.\n","sig":null,"attributes":[{"value":"/ A literally printed and parsed text.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":544529,"byte_end":544569,"line_start":264,"line_end":264,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2753},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":544719,"byte_end":544731,"line_start":268,"line_end":268,"column_start":5,"column_end":17},"name":"OwnedLiteral","qualname":"::format::Item::OwnedLiteral","value":"Item::OwnedLiteral(Box<str>)","parent":{"krate":0,"index":2748},"children":[],"decl_id":null,"docs":" Same as `Literal` but with the string owned by the item.\n","sig":null,"attributes":[{"value":"/ Same as `Literal` but with the string owned by the item.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":544596,"byte_end":544656,"line_start":266,"line_end":266,"column_start":5,"column_end":65}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":544661,"byte_end":544714,"line_start":267,"line_end":267,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2756},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":544819,"byte_end":544824,"line_start":270,"line_end":270,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Item::Space","value":"Item::Space(&'a str)","parent":{"krate":0,"index":2748},"children":[],"decl_id":null,"docs":" Whitespace. Prints literally but reads zero or more whitespace.\n","sig":null,"attributes":[{"value":"/ Whitespace. Prints literally but reads zero or more whitespace.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":544747,"byte_end":544814,"line_start":269,"line_end":269,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2759},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":544960,"byte_end":544970,"line_start":273,"line_end":273,"column_start":5,"column_end":15},"name":"OwnedSpace","qualname":"::format::Item::OwnedSpace","value":"Item::OwnedSpace(Box<str>)","parent":{"krate":0,"index":2748},"children":[],"decl_id":null,"docs":" Same as `Space` but with the string owned by the item.\n","sig":null,"attributes":[{"value":"/ Same as `Space` but with the string owned by the item.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":544839,"byte_end":544897,"line_start":271,"line_end":271,"column_start":5,"column_end":63}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":544902,"byte_end":544955,"line_start":272,"line_end":272,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2762},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":545149,"byte_end":545156,"line_start":276,"line_end":276,"column_start":5,"column_end":12},"name":"Numeric","qualname":"::format::Item::Numeric","value":"Item::Numeric(Numeric, Pad)","parent":{"krate":0,"index":2748},"children":[],"decl_id":null,"docs":" Numeric item. Can be optionally padded to the maximal length (if any) when formatting;\n the parser simply ignores any padded whitespace and zeroes.\n","sig":null,"attributes":[{"value":"/ Numeric item. Can be optionally padded to the maximal length (if any) when formatting;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":544986,"byte_end":545076,"line_start":274,"line_end":274,"column_start":5,"column_end":95}},{"value":"/ the parser simply ignores any padded whitespace and zeroes.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":545081,"byte_end":545144,"line_start":275,"line_end":275,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2766},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":545203,"byte_end":545208,"line_start":278,"line_end":278,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::format::Item::Fixed","value":"Item::Fixed(Fixed)","parent":{"krate":0,"index":2748},"children":[],"decl_id":null,"docs":" Fixed-format item.\n","sig":null,"attributes":[{"value":"/ Fixed-format item.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":545176,"byte_end":545198,"line_start":277,"line_end":277,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2769},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":545297,"byte_end":545302,"line_start":280,"line_end":280,"column_start":5,"column_end":10},"name":"Error","qualname":"::format::Item::Error","value":"Item::Error","parent":{"krate":0,"index":2748},"children":[],"decl_id":null,"docs":" Issues a formatting error. Used to signal an invalid format string.\n","sig":null,"attributes":[{"value":"/ Issues a formatting error. Used to signal an invalid format string.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":545221,"byte_end":545292,"line_start":279,"line_end":279,"column_start":5,"column_end":76}}]},{"kind":"Enum","id":{"krate":0,"index":2748},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":544514,"byte_end":544518,"line_start":263,"line_end":263,"column_start":10,"column_end":14},"name":"Item","qualname":"::format::Item","value":"pub enum Item<'a> {\n    Literal(&'a str),\n    OwnedLiteral(Box<str>),\n    Space(&'a str),\n    OwnedSpace(Box<str>),\n    Numeric(Numeric, Pad),\n    Fixed(Fixed),\n    Error,\n}","parent":null,"children":[{"krate":0,"index":2750},{"krate":0,"index":2753},{"krate":0,"index":2756},{"krate":0,"index":2759},{"krate":0,"index":2762},{"krate":0,"index":2766},{"krate":0,"index":2769}],"decl_id":null,"docs":" A single formatting item. This is used for both formatting and parsing.\n","sig":null,"attributes":[{"value":"/ A single formatting item. This is used for both formatting and parsing.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":544390,"byte_end":544465,"line_start":261,"line_end":261,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":2788},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":546050,"byte_end":546060,"line_start":321,"line_end":321,"column_start":12,"column_end":22},"name":"ParseError","qualname":"::format::ParseError","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error from the `parse` function.\n","sig":null,"attributes":[{"value":"/ An error from the `parse` function.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":545954,"byte_end":545993,"line_start":319,"line_end":319,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":1764},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":547328,"byte_end":547339,"line_start":356,"line_end":356,"column_start":10,"column_end":21},"name":"ParseResult","qualname":"::format::ParseResult","value":"Result<T, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Same as `Result<T, ParseError>`.\n","sig":null,"attributes":[{"value":"/ Same as `Result<T, ParseError>`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":547282,"byte_end":547318,"line_start":355,"line_end":355,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":1777},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":548909,"byte_end":548920,"line_start":391,"line_end":391,"column_start":8,"column_end":19},"name":"format_item","qualname":"::format::format_item","value":"pub fn format_item<'a>(&mut fmt::Formatter, Option<&NaiveDate>,\nOption<&NaiveTime>, Option<&(String, FixedOffset)>, &Item) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Formats single formatting item\n","sig":null,"attributes":[{"value":"/ Formats single formatting item","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":548813,"byte_end":548847,"line_start":389,"line_end":389,"column_start":1,"column_end":35}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":548848,"byte_end":548901,"line_start":390,"line_end":390,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":1833},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":562241,"byte_end":562247,"line_start":689,"line_end":689,"column_start":8,"column_end":14},"name":"format","qualname":"::format::format","value":"pub fn format<'a, I,\nB>(&mut fmt::Formatter, Option<&NaiveDate>, Option<&NaiveTime>,\nOption<&(String, FixedOffset)>, I) -> fmt::Result where I: Iterator<Item =\nB> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Tries to format given arguments with given formatting items.\n Internally used by `DelayedFormat`.\n","sig":null,"attributes":[{"value":"/ Tries to format given arguments with given formatting items.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":562075,"byte_end":562139,"line_start":686,"line_end":686,"column_start":1,"column_end":65}},{"value":"/ Internally used by `DelayedFormat`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":562140,"byte_end":562179,"line_start":687,"line_end":687,"column_start":1,"column_end":40}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":562180,"byte_end":562233,"line_start":688,"line_end":688,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":2829},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":570619,"byte_end":570625,"line_start":27,"line_end":27,"column_start":12,"column_end":18},"name":"Parsed","qualname":"::format::parsed::Parsed","value":"Parsed { year, year_div_100, year_mod_100, isoyear, isoyear_div_100, isoyear_mod_100, month, week_from_sun, week_from_mon, isoweek, weekday, ordinal, day, hour_div_12, hour_mod_12, minute, second, nanosecond, timestamp, offset }","parent":null,"children":[{"krate":0,"index":2830},{"krate":0,"index":2831},{"krate":0,"index":2832},{"krate":0,"index":2833},{"krate":0,"index":2834},{"krate":0,"index":2835},{"krate":0,"index":2836},{"krate":0,"index":2837},{"krate":0,"index":2838},{"krate":0,"index":2839},{"krate":0,"index":2840},{"krate":0,"index":2841},{"krate":0,"index":2842},{"krate":0,"index":2843},{"krate":0,"index":2844},{"krate":0,"index":2845},{"krate":0,"index":2846},{"krate":0,"index":2847},{"krate":0,"index":2848},{"krate":0,"index":2849},{"krate":0,"index":2850}],"decl_id":null,"docs":" Parsed parts of date and time. There are two classes of methods:","sig":null,"attributes":[{"value":"/ Parsed parts of date and time. There are two classes of methods:","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":570101,"byte_end":570169,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":570170,"byte_end":570173,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ - `set_*` methods try to set given field(s) while checking for the consistency.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":570174,"byte_end":570257,"line_start":20,"line_end":20,"column_start":1,"column_end":84}},{"value":"/   It may or may not check for the range constraint immediately (for efficiency reasons).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":570258,"byte_end":570350,"line_start":21,"line_end":21,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":570351,"byte_end":570354,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ - `to_*` methods try to make a concrete date and time value out of set fields.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":570355,"byte_end":570437,"line_start":23,"line_end":23,"column_start":1,"column_end":83}},{"value":"/   It fully checks any remaining out-of-range conditions and inconsistent/impossible fields.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":570438,"byte_end":570533,"line_start":24,"line_end":24,"column_start":1,"column_end":96}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":570534,"byte_end":570572,"line_start":25,"line_end":25,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":2830},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":570802,"byte_end":570806,"line_start":32,"line_end":32,"column_start":9,"column_end":13},"name":"year","qualname":"::format::parsed::Parsed::year","value":"std::option::Option<i32>","parent":{"krate":0,"index":2829},"children":[],"decl_id":null,"docs":" Year.","sig":null,"attributes":[{"value":"/ Year.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":570632,"byte_end":570641,"line_start":28,"line_end":28,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":570646,"byte_end":570649,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ This can be negative unlike [`year_div_100`](#structfield.year_div_100)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":570654,"byte_end":570729,"line_start":30,"line_end":30,"column_start":5,"column_end":80}},{"value":"/ and [`year_mod_100`](#structfield.year_mod_100) fields.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":570734,"byte_end":570793,"line_start":31,"line_end":31,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":2831},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":571110,"byte_end":571122,"line_start":39,"line_end":39,"column_start":9,"column_end":21},"name":"year_div_100","qualname":"::format::parsed::Parsed::year_div_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":2829},"children":[],"decl_id":null,"docs":" Year divided by 100. Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[{"value":"/ Year divided by 100. Implies that the year is >= 1 BCE when set.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":570826,"byte_end":570894,"line_start":34,"line_end":34,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":570899,"byte_end":570902,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ Due to the common usage, if this field is missing but","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":570907,"byte_end":570964,"line_start":36,"line_end":36,"column_start":5,"column_end":62}},{"value":"/ [`year_mod_100`](#structfield.year_mod_100) is present,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":570969,"byte_end":571028,"line_start":37,"line_end":37,"column_start":5,"column_end":64}},{"value":"/ it is inferred to 19 when `year_mod_100 >= 70` and 20 otherwise.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":571033,"byte_end":571101,"line_start":38,"line_end":38,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":2832},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":571215,"byte_end":571227,"line_start":42,"line_end":42,"column_start":9,"column_end":21},"name":"year_mod_100","qualname":"::format::parsed::Parsed::year_mod_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":2829},"children":[],"decl_id":null,"docs":" Year modulo 100. Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[{"value":"/ Year modulo 100. Implies that the year is >= 1 BCE when set.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":571142,"byte_end":571206,"line_start":41,"line_end":41,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":2833},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":571494,"byte_end":571501,"line_start":48,"line_end":48,"column_start":9,"column_end":16},"name":"isoyear","qualname":"::format::parsed::Parsed::isoyear","value":"std::option::Option<i32>","parent":{"krate":0,"index":2829},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date).","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":571247,"byte_end":571321,"line_start":44,"line_end":44,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":571326,"byte_end":571329,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This can be negative unlike [`isoyear_div_100`](#structfield.isoyear_div_100) and","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":571334,"byte_end":571419,"line_start":46,"line_end":46,"column_start":5,"column_end":90}},{"value":"/ [`isoyear_mod_100`](#structfield.isoyear_mod_100) fields.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":571424,"byte_end":571485,"line_start":47,"line_end":47,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":2834},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":571888,"byte_end":571903,"line_start":56,"line_end":56,"column_start":9,"column_end":24},"name":"isoyear_div_100","qualname":"::format::parsed::Parsed::isoyear_div_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":2829},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), divided by 100.\n Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), divided by 100.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":571521,"byte_end":571611,"line_start":50,"line_end":50,"column_start":5,"column_end":95}},{"value":"/ Implies that the year is >= 1 BCE when set.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":571616,"byte_end":571663,"line_start":51,"line_end":51,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":571668,"byte_end":571671,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Due to the common usage, if this field is missing but","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":571676,"byte_end":571733,"line_start":53,"line_end":53,"column_start":5,"column_end":62}},{"value":"/ [`isoyear_mod_100`](#structfield.isoyear_mod_100) is present,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":571738,"byte_end":571803,"line_start":54,"line_end":54,"column_start":5,"column_end":70}},{"value":"/ it is inferred to 19 when `isoyear_mod_100 >= 70` and 20 otherwise.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":571808,"byte_end":571879,"line_start":55,"line_end":55,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":2835},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":572070,"byte_end":572085,"line_start":60,"line_end":60,"column_start":9,"column_end":24},"name":"isoyear_mod_100","qualname":"::format::parsed::Parsed::isoyear_mod_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":2829},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), modulo 100.\n Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), modulo 100.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":571923,"byte_end":572009,"line_start":58,"line_end":58,"column_start":5,"column_end":91}},{"value":"/ Implies that the year is >= 1 BCE when set.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":572014,"byte_end":572061,"line_start":59,"line_end":59,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":2836},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":572132,"byte_end":572137,"line_start":63,"line_end":63,"column_start":9,"column_end":14},"name":"month","qualname":"::format::parsed::Parsed::month","value":"std::option::Option<u32>","parent":{"krate":0,"index":2829},"children":[],"decl_id":null,"docs":" Month (1--12).\n","sig":null,"attributes":[{"value":"/ Month (1--12).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":572105,"byte_end":572123,"line_start":62,"line_end":62,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":2837},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":572292,"byte_end":572305,"line_start":67,"line_end":67,"column_start":9,"column_end":22},"name":"week_from_sun","qualname":"::format::parsed::Parsed::week_from_sun","value":"std::option::Option<u32>","parent":{"krate":0,"index":2829},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Sunday of January","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":572157,"byte_end":572228,"line_start":65,"line_end":65,"column_start":5,"column_end":76}},{"value":"/ (0--53, 1--53 or 1--52 depending on the year).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":572233,"byte_end":572283,"line_start":66,"line_end":66,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":2838},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":572460,"byte_end":572473,"line_start":71,"line_end":71,"column_start":9,"column_end":22},"name":"week_from_mon","qualname":"::format::parsed::Parsed::week_from_mon","value":"std::option::Option<u32>","parent":{"krate":0,"index":2829},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Monday of January","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":572325,"byte_end":572396,"line_start":69,"line_end":69,"column_start":5,"column_end":76}},{"value":"/ (0--53, 1--53 or 1--52 depending on the year).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":572401,"byte_end":572451,"line_start":70,"line_end":70,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":2839},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":572613,"byte_end":572620,"line_start":75,"line_end":75,"column_start":9,"column_end":16},"name":"isoweek","qualname":"::format::parsed::Parsed::isoweek","value":"std::option::Option<u32>","parent":{"krate":0,"index":2829},"children":[],"decl_id":null,"docs":" [ISO week number](../naive/struct.NaiveDate.html#week-date)\n (1--52 or 1--53 depending on the year).\n","sig":null,"attributes":[{"value":"/ [ISO week number](../naive/struct.NaiveDate.html#week-date)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":572493,"byte_end":572556,"line_start":73,"line_end":73,"column_start":5,"column_end":68}},{"value":"/ (1--52 or 1--53 depending on the year).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":572561,"byte_end":572604,"line_start":74,"line_end":74,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":2840},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":572669,"byte_end":572676,"line_start":78,"line_end":78,"column_start":9,"column_end":16},"name":"weekday","qualname":"::format::parsed::Parsed::weekday","value":"std::option::Option<Weekday>","parent":{"krate":0,"index":2829},"children":[],"decl_id":null,"docs":" Day of the week.\n","sig":null,"attributes":[{"value":"/ Day of the week.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":572640,"byte_end":572660,"line_start":77,"line_end":77,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":2841},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":572770,"byte_end":572777,"line_start":81,"line_end":81,"column_start":9,"column_end":16},"name":"ordinal","qualname":"::format::parsed::Parsed::ordinal","value":"std::option::Option<u32>","parent":{"krate":0,"index":2829},"children":[],"decl_id":null,"docs":" Day of the year (1--365 or 1--366 depending on the year).\n","sig":null,"attributes":[{"value":"/ Day of the year (1--365 or 1--366 depending on the year).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":572700,"byte_end":572761,"line_start":80,"line_end":80,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":2842},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":572881,"byte_end":572884,"line_start":84,"line_end":84,"column_start":9,"column_end":12},"name":"day","qualname":"::format::parsed::Parsed::day","value":"std::option::Option<u32>","parent":{"krate":0,"index":2829},"children":[],"decl_id":null,"docs":" Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).\n","sig":null,"attributes":[{"value":"/ Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":572797,"byte_end":572872,"line_start":83,"line_end":83,"column_start":5,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":2843},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":572985,"byte_end":572996,"line_start":87,"line_end":87,"column_start":9,"column_end":20},"name":"hour_div_12","qualname":"::format::parsed::Parsed::hour_div_12","value":"std::option::Option<u32>","parent":{"krate":0,"index":2829},"children":[],"decl_id":null,"docs":" Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.\n","sig":null,"attributes":[{"value":"/ Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":572904,"byte_end":572976,"line_start":86,"line_end":86,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":2844},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":573059,"byte_end":573070,"line_start":90,"line_end":90,"column_start":9,"column_end":20},"name":"hour_mod_12","qualname":"::format::parsed::Parsed::hour_mod_12","value":"std::option::Option<u32>","parent":{"krate":0,"index":2829},"children":[],"decl_id":null,"docs":" Hour number modulo 12 (0--11).\n","sig":null,"attributes":[{"value":"/ Hour number modulo 12 (0--11).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":573016,"byte_end":573050,"line_start":89,"line_end":89,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":2845},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":573125,"byte_end":573131,"line_start":93,"line_end":93,"column_start":9,"column_end":15},"name":"minute","qualname":"::format::parsed::Parsed::minute","value":"std::option::Option<u32>","parent":{"krate":0,"index":2829},"children":[],"decl_id":null,"docs":" Minute number (0--59).\n","sig":null,"attributes":[{"value":"/ Minute number (0--59).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":573090,"byte_end":573116,"line_start":92,"line_end":92,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":2846},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":573215,"byte_end":573221,"line_start":96,"line_end":96,"column_start":9,"column_end":15},"name":"second","qualname":"::format::parsed::Parsed::second","value":"std::option::Option<u32>","parent":{"krate":0,"index":2829},"children":[],"decl_id":null,"docs":" Second number (0--60, accounting for leap seconds).\n","sig":null,"attributes":[{"value":"/ Second number (0--60, accounting for leap seconds).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":573151,"byte_end":573206,"line_start":95,"line_end":95,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":2847},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":573320,"byte_end":573330,"line_start":99,"line_end":99,"column_start":9,"column_end":19},"name":"nanosecond","qualname":"::format::parsed::Parsed::nanosecond","value":"std::option::Option<u32>","parent":{"krate":0,"index":2829},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the whole second (0--999,999,999).\n","sig":null,"attributes":[{"value":"/ The number of nanoseconds since the whole second (0--999,999,999).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":573241,"byte_end":573311,"line_start":98,"line_end":98,"column_start":5,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":2848},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":573533,"byte_end":573542,"line_start":104,"line_end":104,"column_start":9,"column_end":18},"name":"timestamp","qualname":"::format::parsed::Parsed::timestamp","value":"std::option::Option<i64>","parent":{"krate":0,"index":2829},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970.","sig":null,"attributes":[{"value":"/ The number of non-leap seconds since the midnight UTC on January 1, 1970.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":573350,"byte_end":573427,"line_start":101,"line_end":101,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":573432,"byte_end":573435,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ This can be off by one if [`second`](#structfield.second) is 60 (a leap second).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":573440,"byte_end":573524,"line_start":103,"line_end":103,"column_start":5,"column_end":89}}]},{"kind":"Field","id":{"krate":0,"index":2849},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":573621,"byte_end":573627,"line_start":107,"line_end":107,"column_start":9,"column_end":15},"name":"offset","qualname":"::format::parsed::Parsed::offset","value":"std::option::Option<i32>","parent":{"krate":0,"index":2829},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC, in seconds.\n","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC, in seconds.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":573562,"byte_end":573612,"line_start":106,"line_end":106,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1901},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":574956,"byte_end":574959,"line_start":159,"line_end":159,"column_start":12,"column_end":15},"name":"new","qualname":"<Parsed>::new","value":"pub fn new() -> Parsed","parent":null,"children":[],"decl_id":null,"docs":" Returns the initial value of parsed parts.\n","sig":null,"attributes":[{"value":"/ Returns the initial value of parsed parts.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":574898,"byte_end":574944,"line_start":158,"line_end":158,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1902},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":575109,"byte_end":575117,"line_start":165,"line_end":165,"column_start":12,"column_end":20},"name":"set_year","qualname":"<Parsed>::set_year","value":"pub fn set_year(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year`](#structfield.year) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year`](#structfield.year) field from given value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":575011,"byte_end":575083,"line_start":163,"line_end":163,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":575088,"byte_end":575097,"line_start":164,"line_end":164,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1903},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":575366,"byte_end":575382,"line_start":171,"line_end":171,"column_start":12,"column_end":28},"name":"set_year_div_100","qualname":"<Parsed>::set_year_div_100","value":"pub fn set_year_div_100(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":575252,"byte_end":575340,"line_start":169,"line_end":169,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":575345,"byte_end":575354,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1904},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":575710,"byte_end":575726,"line_start":180,"line_end":180,"column_start":12,"column_end":28},"name":"set_year_mod_100","qualname":"<Parsed>::set_year_mod_100","value":"pub fn set_year_mod_100(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":575596,"byte_end":575684,"line_start":178,"line_end":178,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":575689,"byte_end":575698,"line_start":179,"line_end":179,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1905},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":576044,"byte_end":576055,"line_start":189,"line_end":189,"column_start":12,"column_end":23},"name":"set_isoyear","qualname":"<Parsed>::set_isoyear","value":"pub fn set_isoyear(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear`](#structfield.isoyear) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear`](#structfield.isoyear) field from given value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":575940,"byte_end":576018,"line_start":187,"line_end":187,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":576023,"byte_end":576032,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1906},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":576313,"byte_end":576332,"line_start":195,"line_end":195,"column_start":12,"column_end":31},"name":"set_isoyear_div_100","qualname":"<Parsed>::set_isoyear_div_100","value":"pub fn set_isoyear_div_100(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":576193,"byte_end":576287,"line_start":193,"line_end":193,"column_start":5,"column_end":99}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":576292,"byte_end":576301,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1907},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":576669,"byte_end":576688,"line_start":204,"line_end":204,"column_start":12,"column_end":31},"name":"set_isoyear_mod_100","qualname":"<Parsed>::set_isoyear_mod_100","value":"pub fn set_isoyear_mod_100(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":576549,"byte_end":576643,"line_start":202,"line_end":202,"column_start":5,"column_end":99}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":576648,"byte_end":576657,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1908},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":577005,"byte_end":577014,"line_start":213,"line_end":213,"column_start":12,"column_end":21},"name":"set_month","qualname":"<Parsed>::set_month","value":"pub fn set_month(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`month`](#structfield.month) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`month`](#structfield.month) field from given value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":576905,"byte_end":576979,"line_start":211,"line_end":211,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":576984,"byte_end":576993,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1909},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":577266,"byte_end":577283,"line_start":219,"line_end":219,"column_start":12,"column_end":29},"name":"set_week_from_sun","qualname":"<Parsed>::set_week_from_sun","value":"pub fn set_week_from_sun(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":577150,"byte_end":577240,"line_start":217,"line_end":217,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":577245,"byte_end":577254,"line_start":218,"line_end":218,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1910},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":577543,"byte_end":577560,"line_start":225,"line_end":225,"column_start":12,"column_end":29},"name":"set_week_from_mon","qualname":"<Parsed>::set_week_from_mon","value":"pub fn set_week_from_mon(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":577427,"byte_end":577517,"line_start":223,"line_end":223,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":577522,"byte_end":577531,"line_start":224,"line_end":224,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1911},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":577808,"byte_end":577819,"line_start":231,"line_end":231,"column_start":12,"column_end":23},"name":"set_isoweek","qualname":"<Parsed>::set_isoweek","value":"pub fn set_isoweek(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoweek`](#structfield.isoweek) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoweek`](#structfield.isoweek) field from given value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":577704,"byte_end":577782,"line_start":229,"line_end":229,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":577787,"byte_end":577796,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1912},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":578061,"byte_end":578072,"line_start":237,"line_end":237,"column_start":12,"column_end":23},"name":"set_weekday","qualname":"<Parsed>::set_weekday","value":"pub fn set_weekday(&mut Self, Weekday) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`weekday`](#structfield.weekday) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`weekday`](#structfield.weekday) field from given value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":577957,"byte_end":578035,"line_start":235,"line_end":235,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":578040,"byte_end":578049,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1913},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":578288,"byte_end":578299,"line_start":243,"line_end":243,"column_start":12,"column_end":23},"name":"set_ordinal","qualname":"<Parsed>::set_ordinal","value":"pub fn set_ordinal(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`ordinal`](#structfield.ordinal) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`ordinal`](#structfield.ordinal) field from given value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":578184,"byte_end":578262,"line_start":241,"line_end":241,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":578267,"byte_end":578276,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1914},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":578533,"byte_end":578540,"line_start":249,"line_end":249,"column_start":12,"column_end":19},"name":"set_day","qualname":"<Parsed>::set_day","value":"pub fn set_day(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`day`](#structfield.day) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`day`](#structfield.day) field from given value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":578437,"byte_end":578507,"line_start":247,"line_end":247,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":578512,"byte_end":578521,"line_start":248,"line_end":248,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1915},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":578826,"byte_end":578834,"line_start":256,"line_end":256,"column_start":12,"column_end":20},"name":"set_ampm","qualname":"<Parsed>::set_ampm","value":"pub fn set_ampm(&mut Self, bool) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.\n (`false` for AM, `true` for PM)\n","sig":null,"attributes":[{"value":"/ Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":578674,"byte_end":578760,"line_start":253,"line_end":253,"column_start":5,"column_end":91}},{"value":"/ (`false` for AM, `true` for PM)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":578765,"byte_end":578800,"line_start":254,"line_end":254,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":578805,"byte_end":578814,"line_start":255,"line_end":255,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1916},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":579111,"byte_end":579121,"line_start":263,"line_end":263,"column_start":12,"column_end":22},"name":"set_hour12","qualname":"<Parsed>::set_hour12","value":"pub fn set_hour12(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from\n given hour number in 12-hour clocks.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":578967,"byte_end":579040,"line_start":260,"line_end":260,"column_start":5,"column_end":78}},{"value":"/ given hour number in 12-hour clocks.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":579045,"byte_end":579085,"line_start":261,"line_end":261,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":579090,"byte_end":579099,"line_start":262,"line_end":262,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1917},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":579498,"byte_end":579506,"line_start":273,"line_end":273,"column_start":12,"column_end":20},"name":"set_hour","qualname":"<Parsed>::set_hour","value":"pub fn set_hour(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set both [`hour_div_12`](#structfield.hour_div_12) and\n [`hour_mod_12`](#structfield.hour_mod_12) fields from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set both [`hour_div_12`](#structfield.hour_div_12) and","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":579330,"byte_end":579397,"line_start":270,"line_end":270,"column_start":5,"column_end":72}},{"value":"/ [`hour_mod_12`](#structfield.hour_mod_12) fields from given value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":579402,"byte_end":579472,"line_start":271,"line_end":271,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":579477,"byte_end":579486,"line_start":272,"line_end":272,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1918},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":579850,"byte_end":579860,"line_start":282,"line_end":282,"column_start":12,"column_end":22},"name":"set_minute","qualname":"<Parsed>::set_minute","value":"pub fn set_minute(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`minute`](#structfield.minute) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`minute`](#structfield.minute) field from given value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":579748,"byte_end":579824,"line_start":280,"line_end":280,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":579829,"byte_end":579838,"line_start":281,"line_end":281,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1919},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":580099,"byte_end":580109,"line_start":288,"line_end":288,"column_start":12,"column_end":22},"name":"set_second","qualname":"<Parsed>::set_second","value":"pub fn set_second(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`second`](#structfield.second) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`second`](#structfield.second) field from given value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":579997,"byte_end":580073,"line_start":286,"line_end":286,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":580078,"byte_end":580087,"line_start":287,"line_end":287,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1920},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":580356,"byte_end":580370,"line_start":294,"line_end":294,"column_start":12,"column_end":26},"name":"set_nanosecond","qualname":"<Parsed>::set_nanosecond","value":"pub fn set_nanosecond(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":580246,"byte_end":580330,"line_start":292,"line_end":292,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":580335,"byte_end":580344,"line_start":293,"line_end":293,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1921},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":580619,"byte_end":580632,"line_start":300,"line_end":300,"column_start":12,"column_end":25},"name":"set_timestamp","qualname":"<Parsed>::set_timestamp","value":"pub fn set_timestamp(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`timestamp`](#structfield.timestamp) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`timestamp`](#structfield.timestamp) field from given value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":580511,"byte_end":580593,"line_start":298,"line_end":298,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":580598,"byte_end":580607,"line_start":299,"line_end":299,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1922},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":580844,"byte_end":580854,"line_start":306,"line_end":306,"column_start":12,"column_end":22},"name":"set_offset","qualname":"<Parsed>::set_offset","value":"pub fn set_offset(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`offset`](#structfield.offset) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`offset`](#structfield.offset) field from given value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":580742,"byte_end":580818,"line_start":304,"line_end":304,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":580823,"byte_end":580832,"line_start":305,"line_end":305,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1923},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":581498,"byte_end":581511,"line_start":321,"line_end":321,"column_start":12,"column_end":25},"name":"to_naive_date","qualname":"<Parsed>::to_naive_date","value":"pub fn to_naive_date(&Self) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed naive date out of given fields.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":580991,"byte_end":581043,"line_start":310,"line_end":310,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":581048,"byte_end":581051,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the date from given subset of fields:","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":581056,"byte_end":581130,"line_start":312,"line_end":312,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":581135,"byte_end":581138,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ - Year, month, day.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":581143,"byte_end":581166,"line_start":314,"line_end":314,"column_start":5,"column_end":28}},{"value":"/ - Year, day of the year (ordinal).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":581171,"byte_end":581209,"line_start":315,"line_end":315,"column_start":5,"column_end":43}},{"value":"/ - Year, week number counted from Sunday or Monday, day of the week.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":581214,"byte_end":581285,"line_start":316,"line_end":316,"column_start":5,"column_end":76}},{"value":"/ - ISO week date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":581290,"byte_end":581310,"line_start":317,"line_end":317,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":581315,"byte_end":581318,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ Gregorian year and ISO week date year can have their century number (`*_div_100`) omitted,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":581323,"byte_end":581417,"line_start":319,"line_end":319,"column_start":5,"column_end":99}},{"value":"/ the two-digit year is used to guess the century number then.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":581422,"byte_end":581486,"line_start":320,"line_end":320,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1931},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":590830,"byte_end":590843,"line_start":529,"line_end":529,"column_start":12,"column_end":25},"name":"to_naive_time","qualname":"<Parsed>::to_naive_time","value":"pub fn to_naive_time(&Self) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive time out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed naive time out of given fields.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":590427,"byte_end":590479,"line_start":520,"line_end":520,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":590484,"byte_end":590487,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the time from given subset of fields:","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":590492,"byte_end":590566,"line_start":522,"line_end":522,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":590571,"byte_end":590574,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ - Hour, minute. (second and nanosecond assumed to be 0)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":590579,"byte_end":590638,"line_start":524,"line_end":524,"column_start":5,"column_end":64}},{"value":"/ - Hour, minute, second. (nanosecond assumed to be 0)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":590643,"byte_end":590699,"line_start":525,"line_end":525,"column_start":5,"column_end":61}},{"value":"/ - Hour, minute, second, nanosecond.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":590704,"byte_end":590743,"line_start":526,"line_end":526,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":590748,"byte_end":590751,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ It is able to handle leap seconds when given second is 60.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":590756,"byte_end":590818,"line_start":528,"line_end":528,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1932},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":592626,"byte_end":592655,"line_start":571,"line_end":571,"column_start":12,"column_end":41},"name":"to_naive_datetime_with_offset","qualname":"<Parsed>::to_naive_datetime_with_offset","value":"pub fn to_naive_datetime_with_offset(&Self, i32) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date and time out of given fields,\n except for the [`offset`](#structfield.offset) field (assumed to have a given value).\n This is required for parsing a local time or other known-timezone inputs.","sig":null,"attributes":[{"value":"/ Returns a parsed naive date and time out of given fields,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":592141,"byte_end":592202,"line_start":564,"line_end":564,"column_start":5,"column_end":66}},{"value":"/ except for the [`offset`](#structfield.offset) field (assumed to have a given value).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":592207,"byte_end":592296,"line_start":565,"line_end":565,"column_start":5,"column_end":94}},{"value":"/ This is required for parsing a local time or other known-timezone inputs.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":592301,"byte_end":592378,"line_start":566,"line_end":566,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":592383,"byte_end":592386,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":592391,"byte_end":592454,"line_start":568,"line_end":568,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":592459,"byte_end":592545,"line_start":569,"line_end":569,"column_start":5,"column_end":91}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":592550,"byte_end":592614,"line_start":570,"line_end":570,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1943},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":596073,"byte_end":596088,"line_start":644,"line_end":644,"column_start":12,"column_end":27},"name":"to_fixed_offset","qualname":"<Parsed>::to_fixed_offset","value":"pub fn to_fixed_offset(&Self) -> ParseResult<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed fixed time zone offset out of given fields.\n","sig":null,"attributes":[{"value":"/ Returns a parsed fixed time zone offset out of given fields.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":595997,"byte_end":596061,"line_start":643,"line_end":643,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1944},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":596560,"byte_end":596571,"line_start":654,"line_end":654,"column_start":12,"column_end":23},"name":"to_datetime","qualname":"<Parsed>::to_datetime","value":"pub fn to_datetime(&Self) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed timezone-aware date and time out of given fields.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":596209,"byte_end":596279,"line_start":648,"line_end":648,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":596284,"byte_end":596287,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":596292,"byte_end":596355,"line_start":650,"line_end":650,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":596360,"byte_end":596446,"line_start":651,"line_end":651,"column_start":5,"column_end":91}},{"value":"/ plus a time zone offset.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":596451,"byte_end":596479,"line_start":652,"line_end":652,"column_start":5,"column_end":33}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":596484,"byte_end":596548,"line_start":653,"line_end":653,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1945},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":597599,"byte_end":597624,"line_start":674,"line_end":674,"column_start":12,"column_end":37},"name":"to_datetime_with_timezone","qualname":"<Parsed>::to_datetime_with_timezone","value":"pub fn to_datetime_with_timezone<Tz: TimeZone>(&Self, &Tz)\n-> ParseResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields,\n with an additional `TimeZone` used to interpret and validate the local date.","sig":null,"attributes":[{"value":"/ Returns a parsed timezone-aware date and time out of given fields,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":597042,"byte_end":597112,"line_start":665,"line_end":665,"column_start":5,"column_end":75}},{"value":"/ with an additional `TimeZone` used to interpret and validate the local date.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":597117,"byte_end":597197,"line_start":666,"line_end":666,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":597202,"byte_end":597205,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":597210,"byte_end":597273,"line_start":668,"line_end":668,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":597278,"byte_end":597364,"line_start":669,"line_end":669,"column_start":5,"column_end":91}},{"value":"/ plus a time zone offset.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":597369,"byte_end":597397,"line_start":670,"line_end":670,"column_start":5,"column_end":33}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":597402,"byte_end":597466,"line_start":671,"line_end":671,"column_start":5,"column_end":69}},{"value":"/ If parsed fields include an UTC offset, it also has to be consistent to","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":597471,"byte_end":597546,"line_start":672,"line_end":672,"column_start":5,"column_end":80}},{"value":"/ [`offset`](#structfield.offset).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":597551,"byte_end":597587,"line_start":673,"line_end":673,"column_start":5,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":2030},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":634766,"byte_end":634771,"line_start":234,"line_end":234,"column_start":8,"column_end":13},"name":"parse","qualname":"::format::parse::parse","value":"pub fn parse<'a, I, B>(&mut Parsed, &str, I) -> ParseResult<()> where\nI: Iterator<Item = B>, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Tries to parse given string into `parsed` with given formatting items.\n Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).\n There should be no trailing string after parsing;\n use a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.","sig":null,"attributes":[{"value":"/ Tries to parse given string into `parsed` with given formatting items.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":633863,"byte_end":633937,"line_start":218,"line_end":218,"column_start":1,"column_end":75}},{"value":"/ Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":633938,"byte_end":634034,"line_start":219,"line_end":219,"column_start":1,"column_end":97}},{"value":"/ There should be no trailing string after parsing;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":634035,"byte_end":634088,"line_start":220,"line_end":220,"column_start":1,"column_end":54}},{"value":"/ use a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":634089,"byte_end":634173,"line_start":221,"line_end":221,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":634174,"byte_end":634177,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ This particular date and time parser is:","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":634178,"byte_end":634222,"line_start":223,"line_end":223,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":634223,"byte_end":634226,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ - Greedy. It will consume the longest possible prefix.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":634227,"byte_end":634285,"line_start":225,"line_end":225,"column_start":1,"column_end":59}},{"value":"/   For example, `April` is always consumed entirely when the long month name is requested;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":634286,"byte_end":634379,"line_start":226,"line_end":226,"column_start":1,"column_end":94}},{"value":"/   it equally accepts `Apr`, but prefers the longer prefix in this case.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":634380,"byte_end":634455,"line_start":227,"line_end":227,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":634456,"byte_end":634459,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ - Padding-agnostic (for numeric items).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":634460,"byte_end":634503,"line_start":229,"line_end":229,"column_start":1,"column_end":44}},{"value":"/   The [`Pad`](./enum.Pad.html) field is completely ignored,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":634504,"byte_end":634567,"line_start":230,"line_end":230,"column_start":1,"column_end":64}},{"value":"/   so one can prepend any number of whitespace then any number of zeroes before numbers.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":634568,"byte_end":634659,"line_start":231,"line_end":231,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":634660,"byte_end":634663,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ - (Still) obeying the intrinsic parsing width. This allows, for example, parsing `HHMMSS`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":634664,"byte_end":634758,"line_start":233,"line_end":233,"column_start":1,"column_end":95}}]},{"kind":"Mod","id":{"krate":0,"index":2119},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\strftime.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"strftime","qualname":"::format::strftime","value":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\strftime.rs","parent":null,"children":[{"krate":0,"index":2120},{"krate":0,"index":2121},{"krate":0,"index":2124},{"krate":0,"index":2127},{"krate":0,"index":2130},{"krate":0,"index":2133},{"krate":0,"index":2136},{"krate":0,"index":2139},{"krate":0,"index":2141},{"krate":0,"index":2142},{"krate":0,"index":2143},{"krate":0,"index":2860},{"krate":0,"index":2867},{"krate":0,"index":2870},{"krate":0,"index":2144},{"krate":0,"index":2150},{"krate":0,"index":2151}],"decl_id":null,"docs":"`strftime`/`strptime`-inspired date and time formatting syntax.","sig":null,"attributes":[{"value":"*\n`strftime`/`strptime`-inspired date and time formatting syntax.\n\n## Specifiers\n\nThe following specifiers are available both to formatting and parsing.\n\n| Spec. | Example  | Description                                                                |\n|-------|----------|----------------------------------------------------------------------------|\n|       |          | **DATE SPECIFIERS:**                                                       |\n| `%Y`  | `2001`   | The full proleptic Gregorian year, zero-padded to 4 digits. [^1]           |\n| `%C`  | `20`     | The proleptic Gregorian year divided by 100, zero-padded to 2 digits. [^2] |\n| `%y`  | `01`     | The proleptic Gregorian year modulo 100, zero-padded to 2 digits. [^2]     |\n|       |          |                                                                            |\n| `%m`  | `07`     | Month number (01--12), zero-padded to 2 digits.                            |\n| `%b`  | `Jul`    | Abbreviated month name. Always 3 letters.                                  |\n| `%B`  | `July`   | Full month name. Also accepts corresponding abbreviation in parsing.       |\n| `%h`  | `Jul`    | Same as `%b`.                                                              |\n|       |          |                                                                            |\n| `%d`  | `08`     | Day number (01--31), zero-padded to 2 digits.                              |\n| `%e`  | ` 8`     | Same as `%d` but space-padded. Same as `%_d`.                              |\n|       |          |                                                                            |\n| `%a`  | `Sun`    | Abbreviated weekday name. Always 3 letters.                                |\n| `%A`  | `Sunday` | Full weekday name. Also accepts corresponding abbreviation in parsing.     |\n| `%w`  | `0`      | Sunday = 0, Monday = 1, ..., Saturday = 6.                                 |\n| `%u`  | `7`      | Monday = 1, Tuesday = 2, ..., Sunday = 7. (ISO 8601)                       |\n|       |          |                                                                            |\n| `%U`  | `28`     | Week number starting with Sunday (00--53), zero-padded to 2 digits. [^3]   |\n| `%W`  | `27`     | Same as `%U`, but week 1 starts with the first Monday in that year instead.|\n|       |          |                                                                            |\n| `%G`  | `2001`   | Same as `%Y` but uses the year number in ISO 8601 week date. [^4]          |\n| `%g`  | `01`     | Same as `%y` but uses the year number in ISO 8601 week date. [^4]          |\n| `%V`  | `27`     | Same as `%U` but uses the week number in ISO 8601 week date (01--53). [^4] |\n|       |          |                                                                            |\n| `%j`  | `189`    | Day of the year (001--366), zero-padded to 3 digits.                       |\n|       |          |                                                                            |\n| `%D`  | `07/08/01`    | Month-day-year format. Same as `%m/%d/%y`.                            |\n| `%x`  | `07/08/01`    | Locale's date representation (e.g., 12/31/99).                        |\n| `%F`  | `2001-07-08`  | Year-month-day format (ISO 8601). Same as `%Y-%m-%d`.                 |\n| `%v`  | ` 8-Jul-2001` | Day-month-year format. Same as `%e-%b-%Y`.                            |\n|       |          |                                                                            |\n|       |          | **TIME SPECIFIERS:**                                                       |\n| `%H`  | `00`     | Hour number (00--23), zero-padded to 2 digits.                             |\n| `%k`  | ` 0`     | Same as `%H` but space-padded. Same as `%_H`.                              |\n| `%I`  | `12`     | Hour number in 12-hour clocks (01--12), zero-padded to 2 digits.           |\n| `%l`  | `12`     | Same as `%I` but space-padded. Same as `%_I`.                              |\n|       |          |                                                                            |\n| `%P`  | `am`     | `am` or `pm` in 12-hour clocks.                                            |\n| `%p`  | `AM`     | `AM` or `PM` in 12-hour clocks.                                            |\n|       |          |                                                                            |\n| `%M`  | `34`     | Minute number (00--59), zero-padded to 2 digits.                           |\n| `%S`  | `60`     | Second number (00--60), zero-padded to 2 digits. [^5]                      |\n| `%f`  | `026490000`   | The fractional seconds (in nanoseconds) since last whole second. [^8] |\n| `%.f` | `.026490`| Similar to `.%f` but left-aligned. These all consume the leading dot. [^8] |\n| `%.3f`| `.026`        | Similar to `.%f` but left-aligned but fixed to a length of 3. [^8]    |\n| `%.6f`| `.026490`     | Similar to `.%f` but left-aligned but fixed to a length of 6. [^8]    |\n| `%.9f`| `.026490000`  | Similar to `.%f` but left-aligned but fixed to a length of 9. [^8]    |\n| `%3f` | `026`         | Similar to `%.3f` but without the leading dot. [^8]                   |\n| `%6f` | `026490`      | Similar to `%.6f` but without the leading dot. [^8]                   |\n| `%9f` | `026490000`   | Similar to `%.9f` but without the leading dot. [^8]                   |\n|       |               |                                                                       |\n| `%R`  | `00:34`       | Hour-minute format. Same as `%H:%M`.                                  |\n| `%T`  | `00:34:60`    | Hour-minute-second format. Same as `%H:%M:%S`.                        |\n| `%X`  | `00:34:60`    | Locale's time representation (e.g., 23:13:48).                        |\n| `%r`  | `12:34:60 AM` | Hour-minute-second format in 12-hour clocks. Same as `%I:%M:%S %p`.   |\n|       |          |                                                                            |\n|       |          | **TIME ZONE SPECIFIERS:**                                                  |\n| `%Z`  | `ACST`   | Local time zone name. Skips all non-whitespace characters during parsing. [^9] |\n| `%z`  | `+0930`  | Offset from the local time to UTC (with UTC being `+0000`).                |\n| `%:z` | `+09:30` | Same as `%z` but with a colon.                                             |\n| `%#z` | `+09`    | *Parsing only:* Same as `%z` but allows minutes to be missing or present.  |\n|       |          |                                                                            |\n|       |          | **DATE & TIME SPECIFIERS:**                                                |\n|`%c`|`Sun Jul  8 00:34:60 2001`|Locale's date and time (e.g., Thu Mar  3 23:05:25 2005).       |\n| `%+`  | `2001-07-08T00:34:60.026490+09:30` | ISO 8601 / RFC 3339 date & time format. [^6]     |\n|       |               |                                                                       |\n| `%s`  | `994518299`   | UNIX timestamp, the number of seconds since 1970-01-01 00:00 UTC. [^7]|\n|       |          |                                                                            |\n|       |          | **SPECIAL SPECIFIERS:**                                                    |\n| `%t`  |          | Literal tab (`\\t`).                                                        |\n| `%n`  |          | Literal newline (`\\n`).                                                    |\n| `%%`  |          | Literal percent sign.                                                      |\n\nIt is possible to override the default padding behavior of numeric specifiers `%?`.\nThis is not allowed for other specifiers and will result in the `BAD_FORMAT` error.\n\nModifier | Description\n-------- | -----------\n`%-?`    | Suppresses any padding including spaces and zeroes. (e.g. `%j` = `012`, `%-j` = `12`)\n`%_?`    | Uses spaces as a padding. (e.g. `%j` = `012`, `%_j` = ` 12`)\n`%0?`    | Uses zeroes as a padding. (e.g. `%e` = ` 9`, `%0e` = `09`)\n\nNotes:\n\n[^1]: `%Y`:\n   Negative years are allowed in formatting but not in parsing.\n\n[^2]: `%C`, `%y`:\n   This is floor division, so 100 BCE (year number -99) will print `-1` and `99` respectively.\n\n[^3]: `%U`:\n   Week 1 starts with the first Sunday in that year.\n   It is possible to have week 0 for days before the first Sunday.\n\n[^4]: `%G`, `%g`, `%V`:\n   Week 1 is the first week with at least 4 days in that year.\n   Week 0 does not exist, so this should be used with `%G` or `%g`.\n\n[^5]: `%S`:\n   It accounts for leap seconds, so `60` is possible.\n\n[^6]: `%+`: Same as `%Y-%m-%dT%H:%M:%S%.f%:z`, i.e. 0, 3, 6 or 9 fractional\n   digits for seconds and colons in the time zone offset.\n   <br>\n   <br>\n   The typical `strftime` implementations have different (and locale-dependent)\n   formats for this specifier. While Chrono's format for `%+` is far more\n   stable, it is best to avoid this specifier if you want to control the exact\n   output.\n\n[^7]: `%s`:\n   This is not padded and can be negative.\n   For the purpose of Chrono, it only accounts for non-leap seconds\n   so it slightly differs from ISO C `strftime` behavior.\n\n[^8]: `%f`, `%.f`, `%.3f`, `%.6f`, `%.9f`, `%3f`, `%6f`, `%9f`:\n   <br>\n   The default `%f` is right-aligned and always zero-padded to 9 digits\n   for the compatibility with glibc and others,\n   so it always counts the number of nanoseconds since the last whole second.\n   E.g. 7ms after the last second will print `007000000`,\n   and parsing `7000000` will yield the same.\n   <br>\n   <br>\n   The variant `%.f` is left-aligned and print 0, 3, 6 or 9 fractional digits\n   according to the precision.\n   E.g. 70ms after the last second under `%.f` will print `.070` (note: not `.07`),\n   and parsing `.07`, `.070000` etc. will yield the same.\n   Note that they can print or read nothing if the fractional part is zero or\n   the next character is not `.`.\n   <br>\n   <br>\n   The variant `%.3f`, `%.6f` and `%.9f` are left-aligned and print 3, 6 or 9 fractional digits\n   according to the number preceding `f`.\n   E.g. 70ms after the last second under `%.3f` will print `.070` (note: not `.07`),\n   and parsing `.07`, `.070000` etc. will yield the same.\n   Note that they can read nothing if the fractional part is zero or\n   the next character is not `.` however will print with the specified length.\n   <br>\n   <br>\n   The variant `%3f`, `%6f` and `%9f` are left-aligned and print 3, 6 or 9 fractional digits\n   according to the number preceding `f`, but without the leading dot.\n   E.g. 70ms after the last second under `%3f` will print `070` (note: not `07`),\n   and parsing `07`, `070000` etc. will yield the same.\n   Note that they can read nothing if the fractional part is zero.\n\n[^9]: `%Z`:\n   Offset will not be populated from the parsed data, nor will it be validated.\n   Timezone is completely ignored. Similar to the glibc `strptime` treatment of\n   this format code.\n   <br>\n   <br>\n   It is not possible to reliably convert from an abbreviation to an offset,\n   for example CDT can mean either Central Daylight Time (North America) or\n   China Daylight Time.\n*/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\strftime.rs","byte_start":679606,"byte_end":690676,"line_start":4,"line_end":169,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":2860},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\strftime.rs","byte_start":691568,"byte_end":691581,"line_start":202,"line_end":202,"column_start":12,"column_end":25},"name":"StrftimeItems","qualname":"::format::strftime::StrftimeItems","value":"StrftimeItems {  }","parent":null,"children":[{"krate":0,"index":2862},{"krate":0,"index":2863},{"krate":0,"index":2864},{"krate":0,"index":2865},{"krate":0,"index":2866}],"decl_id":null,"docs":" Parsing iterator for `strftime`-like format strings.\n","sig":null,"attributes":[{"value":"/ Parsing iterator for `strftime`-like format strings.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\strftime.rs","byte_start":691476,"byte_end":691532,"line_start":200,"line_end":200,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2146},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\strftime.rs","byte_start":692171,"byte_end":692174,"line_start":219,"line_end":219,"column_start":12,"column_end":15},"name":"new","qualname":"<StrftimeItems>::new","value":"pub fn new(&'a str) -> StrftimeItems","parent":null,"children":[],"decl_id":null,"docs":" Creates a new parsing iterator from the `strftime`-like format string.\n","sig":null,"attributes":[{"value":"/ Creates a new parsing iterator from the `strftime`-like format string.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\strftime.rs","byte_start":692085,"byte_end":692159,"line_start":218,"line_end":218,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":2879},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":563019,"byte_end":563032,"line_start":719,"line_end":719,"column_start":12,"column_end":25},"name":"DelayedFormat","qualname":"::format::DelayedFormat","value":"DelayedFormat {  }","parent":null,"children":[{"krate":0,"index":2881},{"krate":0,"index":2882},{"krate":0,"index":2883},{"krate":0,"index":2884},{"krate":0,"index":2885}],"decl_id":null,"docs":" A *temporary* object which can be used as an argument to `format!` or others.\n This is normally constructed via `format` methods of each date and time type.\n","sig":null,"attributes":[{"value":"/ A *temporary* object which can be used as an argument to `format!` or others.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":562773,"byte_end":562854,"line_start":715,"line_end":715,"column_start":1,"column_end":82}},{"value":"/ This is normally constructed via `format` methods of each date and time type.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":562855,"byte_end":562936,"line_start":716,"line_end":716,"column_start":1,"column_end":82}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":562937,"byte_end":562990,"line_start":717,"line_end":717,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2166},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":563616,"byte_end":563619,"line_start":735,"line_end":735,"column_start":12,"column_end":15},"name":"new","qualname":"<DelayedFormat<I>>::new","value":"pub fn new(Option<NaiveDate>, Option<NaiveTime>, I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DelayedFormat` value out of local date and time.\n","sig":null,"attributes":[{"value":"/ Makes a new `DelayedFormat` value out of local date and time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":563539,"byte_end":563604,"line_start":734,"line_end":734,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2167},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":563893,"byte_end":563908,"line_start":740,"line_end":740,"column_start":12,"column_end":27},"name":"new_with_offset","qualname":"<DelayedFormat<I>>::new_with_offset","value":"pub fn new_with_offset<Off>(Option<NaiveDate>, Option<NaiveTime>, &Off, I)\n-> DelayedFormat<I> where Off: Offset + fmt::Display","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DelayedFormat` value out of local date and time and UTC offset.\n","sig":null,"attributes":[{"value":"/ Makes a new `DelayedFormat` value out of local date and time and UTC offset.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":563801,"byte_end":563881,"line_start":739,"line_end":739,"column_start":5,"column_end":85}}]},{"kind":"Trait","id":{"krate":0,"index":2212},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":711068,"byte_end":711079,"line_start":21,"line_end":21,"column_start":11,"column_end":22},"name":"SubsecRound","qualname":"::round::SubsecRound","value":"SubsecRound","parent":null,"children":[{"krate":0,"index":2213},{"krate":0,"index":2214}],"decl_id":null,"docs":" Extension trait for subsecond rounding or truncation to a maximum number\n of digits. Rounding can be used to decrease the error variance when\n serializing/persisting to lower precision. Truncation is the default\n behavior in Chrono display formatting.  Either can be used to guarantee\n equality (e.g. for testing) when round-tripping through a lower precision\n format.\n","sig":null,"attributes":[{"value":"/ Extension trait for subsecond rounding or truncation to a maximum number","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":710670,"byte_end":710746,"line_start":15,"line_end":15,"column_start":1,"column_end":77}},{"value":"/ of digits. Rounding can be used to decrease the error variance when","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":710747,"byte_end":710818,"line_start":16,"line_end":16,"column_start":1,"column_end":72}},{"value":"/ serializing/persisting to lower precision. Truncation is the default","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":710819,"byte_end":710891,"line_start":17,"line_end":17,"column_start":1,"column_end":73}},{"value":"/ behavior in Chrono display formatting.  Either can be used to guarantee","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":710892,"byte_end":710967,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ equality (e.g. for testing) when round-tripping through a lower precision","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":710968,"byte_end":711045,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/ format.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":711046,"byte_end":711057,"line_start":20,"line_end":20,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2213},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":711609,"byte_end":711622,"line_start":33,"line_end":33,"column_start":8,"column_end":21},"name":"round_subsecs","qualname":"::round::SubsecRound::round_subsecs","value":"pub fn round_subsecs(Self, u16) -> Self","parent":{"krate":0,"index":2212},"children":[],"decl_id":null,"docs":" Return a copy rounded to the specified number of subsecond digits. With\n 9 or more digits, self is returned unmodified. Halfway values are\n rounded up (away from zero).","sig":null,"attributes":[{"value":"/ Return a copy rounded to the specified number of subsecond digits. With","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":711086,"byte_end":711161,"line_start":22,"line_end":22,"column_start":5,"column_end":80}},{"value":"/ 9 or more digits, self is returned unmodified. Halfway values are","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":711166,"byte_end":711235,"line_start":23,"line_end":23,"column_start":5,"column_end":74}},{"value":"/ rounded up (away from zero).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":711240,"byte_end":711272,"line_start":24,"line_end":24,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":711277,"byte_end":711280,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":711285,"byte_end":711298,"line_start":26,"line_end":26,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":711303,"byte_end":711315,"line_start":27,"line_end":27,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, SubsecRound, Timelike, TimeZone, Utc};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":711320,"byte_end":711387,"line_start":28,"line_end":28,"column_start":5,"column_end":72}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":711392,"byte_end":711455,"line_start":29,"line_end":29,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.round_subsecs(2).nanosecond(), 150_000_000);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":711460,"byte_end":711522,"line_start":30,"line_end":30,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.round_subsecs(1).nanosecond(), 200_000_000);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":711527,"byte_end":711589,"line_start":31,"line_end":31,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":711594,"byte_end":711601,"line_start":32,"line_end":32,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2214},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":712125,"byte_end":712138,"line_start":45,"line_end":45,"column_start":8,"column_end":21},"name":"trunc_subsecs","qualname":"::round::SubsecRound::trunc_subsecs","value":"pub fn trunc_subsecs(Self, u16) -> Self","parent":{"krate":0,"index":2212},"children":[],"decl_id":null,"docs":" Return a copy truncated to the specified number of subsecond\n digits. With 9 or more digits, self is returned unmodified.","sig":null,"attributes":[{"value":"/ Return a copy truncated to the specified number of subsecond","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":711656,"byte_end":711720,"line_start":35,"line_end":35,"column_start":5,"column_end":69}},{"value":"/ digits. With 9 or more digits, self is returned unmodified.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":711725,"byte_end":711788,"line_start":36,"line_end":36,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":711793,"byte_end":711796,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":711801,"byte_end":711814,"line_start":38,"line_end":38,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":711819,"byte_end":711831,"line_start":39,"line_end":39,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, SubsecRound, Timelike, TimeZone, Utc};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":711836,"byte_end":711903,"line_start":40,"line_end":40,"column_start":5,"column_end":72}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":711908,"byte_end":711971,"line_start":41,"line_end":41,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.trunc_subsecs(2).nanosecond(), 150_000_000);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":711976,"byte_end":712038,"line_start":42,"line_end":42,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.trunc_subsecs(1).nanosecond(), 100_000_000);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":712043,"byte_end":712105,"line_start":43,"line_end":43,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":712110,"byte_end":712117,"line_start":44,"line_end":44,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":2220},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":713877,"byte_end":713890,"line_start":102,"line_end":102,"column_start":11,"column_end":24},"name":"DurationRound","qualname":"::round::DurationRound","value":"DurationRound: Sized","parent":null,"children":[{"krate":0,"index":2221},{"krate":0,"index":2222},{"krate":0,"index":2223}],"decl_id":null,"docs":" Extension trait for rounding or truncating a DateTime by a Duration.","sig":null,"attributes":[{"value":"/ Extension trait for rounding or truncating a DateTime by a Duration.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":713464,"byte_end":713536,"line_start":95,"line_end":95,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":713537,"byte_end":713540,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ # Limitations","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":713541,"byte_end":713558,"line_start":97,"line_end":97,"column_start":1,"column_end":18}},{"value":"/ Both rounding and truncating are done via [`Duration::num_nanoseconds`] and","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":713559,"byte_end":713638,"line_start":98,"line_end":98,"column_start":1,"column_end":80}},{"value":"/ [`DateTime::timestamp_nanos`]. This means that they will fail if either the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":713639,"byte_end":713718,"line_start":99,"line_end":99,"column_start":1,"column_end":80}},{"value":"/ `Duration` or the `DateTime` are too big to represented as nanoseconds. They","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":713719,"byte_end":713799,"line_start":100,"line_end":100,"column_start":1,"column_end":81}},{"value":"/ will also fail if the `Duration` is bigger than the timestamp.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":713800,"byte_end":713866,"line_start":101,"line_end":101,"column_start":1,"column_end":67}}]},{"kind":"Type","id":{"krate":0,"index":2221},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":714003,"byte_end":714006,"line_start":105,"line_end":105,"column_start":10,"column_end":13},"name":"Err","qualname":"::round::DurationRound::Err","value":"type Err: std::error::Error;","parent":{"krate":0,"index":2220},"children":[],"decl_id":null,"docs":" Error that can occur in rounding or truncating\n","sig":null,"attributes":[{"value":"/ Error that can occur in rounding or truncating","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":713904,"byte_end":713954,"line_start":103,"line_end":103,"column_start":5,"column_end":55}},{"value":"cfg(any(feature = \"std\", test))","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":713959,"byte_end":713993,"line_start":104,"line_end":104,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":2222},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":714709,"byte_end":714723,"line_start":126,"line_end":126,"column_start":8,"column_end":22},"name":"duration_round","qualname":"::round::DurationRound::duration_round","value":"pub fn duration_round(Self, Duration) -> Result<Self, Self::Err>","parent":{"krate":0,"index":2220},"children":[],"decl_id":null,"docs":" Return a copy rounded by Duration.","sig":null,"attributes":[{"value":"/ Return a copy rounded by Duration.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":714173,"byte_end":714211,"line_start":111,"line_end":111,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":714216,"byte_end":714219,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":714224,"byte_end":714237,"line_start":113,"line_end":113,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":714242,"byte_end":714254,"line_start":114,"line_end":114,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, TimeZone, Utc};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":714259,"byte_end":714328,"line_start":115,"line_end":115,"column_start":5,"column_end":74}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":714333,"byte_end":714396,"line_start":116,"line_end":116,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":714401,"byte_end":714416,"line_start":117,"line_end":117,"column_start":5,"column_end":20}},{"value":"/     dt.duration_round(Duration::milliseconds(10)).unwrap().to_string(),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":714421,"byte_end":714496,"line_start":118,"line_end":118,"column_start":5,"column_end":80}},{"value":"/     \"2018-01-11 12:00:00.150 UTC\"","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":714501,"byte_end":714538,"line_start":119,"line_end":119,"column_start":5,"column_end":42}},{"value":"/ );","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":714543,"byte_end":714549,"line_start":120,"line_end":120,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":714554,"byte_end":714569,"line_start":121,"line_end":121,"column_start":5,"column_end":20}},{"value":"/     dt.duration_round(Duration::days(1)).unwrap().to_string(),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":714574,"byte_end":714640,"line_start":122,"line_end":122,"column_start":5,"column_end":71}},{"value":"/     \"2018-01-12 00:00:00 UTC\"","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":714645,"byte_end":714678,"line_start":123,"line_end":123,"column_start":5,"column_end":38}},{"value":"/ );","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":714683,"byte_end":714689,"line_start":124,"line_end":124,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":714694,"byte_end":714701,"line_start":125,"line_end":125,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2223},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":715321,"byte_end":715335,"line_start":143,"line_end":143,"column_start":8,"column_end":22},"name":"duration_trunc","qualname":"::round::DurationRound::duration_trunc","value":"pub fn duration_trunc(Self, Duration) -> Result<Self, Self::Err>","parent":{"krate":0,"index":2220},"children":[],"decl_id":null,"docs":" Return a copy truncated by Duration.","sig":null,"attributes":[{"value":"/ Return a copy truncated by Duration.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":714783,"byte_end":714823,"line_start":128,"line_end":128,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":714828,"byte_end":714831,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":714836,"byte_end":714849,"line_start":130,"line_end":130,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":714854,"byte_end":714866,"line_start":131,"line_end":131,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, TimeZone, Utc};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":714871,"byte_end":714940,"line_start":132,"line_end":132,"column_start":5,"column_end":74}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":714945,"byte_end":715008,"line_start":133,"line_end":133,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":715013,"byte_end":715028,"line_start":134,"line_end":134,"column_start":5,"column_end":20}},{"value":"/     dt.duration_trunc(Duration::milliseconds(10)).unwrap().to_string(),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":715033,"byte_end":715108,"line_start":135,"line_end":135,"column_start":5,"column_end":80}},{"value":"/     \"2018-01-11 12:00:00.150 UTC\"","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":715113,"byte_end":715150,"line_start":136,"line_end":136,"column_start":5,"column_end":42}},{"value":"/ );","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":715155,"byte_end":715161,"line_start":137,"line_end":137,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":715166,"byte_end":715181,"line_start":138,"line_end":138,"column_start":5,"column_end":20}},{"value":"/     dt.duration_trunc(Duration::days(1)).unwrap().to_string(),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":715186,"byte_end":715252,"line_start":139,"line_end":139,"column_start":5,"column_end":71}},{"value":"/     \"2018-01-11 00:00:00 UTC\"","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":715257,"byte_end":715290,"line_start":140,"line_end":140,"column_start":5,"column_end":38}},{"value":"/ );","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":715295,"byte_end":715301,"line_start":141,"line_end":141,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":715306,"byte_end":715313,"line_start":142,"line_end":142,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2890},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":718162,"byte_end":718186,"line_start":218,"line_end":218,"column_start":5,"column_end":29},"name":"DurationExceedsTimestamp","qualname":"::round::RoundingError::DurationExceedsTimestamp","value":"RoundingError::DurationExceedsTimestamp","parent":{"krate":0,"index":2889},"children":[],"decl_id":null,"docs":" Error when the Duration exceeds the Duration from or until the Unix epoch.","sig":null,"attributes":[{"value":"/ Error when the Duration exceeds the Duration from or until the Unix epoch.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":717747,"byte_end":717825,"line_start":207,"line_end":207,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":717830,"byte_end":717833,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":717838,"byte_end":717850,"line_start":209,"line_end":209,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, RoundingError, TimeZone, Utc};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":717855,"byte_end":717939,"line_start":210,"line_end":210,"column_start":5,"column_end":89}},{"value":"/ let dt = Utc.ymd(1970, 12, 12).and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":717944,"byte_end":717996,"line_start":211,"line_end":211,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":718001,"byte_end":718004,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":718009,"byte_end":718024,"line_start":213,"line_end":213,"column_start":5,"column_end":20}},{"value":"/     dt.duration_round(Duration::days(365)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":718029,"byte_end":718076,"line_start":214,"line_end":214,"column_start":5,"column_end":52}},{"value":"/     Err(RoundingError::DurationExceedsTimestamp),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":718081,"byte_end":718134,"line_start":215,"line_end":215,"column_start":5,"column_end":58}},{"value":"/ );","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":718139,"byte_end":718145,"line_start":216,"line_end":216,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":718150,"byte_end":718157,"line_start":217,"line_end":217,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2892},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":718613,"byte_end":718633,"line_start":231,"line_end":231,"column_start":5,"column_end":25},"name":"DurationExceedsLimit","qualname":"::round::RoundingError::DurationExceedsLimit","value":"RoundingError::DurationExceedsLimit","parent":{"krate":0,"index":2889},"children":[],"decl_id":null,"docs":" Error when `Duration.num_nanoseconds` exceeds the limit.","sig":null,"attributes":[{"value":"/ Error when `Duration.num_nanoseconds` exceeds the limit.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":718193,"byte_end":718253,"line_start":220,"line_end":220,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":718258,"byte_end":718261,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":718266,"byte_end":718278,"line_start":222,"line_end":222,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, RoundingError, TimeZone, Utc};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":718283,"byte_end":718367,"line_start":223,"line_end":223,"column_start":5,"column_end":89}},{"value":"/ let dt = Utc.ymd(2260, 12, 31).and_hms_nano(23, 59, 59, 1_75_500_000);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":718372,"byte_end":718446,"line_start":224,"line_end":224,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":718451,"byte_end":718454,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":718459,"byte_end":718474,"line_start":226,"line_end":226,"column_start":5,"column_end":20}},{"value":"/     dt.duration_round(Duration::days(300 * 365)),","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":718479,"byte_end":718532,"line_start":227,"line_end":227,"column_start":5,"column_end":58}},{"value":"/     Err(RoundingError::DurationExceedsLimit)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":718537,"byte_end":718585,"line_start":228,"line_end":228,"column_start":5,"column_end":53}},{"value":"/ );","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":718590,"byte_end":718596,"line_start":229,"line_end":229,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":718601,"byte_end":718608,"line_start":230,"line_end":230,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2894},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":718998,"byte_end":719019,"line_start":241,"line_end":241,"column_start":5,"column_end":26},"name":"TimestampExceedsLimit","qualname":"::round::RoundingError::TimestampExceedsLimit","value":"RoundingError::TimestampExceedsLimit","parent":{"krate":0,"index":2889},"children":[],"decl_id":null,"docs":" Error when `DateTime.timestamp_nanos` exceeds the limit.","sig":null,"attributes":[{"value":"/ Error when `DateTime.timestamp_nanos` exceeds the limit.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":718640,"byte_end":718700,"line_start":233,"line_end":233,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":718705,"byte_end":718708,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":718713,"byte_end":718725,"line_start":235,"line_end":235,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, RoundingError, TimeZone, Utc};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":718730,"byte_end":718814,"line_start":236,"line_end":236,"column_start":5,"column_end":89}},{"value":"/ let dt = Utc.ymd(2300, 12, 12).and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":718819,"byte_end":718871,"line_start":237,"line_end":237,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":718876,"byte_end":718879,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(dt.duration_round(Duration::days(1)), Err(RoundingError::TimestampExceedsLimit),);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":718884,"byte_end":718981,"line_start":239,"line_end":239,"column_start":5,"column_end":102}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":718986,"byte_end":718993,"line_start":240,"line_end":240,"column_start":5,"column_end":12}}]},{"kind":"Enum","id":{"krate":0,"index":2889},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":717727,"byte_end":717740,"line_start":206,"line_end":206,"column_start":10,"column_end":23},"name":"RoundingError","qualname":"::round::RoundingError","value":"pub enum RoundingError {\n    DurationExceedsTimestamp,\n    DurationExceedsLimit,\n    TimestampExceedsLimit,\n}","parent":null,"children":[{"krate":0,"index":2890},{"krate":0,"index":2892},{"krate":0,"index":2894}],"decl_id":null,"docs":" An error from rounding by `Duration`","sig":null,"attributes":[{"value":"/ An error from rounding by `Duration`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":717601,"byte_end":717641,"line_start":202,"line_end":202,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":717642,"byte_end":717645,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ See: [`DurationRound`]","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":717646,"byte_end":717672,"line_start":204,"line_end":204,"column_start":1,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2908},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27205,"byte_end":27208,"line_start":648,"line_end":648,"column_start":5,"column_end":8},"name":"Mon","qualname":"::Weekday::Mon","value":"Weekday::Mon","parent":{"krate":0,"index":2907},"children":[],"decl_id":null,"docs":" Monday.\n","sig":null,"attributes":[{"value":"/ Monday.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27189,"byte_end":27200,"line_start":647,"line_end":647,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2911},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27235,"byte_end":27238,"line_start":650,"line_end":650,"column_start":5,"column_end":8},"name":"Tue","qualname":"::Weekday::Tue","value":"Weekday::Tue","parent":{"krate":0,"index":2907},"children":[],"decl_id":null,"docs":" Tuesday.\n","sig":null,"attributes":[{"value":"/ Tuesday.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27218,"byte_end":27230,"line_start":649,"line_end":649,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2914},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27267,"byte_end":27270,"line_start":652,"line_end":652,"column_start":5,"column_end":8},"name":"Wed","qualname":"::Weekday::Wed","value":"Weekday::Wed","parent":{"krate":0,"index":2907},"children":[],"decl_id":null,"docs":" Wednesday.\n","sig":null,"attributes":[{"value":"/ Wednesday.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27248,"byte_end":27262,"line_start":651,"line_end":651,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2917},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27298,"byte_end":27301,"line_start":654,"line_end":654,"column_start":5,"column_end":8},"name":"Thu","qualname":"::Weekday::Thu","value":"Weekday::Thu","parent":{"krate":0,"index":2907},"children":[],"decl_id":null,"docs":" Thursday.\n","sig":null,"attributes":[{"value":"/ Thursday.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27280,"byte_end":27293,"line_start":653,"line_end":653,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2920},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27327,"byte_end":27330,"line_start":656,"line_end":656,"column_start":5,"column_end":8},"name":"Fri","qualname":"::Weekday::Fri","value":"Weekday::Fri","parent":{"krate":0,"index":2907},"children":[],"decl_id":null,"docs":" Friday.\n","sig":null,"attributes":[{"value":"/ Friday.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27311,"byte_end":27322,"line_start":655,"line_end":655,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2923},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27358,"byte_end":27361,"line_start":658,"line_end":658,"column_start":5,"column_end":8},"name":"Sat","qualname":"::Weekday::Sat","value":"Weekday::Sat","parent":{"krate":0,"index":2907},"children":[],"decl_id":null,"docs":" Saturday.\n","sig":null,"attributes":[{"value":"/ Saturday.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27340,"byte_end":27353,"line_start":657,"line_end":657,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2926},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27387,"byte_end":27390,"line_start":660,"line_end":660,"column_start":5,"column_end":8},"name":"Sun","qualname":"::Weekday::Sun","value":"Weekday::Sun","parent":{"krate":0,"index":2907},"children":[],"decl_id":null,"docs":" Sunday.\n","sig":null,"attributes":[{"value":"/ Sunday.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27371,"byte_end":27382,"line_start":659,"line_end":659,"column_start":5,"column_end":16}}]},{"kind":"Enum","id":{"krate":0,"index":2907},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27175,"byte_end":27182,"line_start":646,"line_end":646,"column_start":10,"column_end":17},"name":"Weekday","qualname":"::Weekday","value":"pub enum Weekday { Mon = , Tue = , Wed = , Thu = , Fri = , Sat = , Sun = , }","parent":null,"children":[{"krate":0,"index":2908},{"krate":0,"index":2911},{"krate":0,"index":2914},{"krate":0,"index":2917},{"krate":0,"index":2920},{"krate":0,"index":2923},{"krate":0,"index":2926}],"decl_id":null,"docs":" The day of week.","sig":null,"attributes":[{"value":"/ The day of week.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":26780,"byte_end":26800,"line_start":639,"line_end":639,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":26801,"byte_end":26804,"line_start":640,"line_end":640,"column_start":1,"column_end":4}},{"value":"/ The order of the days of week depends on the context.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":26805,"byte_end":26862,"line_start":641,"line_end":641,"column_start":1,"column_end":58}},{"value":"/ (This is why this type does *not* implement `PartialOrd` or `Ord` traits.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":26863,"byte_end":26941,"line_start":642,"line_end":642,"column_start":1,"column_end":79}},{"value":"/ One should prefer `*_from_monday` or `*_from_sunday` methods to get the correct result.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":26942,"byte_end":27033,"line_start":643,"line_end":643,"column_start":1,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":2235},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27709,"byte_end":27713,"line_start":670,"line_end":670,"column_start":12,"column_end":16},"name":"succ","qualname":"<Weekday>::succ","value":"pub fn succ(&Self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The next day in the week.","sig":null,"attributes":[{"value":"/ The next day in the week.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27418,"byte_end":27447,"line_start":664,"line_end":664,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27452,"byte_end":27455,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ `w`:        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27460,"byte_end":27531,"line_start":666,"line_end":666,"column_start":5,"column_end":76}},{"value":"/ ----------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27536,"byte_end":27607,"line_start":667,"line_end":667,"column_start":5,"column_end":76}},{"value":"/ `w.succ()`: | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun` | `Mon`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27612,"byte_end":27683,"line_start":668,"line_end":668,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27688,"byte_end":27697,"line_start":669,"line_end":669,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2236},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":28366,"byte_end":28370,"line_start":688,"line_end":688,"column_start":12,"column_end":16},"name":"pred","qualname":"<Weekday>::pred","value":"pub fn pred(&Self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The previous day in the week.","sig":null,"attributes":[{"value":"/ The previous day in the week.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":28071,"byte_end":28104,"line_start":682,"line_end":682,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":28109,"byte_end":28112,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ `w`:        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":28117,"byte_end":28188,"line_start":684,"line_end":684,"column_start":5,"column_end":76}},{"value":"/ ----------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":28193,"byte_end":28264,"line_start":685,"line_end":685,"column_start":5,"column_end":76}},{"value":"/ `w.pred()`: | `Sun` | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":28269,"byte_end":28340,"line_start":686,"line_end":686,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":28345,"byte_end":28354,"line_start":687,"line_end":687,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2237},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":29112,"byte_end":29130,"line_start":706,"line_end":706,"column_start":12,"column_end":30},"name":"number_from_monday","qualname":"<Weekday>::number_from_monday","value":"pub fn number_from_monday(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":28728,"byte_end":28812,"line_start":700,"line_end":700,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":28817,"byte_end":28820,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ `w`:                      | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":28825,"byte_end":28910,"line_start":702,"line_end":702,"column_start":5,"column_end":90}},{"value":"/ ------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":28915,"byte_end":29000,"line_start":703,"line_end":703,"column_start":5,"column_end":90}},{"value":"/ `w.number_from_monday()`: | 1     | 2     | 3     | 4     | 5     | 6     | 7","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":29005,"byte_end":29086,"line_start":704,"line_end":704,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":29091,"byte_end":29100,"line_start":705,"line_end":705,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2238},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":29765,"byte_end":29783,"line_start":724,"line_end":724,"column_start":12,"column_end":30},"name":"number_from_sunday","qualname":"<Weekday>::number_from_sunday","value":"pub fn number_from_sunday(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 1.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Sunday = 1.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":29407,"byte_end":29465,"line_start":718,"line_end":718,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":29470,"byte_end":29473,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ `w`:                      | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":29478,"byte_end":29563,"line_start":720,"line_end":720,"column_start":5,"column_end":90}},{"value":"/ ------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":29568,"byte_end":29653,"line_start":721,"line_end":721,"column_start":5,"column_end":90}},{"value":"/ `w.number_from_sunday()`: | 2     | 3     | 4     | 5     | 6     | 7     | 1","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":29658,"byte_end":29739,"line_start":722,"line_end":722,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":29744,"byte_end":29753,"line_start":723,"line_end":723,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2239},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":30424,"byte_end":30444,"line_start":742,"line_end":742,"column_start":12,"column_end":32},"name":"num_days_from_monday","qualname":"<Weekday>::num_days_from_monday","value":"pub fn num_days_from_monday(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 0.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Monday = 0.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":30060,"byte_end":30118,"line_start":736,"line_end":736,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":30123,"byte_end":30126,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ `w`:                        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":30131,"byte_end":30218,"line_start":738,"line_end":738,"column_start":5,"column_end":92}},{"value":"/ --------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":30223,"byte_end":30310,"line_start":739,"line_end":739,"column_start":5,"column_end":92}},{"value":"/ `w.num_days_from_monday()`: | 0     | 1     | 2     | 3     | 4     | 5     | 6","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":30315,"byte_end":30398,"line_start":740,"line_end":740,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":30403,"byte_end":30412,"line_start":741,"line_end":741,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2240},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":31085,"byte_end":31105,"line_start":760,"line_end":760,"column_start":12,"column_end":32},"name":"num_days_from_sunday","qualname":"<Weekday>::num_days_from_sunday","value":"pub fn num_days_from_sunday(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 0.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Sunday = 0.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":30721,"byte_end":30779,"line_start":754,"line_end":754,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":30784,"byte_end":30787,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ `w`:                        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":30792,"byte_end":30879,"line_start":756,"line_end":756,"column_start":5,"column_end":92}},{"value":"/ --------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":30884,"byte_end":30971,"line_start":757,"line_end":757,"column_start":5,"column_end":92}},{"value":"/ `w.num_days_from_sunday()`: | 1     | 2     | 3     | 4     | 5     | 6     | 0","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":30976,"byte_end":31059,"line_start":758,"line_end":758,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":31064,"byte_end":31073,"line_start":759,"line_end":759,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2943},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":32944,"byte_end":32961,"line_start":824,"line_end":824,"column_start":12,"column_end":29},"name":"ParseWeekdayError","qualname":"::ParseWeekdayError","value":"ParseWeekdayError {  }","parent":null,"children":[{"krate":0,"index":2944}],"decl_id":null,"docs":" An error resulting from reading `Weekday` value with `FromStr`.\n","sig":null,"attributes":[{"value":"/ An error resulting from reading `Weekday` value with `FromStr`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":32837,"byte_end":32904,"line_start":822,"line_end":822,"column_start":1,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2952},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37130,"byte_end":37137,"line_start":968,"line_end":968,"column_start":5,"column_end":12},"name":"January","qualname":"::Month::January","value":"Month::January","parent":{"krate":0,"index":2951},"children":[],"decl_id":null,"docs":" January\n","sig":null,"attributes":[{"value":"/ January","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37114,"byte_end":37125,"line_start":967,"line_end":967,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2955},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37164,"byte_end":37172,"line_start":970,"line_end":970,"column_start":5,"column_end":13},"name":"February","qualname":"::Month::February","value":"Month::February","parent":{"krate":0,"index":2951},"children":[],"decl_id":null,"docs":" February\n","sig":null,"attributes":[{"value":"/ February","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37147,"byte_end":37159,"line_start":969,"line_end":969,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2958},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37196,"byte_end":37201,"line_start":972,"line_end":972,"column_start":5,"column_end":10},"name":"March","qualname":"::Month::March","value":"Month::March","parent":{"krate":0,"index":2951},"children":[],"decl_id":null,"docs":" March\n","sig":null,"attributes":[{"value":"/ March","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37182,"byte_end":37191,"line_start":971,"line_end":971,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2961},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37225,"byte_end":37230,"line_start":974,"line_end":974,"column_start":5,"column_end":10},"name":"April","qualname":"::Month::April","value":"Month::April","parent":{"krate":0,"index":2951},"children":[],"decl_id":null,"docs":" April\n","sig":null,"attributes":[{"value":"/ April","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37211,"byte_end":37220,"line_start":973,"line_end":973,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2964},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37252,"byte_end":37255,"line_start":976,"line_end":976,"column_start":5,"column_end":8},"name":"May","qualname":"::Month::May","value":"Month::May","parent":{"krate":0,"index":2951},"children":[],"decl_id":null,"docs":" May\n","sig":null,"attributes":[{"value":"/ May","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37240,"byte_end":37247,"line_start":975,"line_end":975,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2967},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37278,"byte_end":37282,"line_start":978,"line_end":978,"column_start":5,"column_end":9},"name":"June","qualname":"::Month::June","value":"Month::June","parent":{"krate":0,"index":2951},"children":[],"decl_id":null,"docs":" June\n","sig":null,"attributes":[{"value":"/ June","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37265,"byte_end":37273,"line_start":977,"line_end":977,"column_start":5,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2970},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37305,"byte_end":37309,"line_start":980,"line_end":980,"column_start":5,"column_end":9},"name":"July","qualname":"::Month::July","value":"Month::July","parent":{"krate":0,"index":2951},"children":[],"decl_id":null,"docs":" July\n","sig":null,"attributes":[{"value":"/ July","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37292,"byte_end":37300,"line_start":979,"line_end":979,"column_start":5,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2973},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37334,"byte_end":37340,"line_start":982,"line_end":982,"column_start":5,"column_end":11},"name":"August","qualname":"::Month::August","value":"Month::August","parent":{"krate":0,"index":2951},"children":[],"decl_id":null,"docs":" August\n","sig":null,"attributes":[{"value":"/ August","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37319,"byte_end":37329,"line_start":981,"line_end":981,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2976},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37368,"byte_end":37377,"line_start":984,"line_end":984,"column_start":5,"column_end":14},"name":"September","qualname":"::Month::September","value":"Month::September","parent":{"krate":0,"index":2951},"children":[],"decl_id":null,"docs":" September\n","sig":null,"attributes":[{"value":"/ September","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37350,"byte_end":37363,"line_start":983,"line_end":983,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2979},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37403,"byte_end":37410,"line_start":986,"line_end":986,"column_start":5,"column_end":12},"name":"October","qualname":"::Month::October","value":"Month::October","parent":{"krate":0,"index":2951},"children":[],"decl_id":null,"docs":" October\n","sig":null,"attributes":[{"value":"/ October","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37387,"byte_end":37398,"line_start":985,"line_end":985,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2982},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37437,"byte_end":37445,"line_start":988,"line_end":988,"column_start":5,"column_end":13},"name":"November","qualname":"::Month::November","value":"Month::November","parent":{"krate":0,"index":2951},"children":[],"decl_id":null,"docs":" November\n","sig":null,"attributes":[{"value":"/ November","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37420,"byte_end":37432,"line_start":987,"line_end":987,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2985},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37473,"byte_end":37481,"line_start":990,"line_end":990,"column_start":5,"column_end":13},"name":"December","qualname":"::Month::December","value":"Month::December","parent":{"krate":0,"index":2951},"children":[],"decl_id":null,"docs":" December\n","sig":null,"attributes":[{"value":"/ December","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37456,"byte_end":37468,"line_start":989,"line_end":989,"column_start":5,"column_end":17}}]},{"kind":"Enum","id":{"krate":0,"index":2951},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37102,"byte_end":37107,"line_start":966,"line_end":966,"column_start":10,"column_end":15},"name":"Month","qualname":"::Month","value":"pub enum Month {\n    January = ,\n    February = ,\n    March = ,\n    April = ,\n    May = ,\n    June = ,\n    July = ,\n    August = ,\n    September = ,\n    October = ,\n    November = ,\n    December = ,\n}","parent":null,"children":[{"krate":0,"index":2952},{"krate":0,"index":2955},{"krate":0,"index":2958},{"krate":0,"index":2961},{"krate":0,"index":2964},{"krate":0,"index":2967},{"krate":0,"index":2970},{"krate":0,"index":2973},{"krate":0,"index":2976},{"krate":0,"index":2979},{"krate":0,"index":2982},{"krate":0,"index":2985}],"decl_id":null,"docs":" The month of the year.","sig":null,"attributes":[{"value":"/ The month of the year.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":35957,"byte_end":35983,"line_start":939,"line_end":939,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":35984,"byte_end":35987,"line_start":940,"line_end":940,"column_start":1,"column_end":4}},{"value":"/ This enum is just a convenience implementation.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":35988,"byte_end":36039,"line_start":941,"line_end":941,"column_start":1,"column_end":52}},{"value":"/ The month in dates created by DateLike objects does not return this enum.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36040,"byte_end":36117,"line_start":942,"line_end":942,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36118,"byte_end":36121,"line_start":943,"line_end":943,"column_start":1,"column_end":4}},{"value":"/ It is possible to convert from a date to a month independently","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36122,"byte_end":36188,"line_start":944,"line_end":944,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36189,"byte_end":36196,"line_start":945,"line_end":945,"column_start":1,"column_end":8}},{"value":"/ # extern crate num_traits;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36197,"byte_end":36227,"line_start":946,"line_end":946,"column_start":1,"column_end":31}},{"value":"/ use num_traits::FromPrimitive;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36228,"byte_end":36262,"line_start":947,"line_end":947,"column_start":1,"column_end":35}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36263,"byte_end":36290,"line_start":948,"line_end":948,"column_start":1,"column_end":28}},{"value":"/ let date = Utc.ymd(2019, 10, 28).and_hms(9, 10, 11);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36291,"byte_end":36347,"line_start":949,"line_end":949,"column_start":1,"column_end":57}},{"value":"/ // `2019-10-28T09:10:11Z`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36348,"byte_end":36377,"line_start":950,"line_end":950,"column_start":1,"column_end":30}},{"value":"/ let month = Month::from_u32(date.month());","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36378,"byte_end":36424,"line_start":951,"line_end":951,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(month, Some(Month::October))","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36425,"byte_end":36468,"line_start":952,"line_end":952,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36469,"byte_end":36476,"line_start":953,"line_end":953,"column_start":1,"column_end":8}},{"value":"/ Or from a Month to an integer usable by dates","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36477,"byte_end":36526,"line_start":954,"line_end":954,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36527,"byte_end":36534,"line_start":955,"line_end":955,"column_start":1,"column_end":8}},{"value":"/ # use chrono::prelude::*;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36535,"byte_end":36564,"line_start":956,"line_end":956,"column_start":1,"column_end":30}},{"value":"/ let month = Month::January;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36565,"byte_end":36596,"line_start":957,"line_end":957,"column_start":1,"column_end":32}},{"value":"/ let dt = Utc.ymd(2019, month.number_from_month(), 28).and_hms(9, 10, 11);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36597,"byte_end":36674,"line_start":958,"line_end":958,"column_start":1,"column_end":78}},{"value":"/ assert_eq!((dt.year(), dt.month(), dt.day()), (2019, 1, 28));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36675,"byte_end":36740,"line_start":959,"line_end":959,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36741,"byte_end":36748,"line_start":960,"line_end":960,"column_start":1,"column_end":8}},{"value":"/ Allows mapping from and to month, from 1-January to 12-December.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36749,"byte_end":36817,"line_start":961,"line_end":961,"column_start":1,"column_end":69}},{"value":"/ Can be Serialized/Deserialized with serde","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36818,"byte_end":36863,"line_start":962,"line_end":962,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2252},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37758,"byte_end":37762,"line_start":1000,"line_end":1000,"column_start":12,"column_end":16},"name":"succ","qualname":"<Month>::succ","value":"pub fn succ(&Self) -> Month","parent":null,"children":[],"decl_id":null,"docs":" The next month.","sig":null,"attributes":[{"value":"/ The next month.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37508,"byte_end":37527,"line_start":994,"line_end":994,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37532,"byte_end":37535,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ `m`:        | `January`  | `February` | `...` | `December`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37540,"byte_end":37602,"line_start":996,"line_end":996,"column_start":5,"column_end":67}},{"value":"/ ----------- | ---------  | ---------- | --- | ---------","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37607,"byte_end":37666,"line_start":997,"line_end":997,"column_start":5,"column_end":64}},{"value":"/ `m.succ()`: | `February` | `March`    | `...` | `January`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37671,"byte_end":37732,"line_start":998,"line_end":998,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37737,"byte_end":37746,"line_start":999,"line_end":999,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2253},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":38611,"byte_end":38615,"line_start":1023,"line_end":1023,"column_start":12,"column_end":16},"name":"pred","qualname":"<Month>::pred","value":"pub fn pred(&Self) -> Month","parent":null,"children":[],"decl_id":null,"docs":" The previous month.","sig":null,"attributes":[{"value":"/ The previous month.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":38356,"byte_end":38379,"line_start":1017,"line_end":1017,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":38384,"byte_end":38387,"line_start":1018,"line_end":1018,"column_start":5,"column_end":8}},{"value":"/ `m`:        | `January`  | `February` | `...` | `December`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":38392,"byte_end":38454,"line_start":1019,"line_end":1019,"column_start":5,"column_end":67}},{"value":"/ ----------- | ---------  | ---------- | --- | ---------","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":38459,"byte_end":38518,"line_start":1020,"line_end":1020,"column_start":5,"column_end":64}},{"value":"/ `m.succ()`: | `December` | `January`  | `...` | `November`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":38523,"byte_end":38585,"line_start":1021,"line_end":1021,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":38590,"byte_end":38599,"line_start":1022,"line_end":1022,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2254},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":39526,"byte_end":39543,"line_start":1046,"line_end":1046,"column_start":12,"column_end":29},"name":"number_from_month","qualname":"<Month>::number_from_month","value":"pub fn number_from_month(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a month-of-year number starting from January = 1.","sig":null,"attributes":[{"value":"/ Returns a month-of-year number starting from January = 1.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":39209,"byte_end":39270,"line_start":1040,"line_end":1040,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":39275,"byte_end":39278,"line_start":1041,"line_end":1041,"column_start":5,"column_end":8}},{"value":"/ `m`:                     | `January` | `February` | `...` | `December`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":39283,"byte_end":39357,"line_start":1042,"line_end":1042,"column_start":5,"column_end":79}},{"value":"/ -------------------------| --------- | ---------- | --- | -----","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":39362,"byte_end":39429,"line_start":1043,"line_end":1043,"column_start":5,"column_end":72}},{"value":"/ `m.number_from_month()`: | 1         | 2          | `...` | 12","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":39434,"byte_end":39500,"line_start":1044,"line_end":1044,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":39505,"byte_end":39514,"line_start":1045,"line_end":1045,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2255},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":40153,"byte_end":40157,"line_start":1070,"line_end":1070,"column_start":12,"column_end":16},"name":"name","qualname":"<Month>::name","value":"pub fn name(&Self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" Get the name of the month","sig":null,"attributes":[{"value":"/ Get the name of the month","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":39992,"byte_end":40021,"line_start":1063,"line_end":1063,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":40026,"byte_end":40029,"line_start":1064,"line_end":1064,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":40034,"byte_end":40041,"line_start":1065,"line_end":1065,"column_start":5,"column_end":12}},{"value":"/ use chrono::Month;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":40046,"byte_end":40068,"line_start":1066,"line_end":1066,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":40073,"byte_end":40076,"line_start":1067,"line_end":1067,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Month::January.name(), \"January\")","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":40081,"byte_end":40129,"line_start":1068,"line_end":1068,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":40134,"byte_end":40141,"line_start":1069,"line_end":1069,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":3002},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":42008,"byte_end":42023,"line_start":1127,"line_end":1127,"column_start":12,"column_end":27},"name":"ParseMonthError","qualname":"::ParseMonthError","value":"ParseMonthError {  }","parent":null,"children":[{"krate":0,"index":3003}],"decl_id":null,"docs":" An error resulting from reading `<Month>` value with `FromStr`.\n","sig":null,"attributes":[{"value":"/ An error resulting from reading `<Month>` value with `FromStr`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":41901,"byte_end":41968,"line_start":1125,"line_end":1125,"column_start":1,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":2262},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45158,"byte_end":45166,"line_start":1245,"line_end":1245,"column_start":11,"column_end":19},"name":"Datelike","qualname":"::Datelike","value":"Datelike: Sized","parent":null,"children":[{"krate":0,"index":2263},{"krate":0,"index":2264},{"krate":0,"index":2265},{"krate":0,"index":2266},{"krate":0,"index":2267},{"krate":0,"index":2268},{"krate":0,"index":2269},{"krate":0,"index":2270},{"krate":0,"index":2271},{"krate":0,"index":2272},{"krate":0,"index":2273},{"krate":0,"index":2274},{"krate":0,"index":2275},{"krate":0,"index":2276},{"krate":0,"index":2277},{"krate":0,"index":2278},{"krate":0,"index":2279},{"krate":0,"index":2280}],"decl_id":null,"docs":" The common set of methods for date component.\n","sig":null,"attributes":[{"value":"/ The common set of methods for date component.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45098,"byte_end":45147,"line_start":1244,"line_end":1244,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2263},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45284,"byte_end":45288,"line_start":1247,"line_end":1247,"column_start":8,"column_end":12},"name":"year","qualname":"::Datelike::year","value":"pub fn year(&Self) -> i32","parent":{"krate":0,"index":2262},"children":[],"decl_id":null,"docs":" Returns the year number in the [calendar date](./naive/struct.NaiveDate.html#calendar-date).\n","sig":null,"attributes":[{"value":"/ Returns the year number in the [calendar date](./naive/struct.NaiveDate.html#calendar-date).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45180,"byte_end":45276,"line_start":1246,"line_end":1246,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":2264},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45497,"byte_end":45504,"line_start":1252,"line_end":1252,"column_start":8,"column_end":15},"name":"year_ce","qualname":"::Datelike::year_ce","value":"pub fn year_ce(&Self) -> (bool, u32)","parent":{"krate":0,"index":2262},"children":[],"decl_id":null,"docs":" Returns the absolute year number starting from 1 with a boolean flag,\n which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).\n","sig":null,"attributes":[{"value":"/ Returns the absolute year number starting from 1 with a boolean flag,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45309,"byte_end":45382,"line_start":1249,"line_end":1249,"column_start":5,"column_end":78}},{"value":"/ which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45387,"byte_end":45475,"line_start":1250,"line_end":1250,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45480,"byte_end":45489,"line_start":1251,"line_end":1251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2265},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45799,"byte_end":45804,"line_start":1264,"line_end":1264,"column_start":8,"column_end":13},"name":"month","qualname":"::Datelike::month","value":"pub fn month(&Self) -> u32","parent":{"krate":0,"index":2262},"children":[],"decl_id":null,"docs":" Returns the month number starting from 1.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 1.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45692,"byte_end":45737,"line_start":1261,"line_end":1261,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45742,"byte_end":45745,"line_start":1262,"line_end":1262,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 12.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45750,"byte_end":45791,"line_start":1263,"line_end":1263,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2266},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45932,"byte_end":45938,"line_start":1269,"line_end":1269,"column_start":8,"column_end":14},"name":"month0","qualname":"::Datelike::month0","value":"pub fn month0(&Self) -> u32","parent":{"krate":0,"index":2262},"children":[],"decl_id":null,"docs":" Returns the month number starting from 0.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 0.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45825,"byte_end":45870,"line_start":1266,"line_end":1266,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45875,"byte_end":45878,"line_start":1267,"line_end":1267,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 11.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45883,"byte_end":45924,"line_start":1268,"line_end":1268,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2267},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46109,"byte_end":46112,"line_start":1274,"line_end":1274,"column_start":8,"column_end":11},"name":"day","qualname":"::Datelike::day","value":"pub fn day(&Self) -> u32","parent":{"krate":0,"index":2262},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 1.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45959,"byte_end":46004,"line_start":1271,"line_end":1271,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46009,"byte_end":46012,"line_start":1272,"line_end":1272,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 31. (The last day of month differs by months.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46017,"byte_end":46101,"line_start":1273,"line_end":1273,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":2268},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46283,"byte_end":46287,"line_start":1279,"line_end":1279,"column_start":8,"column_end":12},"name":"day0","qualname":"::Datelike::day0","value":"pub fn day0(&Self) -> u32","parent":{"krate":0,"index":2262},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 0.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46133,"byte_end":46178,"line_start":1276,"line_end":1276,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46183,"byte_end":46186,"line_start":1277,"line_end":1277,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 30. (The last day of month differs by months.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46191,"byte_end":46275,"line_start":1278,"line_end":1278,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":2269},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46456,"byte_end":46463,"line_start":1284,"line_end":1284,"column_start":8,"column_end":15},"name":"ordinal","qualname":"::Datelike::ordinal","value":"pub fn ordinal(&Self) -> u32","parent":{"krate":0,"index":2262},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 1.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46308,"byte_end":46352,"line_start":1281,"line_end":1281,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46357,"byte_end":46360,"line_start":1282,"line_end":1282,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 366. (The last day of year differs by years.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46365,"byte_end":46448,"line_start":1283,"line_end":1283,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":2270},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46632,"byte_end":46640,"line_start":1289,"line_end":1289,"column_start":8,"column_end":16},"name":"ordinal0","qualname":"::Datelike::ordinal0","value":"pub fn ordinal0(&Self) -> u32","parent":{"krate":0,"index":2262},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 0.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46484,"byte_end":46528,"line_start":1286,"line_end":1286,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46533,"byte_end":46536,"line_start":1287,"line_end":1287,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 365. (The last day of year differs by years.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46541,"byte_end":46624,"line_start":1288,"line_end":1288,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":2271},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46697,"byte_end":46704,"line_start":1292,"line_end":1292,"column_start":8,"column_end":15},"name":"weekday","qualname":"::Datelike::weekday","value":"pub fn weekday(&Self) -> Weekday","parent":{"krate":0,"index":2262},"children":[],"decl_id":null,"docs":" Returns the day of week.\n","sig":null,"attributes":[{"value":"/ Returns the day of week.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46661,"byte_end":46689,"line_start":1291,"line_end":1291,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2272},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46762,"byte_end":46770,"line_start":1295,"line_end":1295,"column_start":8,"column_end":16},"name":"iso_week","qualname":"::Datelike::iso_week","value":"pub fn iso_week(&Self) -> IsoWeek","parent":{"krate":0,"index":2262},"children":[],"decl_id":null,"docs":" Returns the ISO week.\n","sig":null,"attributes":[{"value":"/ Returns the ISO week.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46729,"byte_end":46754,"line_start":1294,"line_end":1294,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2273},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46928,"byte_end":46937,"line_start":1300,"line_end":1300,"column_start":8,"column_end":17},"name":"with_year","qualname":"::Datelike::with_year","value":"pub fn with_year(&Self, i32) -> Option<Self>","parent":{"krate":0,"index":2262},"children":[],"decl_id":null,"docs":" Makes a new value with the year number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the year number changed.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46795,"byte_end":46846,"line_start":1297,"line_end":1297,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46851,"byte_end":46854,"line_start":1298,"line_end":1298,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46859,"byte_end":46920,"line_start":1299,"line_end":1299,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2274},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47130,"byte_end":47140,"line_start":1305,"line_end":1305,"column_start":8,"column_end":18},"name":"with_month","qualname":"::Datelike::with_month","value":"pub fn with_month(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":2262},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the month number (starting from 1) changed.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46978,"byte_end":47048,"line_start":1302,"line_end":1302,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47053,"byte_end":47056,"line_start":1303,"line_end":1303,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47061,"byte_end":47122,"line_start":1304,"line_end":1304,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2275},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47334,"byte_end":47345,"line_start":1310,"line_end":1310,"column_start":8,"column_end":19},"name":"with_month0","qualname":"::Datelike::with_month0","value":"pub fn with_month0(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":2262},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the month number (starting from 0) changed.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47182,"byte_end":47252,"line_start":1307,"line_end":1307,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47257,"byte_end":47260,"line_start":1308,"line_end":1308,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47265,"byte_end":47326,"line_start":1309,"line_end":1309,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2276},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47540,"byte_end":47548,"line_start":1315,"line_end":1315,"column_start":8,"column_end":16},"name":"with_day","qualname":"::Datelike::with_day","value":"pub fn with_day(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":2262},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of month (starting from 1) changed.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47388,"byte_end":47458,"line_start":1312,"line_end":1312,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47463,"byte_end":47466,"line_start":1313,"line_end":1313,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47471,"byte_end":47532,"line_start":1314,"line_end":1314,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2277},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47740,"byte_end":47749,"line_start":1320,"line_end":1320,"column_start":8,"column_end":17},"name":"with_day0","qualname":"::Datelike::with_day0","value":"pub fn with_day0(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":2262},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of month (starting from 0) changed.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47588,"byte_end":47658,"line_start":1317,"line_end":1317,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47663,"byte_end":47666,"line_start":1318,"line_end":1318,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47671,"byte_end":47732,"line_start":1319,"line_end":1319,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2278},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47941,"byte_end":47953,"line_start":1325,"line_end":1325,"column_start":8,"column_end":20},"name":"with_ordinal","qualname":"::Datelike::with_ordinal","value":"pub fn with_ordinal(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":2262},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of year (starting from 1) changed.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47790,"byte_end":47859,"line_start":1322,"line_end":1322,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47864,"byte_end":47867,"line_start":1323,"line_end":1323,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47872,"byte_end":47933,"line_start":1324,"line_end":1324,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2279},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48148,"byte_end":48161,"line_start":1330,"line_end":1330,"column_start":8,"column_end":21},"name":"with_ordinal0","qualname":"::Datelike::with_ordinal0","value":"pub fn with_ordinal0(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":2262},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of year (starting from 0) changed.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47997,"byte_end":48066,"line_start":1327,"line_end":1327,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48071,"byte_end":48074,"line_start":1328,"line_end":1328,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48079,"byte_end":48140,"line_start":1329,"line_end":1329,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2280},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48720,"byte_end":48736,"line_start":1344,"line_end":1344,"column_start":8,"column_end":24},"name":"num_days_from_ce","qualname":"::Datelike::num_days_from_ce","value":"pub fn num_days_from_ce(&Self) -> i32","parent":{"krate":0,"index":2262},"children":[],"decl_id":null,"docs":" Counts the days in the proleptic Gregorian calendar, with January 1, Year 1 (CE) as day 1.","sig":null,"attributes":[{"value":"/ Counts the days in the proleptic Gregorian calendar, with January 1, Year 1 (CE) as day 1.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48206,"byte_end":48300,"line_start":1332,"line_end":1332,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48305,"byte_end":48308,"line_start":1333,"line_end":1333,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48313,"byte_end":48327,"line_start":1334,"line_end":1334,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48332,"byte_end":48335,"line_start":1335,"line_end":1335,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48340,"byte_end":48347,"line_start":1336,"line_end":1336,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48352,"byte_end":48390,"line_start":1337,"line_end":1337,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48395,"byte_end":48398,"line_start":1338,"line_end":1338,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(1970, 1, 1).num_days_from_ce(), 719_163);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48403,"byte_end":48479,"line_start":1339,"line_end":1339,"column_start":5,"column_end":81}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2, 1, 1).num_days_from_ce(), 366);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48484,"byte_end":48553,"line_start":1340,"line_end":1340,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(NaiveDate::from_ymd(1, 1, 1).num_days_from_ce(), 1);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48558,"byte_end":48625,"line_start":1341,"line_end":1341,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(NaiveDate::from_ymd(0, 1, 1).num_days_from_ce(), -365);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48630,"byte_end":48700,"line_start":1342,"line_end":1342,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48705,"byte_end":48712,"line_start":1343,"line_end":1343,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":2281},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":49394,"byte_end":49402,"line_start":1363,"line_end":1363,"column_start":11,"column_end":19},"name":"Timelike","qualname":"::Timelike","value":"Timelike: Sized","parent":null,"children":[{"krate":0,"index":2282},{"krate":0,"index":2283},{"krate":0,"index":2284},{"krate":0,"index":2285},{"krate":0,"index":2286},{"krate":0,"index":2287},{"krate":0,"index":2288},{"krate":0,"index":2289},{"krate":0,"index":2290},{"krate":0,"index":2291}],"decl_id":null,"docs":" The common set of methods for time component.\n","sig":null,"attributes":[{"value":"/ The common set of methods for time component.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":49334,"byte_end":49383,"line_start":1362,"line_end":1362,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2282},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":49465,"byte_end":49469,"line_start":1365,"line_end":1365,"column_start":8,"column_end":12},"name":"hour","qualname":"::Timelike::hour","value":"pub fn hour(&Self) -> u32","parent":{"krate":0,"index":2281},"children":[],"decl_id":null,"docs":" Returns the hour number from 0 to 23.\n","sig":null,"attributes":[{"value":"/ Returns the hour number from 0 to 23.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":49416,"byte_end":49457,"line_start":1364,"line_end":1364,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2283},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":49620,"byte_end":49626,"line_start":1370,"line_end":1370,"column_start":8,"column_end":14},"name":"hour12","qualname":"::Timelike::hour12","value":"pub fn hour12(&Self) -> (bool, u32)","parent":{"krate":0,"index":2281},"children":[],"decl_id":null,"docs":" Returns the hour number from 1 to 12 with a boolean flag,\n which is false for AM and true for PM.\n","sig":null,"attributes":[{"value":"/ Returns the hour number from 1 to 12 with a boolean flag,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":49490,"byte_end":49551,"line_start":1367,"line_end":1367,"column_start":5,"column_end":66}},{"value":"/ which is false for AM and true for PM.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":49556,"byte_end":49598,"line_start":1368,"line_end":1368,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":49603,"byte_end":49612,"line_start":1369,"line_end":1369,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2284},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":49870,"byte_end":49876,"line_start":1380,"line_end":1380,"column_start":8,"column_end":14},"name":"minute","qualname":"::Timelike::minute","value":"pub fn minute(&Self) -> u32","parent":{"krate":0,"index":2281},"children":[],"decl_id":null,"docs":" Returns the minute number from 0 to 59.\n","sig":null,"attributes":[{"value":"/ Returns the minute number from 0 to 59.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":49819,"byte_end":49862,"line_start":1379,"line_end":1379,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2285},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":49948,"byte_end":49954,"line_start":1383,"line_end":1383,"column_start":8,"column_end":14},"name":"second","qualname":"::Timelike::second","value":"pub fn second(&Self) -> u32","parent":{"krate":0,"index":2281},"children":[],"decl_id":null,"docs":" Returns the second number from 0 to 59.\n","sig":null,"attributes":[{"value":"/ Returns the second number from 0 to 59.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":49897,"byte_end":49940,"line_start":1382,"line_end":1382,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2286},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50197,"byte_end":50207,"line_start":1388,"line_end":1388,"column_start":8,"column_end":18},"name":"nanosecond","qualname":"::Timelike::nanosecond","value":"pub fn nanosecond(&Self) -> u32","parent":{"krate":0,"index":2281},"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the whole non-leap second.\n The range from 1,000,000,000 to 1,999,999,999 represents\n the [leap second](./naive/struct.NaiveTime.html#leap-second-handling).\n","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the whole non-leap second.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":49975,"byte_end":50045,"line_start":1385,"line_end":1385,"column_start":5,"column_end":75}},{"value":"/ The range from 1,000,000,000 to 1,999,999,999 represents","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50050,"byte_end":50110,"line_start":1386,"line_end":1386,"column_start":5,"column_end":65}},{"value":"/ the [leap second](./naive/struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50115,"byte_end":50189,"line_start":1387,"line_end":1387,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":2287},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50361,"byte_end":50370,"line_start":1393,"line_end":1393,"column_start":8,"column_end":17},"name":"with_hour","qualname":"::Timelike::with_hour","value":"pub fn with_hour(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":2281},"children":[],"decl_id":null,"docs":" Makes a new value with the hour number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the hour number changed.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50228,"byte_end":50279,"line_start":1390,"line_end":1390,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50284,"byte_end":50287,"line_start":1391,"line_end":1391,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50292,"byte_end":50353,"line_start":1392,"line_end":1392,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2288},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50546,"byte_end":50557,"line_start":1398,"line_end":1398,"column_start":8,"column_end":19},"name":"with_minute","qualname":"::Timelike::with_minute","value":"pub fn with_minute(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":2281},"children":[],"decl_id":null,"docs":" Makes a new value with the minute number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the minute number changed.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50411,"byte_end":50464,"line_start":1395,"line_end":1395,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50469,"byte_end":50472,"line_start":1396,"line_end":1396,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50477,"byte_end":50538,"line_start":1397,"line_end":1397,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2289},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50844,"byte_end":50855,"line_start":1405,"line_end":1405,"column_start":8,"column_end":19},"name":"with_second","qualname":"::Timelike::with_second","value":"pub fn with_second(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":2281},"children":[],"decl_id":null,"docs":" Makes a new value with the second number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the second number changed.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50597,"byte_end":50650,"line_start":1400,"line_end":1400,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50655,"byte_end":50658,"line_start":1401,"line_end":1401,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50663,"byte_end":50724,"line_start":1402,"line_end":1402,"column_start":5,"column_end":66}},{"value":"/ As with the [`second`](#tymethod.second) method,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50729,"byte_end":50781,"line_start":1403,"line_end":1403,"column_start":5,"column_end":57}},{"value":"/ the input range is restricted to 0 through 59.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50786,"byte_end":50836,"line_start":1404,"line_end":1404,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2290},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":51188,"byte_end":51203,"line_start":1412,"line_end":1412,"column_start":8,"column_end":23},"name":"with_nanosecond","qualname":"::Timelike::with_nanosecond","value":"pub fn with_nanosecond(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":2281},"children":[],"decl_id":null,"docs":" Makes a new value with nanoseconds since the whole non-leap second changed.","sig":null,"attributes":[{"value":"/ Makes a new value with nanoseconds since the whole non-leap second changed.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50895,"byte_end":50974,"line_start":1407,"line_end":1407,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50979,"byte_end":50982,"line_start":1408,"line_end":1408,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50987,"byte_end":51048,"line_start":1409,"line_end":1409,"column_start":5,"column_end":66}},{"value":"/ As with the [`nanosecond`](#tymethod.nanosecond) method,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":51053,"byte_end":51113,"line_start":1410,"line_end":1410,"column_start":5,"column_end":65}},{"value":"/ the input range can exceed 1,000,000,000 for leap seconds.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":51118,"byte_end":51180,"line_start":1411,"line_end":1411,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2291},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":51332,"byte_end":51357,"line_start":1416,"line_end":1416,"column_start":8,"column_end":33},"name":"num_seconds_from_midnight","qualname":"::Timelike::num_seconds_from_midnight","value":"pub fn num_seconds_from_midnight(&Self) -> u32","parent":{"krate":0,"index":2281},"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds past the last midnight.\n","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds past the last midnight.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":51244,"byte_end":51310,"line_start":1414,"line_end":1414,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":51315,"byte_end":51324,"line_start":1415,"line_end":1415,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":58162,"byte_end":58170,"line_start":67,"line_end":67,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":66713,"byte_end":66721,"line_start":302,"line_end":302,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":67009,"byte_end":67017,"line_start":315,"line_end":315,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":67361,"byte_end":67369,"line_start":329,"line_end":329,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":67705,"byte_end":67713,"line_start":343,"line_end":343,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":68144,"byte_end":68152,"line_start":355,"line_end":355,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":68729,"byte_end":68737,"line_start":375,"line_end":375,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":70154,"byte_end":70169,"line_start":415,"line_end":415,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":70369,"byte_end":70384,"line_start":422,"line_end":422,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\sys.rs","byte_start":83612,"byte_end":83620,"line_start":41,"line_end":41,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\sys.rs","byte_start":85822,"byte_end":85824,"line_start":117,"line_end":117,"column_start":6,"column_end":8},"value":"","parent":null,"children":[{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":93471,"byte_end":93482,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":94663,"byte_end":94674,"line_start":76,"line_end":76,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":97884,"byte_end":97895,"line_start":169,"line_end":169,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":113242,"byte_end":113253,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":434}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":115810,"byte_end":115821,"line_start":101,"line_end":101,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":116409,"byte_end":116420,"line_start":123,"line_end":123,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":116501,"byte_end":116512,"line_start":129,"line_end":129,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":445}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":117010,"byte_end":117021,"line_start":143,"line_end":143,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":447}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":117789,"byte_end":117798,"line_start":164,"line_end":164,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":451},{"krate":0,"index":452}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":117986,"byte_end":117995,"line_start":173,"line_end":173,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":454},{"krate":0,"index":455}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":118184,"byte_end":118197,"line_start":182,"line_end":182,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":457},{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":118393,"byte_end":118406,"line_start":191,"line_end":191,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":460},{"krate":0,"index":461}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":118617,"byte_end":118625,"line_start":200,"line_end":200,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":464},{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":118837,"byte_end":118845,"line_start":209,"line_end":209,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":468},{"krate":0,"index":469}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":123262,"byte_end":123267,"line_start":93,"line_end":93,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":516},{"krate":0,"index":517}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":124167,"byte_end":124172,"line_start":117,"line_end":117,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":523},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":129543,"byte_end":129546,"line_start":39,"line_end":39,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":571},{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":130432,"byte_end":130435,"line_start":62,"line_end":62,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":579}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":130955,"byte_end":130958,"line_start":84,"line_end":84,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":581}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":131054,"byte_end":131057,"line_start":90,"line_end":90,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":131173,"byte_end":131176,"line_start":96,"line_end":96,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":136971,"byte_end":136980,"line_start":136,"line_end":136,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":742},{"krate":0,"index":744},{"krate":0,"index":745}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":174784,"byte_end":174793,"line_start":1102,"line_end":1102,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":751},{"krate":0,"index":752},{"krate":0,"index":753},{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":756},{"krate":0,"index":757},{"krate":0,"index":758},{"krate":0,"index":759},{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":762}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":187094,"byte_end":187103,"line_start":1468,"line_end":1468,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":764},{"krate":0,"index":765}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":187322,"byte_end":187331,"line_start":1477,"line_end":1477,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":767}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":188715,"byte_end":188724,"line_start":1509,"line_end":1509,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":769},{"krate":0,"index":770}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":188943,"byte_end":188952,"line_start":1518,"line_end":1518,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":772}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":190177,"byte_end":190186,"line_start":1551,"line_end":1551,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":774},{"krate":0,"index":775}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":190539,"byte_end":190560,"line_start":1566,"line_end":1566,"column_start":19,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":779}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":191137,"byte_end":191158,"line_start":1586,"line_end":1586,"column_start":28,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":191310,"byte_end":191332,"line_start":1593,"line_end":1593,"column_start":19,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":782},{"krate":0,"index":783},{"krate":0,"index":784}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":191847,"byte_end":191869,"line_start":1611,"line_end":1611,"column_start":28,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":192916,"byte_end":192925,"line_start":1639,"line_end":1639,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":787}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":194184,"byte_end":194193,"line_start":1674,"line_end":1674,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":789}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":194795,"byte_end":194804,"line_start":1696,"line_end":1696,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":791},{"krate":0,"index":792}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":226115,"byte_end":226128,"line_start":67,"line_end":67,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":902},{"krate":0,"index":904},{"krate":0,"index":905},{"krate":0,"index":906},{"krate":0,"index":907},{"krate":0,"index":909},{"krate":0,"index":910},{"krate":0,"index":911},{"krate":0,"index":912},{"krate":0,"index":913},{"krate":0,"index":914},{"krate":0,"index":915},{"krate":0,"index":916},{"krate":0,"index":917},{"krate":0,"index":921}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":252292,"byte_end":252305,"line_start":702,"line_end":702,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":924},{"krate":0,"index":925},{"krate":0,"index":926},{"krate":0,"index":927},{"krate":0,"index":928},{"krate":0,"index":929},{"krate":0,"index":930},{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":933},{"krate":0,"index":935},{"krate":0,"index":937},{"krate":0,"index":939},{"krate":0,"index":941},{"krate":0,"index":943},{"krate":0,"index":945}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":263361,"byte_end":263374,"line_start":1020,"line_end":1020,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":948},{"krate":0,"index":949},{"krate":0,"index":950},{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":954},{"krate":0,"index":956},{"krate":0,"index":958}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":269570,"byte_end":269583,"line_start":1192,"line_end":1192,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":961}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":272134,"byte_end":272147,"line_start":1252,"line_end":1252,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":964},{"krate":0,"index":965}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":272378,"byte_end":272391,"line_start":1261,"line_end":1261,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":967}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":274838,"byte_end":274851,"line_start":1320,"line_end":1320,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":969},{"krate":0,"index":970}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":275082,"byte_end":275095,"line_start":1329,"line_end":1329,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":972}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":276969,"byte_end":276982,"line_start":1380,"line_end":1380,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":974},{"krate":0,"index":975}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":278190,"byte_end":278203,"line_start":1416,"line_end":1416,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":977}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":279301,"byte_end":279314,"line_start":1447,"line_end":1447,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":979}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":280052,"byte_end":280065,"line_start":1469,"line_end":1469,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":981},{"krate":0,"index":982}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\internals.rs","byte_start":324272,"byte_end":324281,"line_start":113,"line_end":113,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1029},{"krate":0,"index":1030},{"krate":0,"index":1031},{"krate":0,"index":1032},{"krate":0,"index":1033}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\internals.rs","byte_start":325078,"byte_end":325087,"line_start":148,"line_end":148,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1035}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\internals.rs","byte_start":333228,"byte_end":333230,"line_start":270,"line_end":270,"column_start":6,"column_end":8},"value":"","parent":null,"children":[{"krate":0,"index":1046},{"krate":0,"index":1047},{"krate":0,"index":1048},{"krate":0,"index":1049},{"krate":0,"index":1050},{"krate":0,"index":1051},{"krate":0,"index":1052},{"krate":0,"index":1053},{"krate":0,"index":1054},{"krate":0,"index":1055},{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":1058}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\internals.rs","byte_start":335309,"byte_end":335311,"line_start":359,"line_end":359,"column_start":21,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1060}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\internals.rs","byte_start":335910,"byte_end":335913,"line_start":380,"line_end":380,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":1062},{"krate":0,"index":1063},{"krate":0,"index":1064},{"krate":0,"index":1065},{"krate":0,"index":1066},{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":1069},{"krate":0,"index":1070},{"krate":0,"index":1071},{"krate":0,"index":1072},{"krate":0,"index":1073}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\internals.rs","byte_start":337876,"byte_end":337879,"line_start":469,"line_end":469,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1075}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":352102,"byte_end":352109,"line_start":48,"line_end":48,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1092},{"krate":0,"index":1093},{"krate":0,"index":1094}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":354655,"byte_end":354662,"line_start":130,"line_end":130,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1096}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":363681,"byte_end":363690,"line_start":187,"line_end":187,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1168},{"krate":0,"index":1169},{"krate":0,"index":1170},{"krate":0,"index":1171},{"krate":0,"index":1173},{"krate":0,"index":1174},{"krate":0,"index":1176},{"krate":0,"index":1177},{"krate":0,"index":1178},{"krate":0,"index":1179},{"krate":0,"index":1180},{"krate":0,"index":1181},{"krate":0,"index":1182},{"krate":0,"index":1183},{"krate":0,"index":1187},{"krate":0,"index":1191},{"krate":0,"index":1193}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":388080,"byte_end":388089,"line_start":803,"line_end":803,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1195},{"krate":0,"index":1196},{"krate":0,"index":1197},{"krate":0,"index":1198},{"krate":0,"index":1199},{"krate":0,"index":1200},{"krate":0,"index":1201},{"krate":0,"index":1202},{"krate":0,"index":1203}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":395318,"byte_end":395327,"line_start":1016,"line_end":1016,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1205}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":398237,"byte_end":398246,"line_start":1078,"line_end":1078,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1208},{"krate":0,"index":1209}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":398427,"byte_end":398436,"line_start":1087,"line_end":1087,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1211}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":400942,"byte_end":400951,"line_start":1145,"line_end":1145,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1213},{"krate":0,"index":1214}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":401132,"byte_end":401141,"line_start":1154,"line_end":1154,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1216}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":403612,"byte_end":403621,"line_start":1210,"line_end":1210,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1218},{"krate":0,"index":1219}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":405009,"byte_end":405018,"line_start":1247,"line_end":1247,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1221}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":406871,"byte_end":406880,"line_start":1297,"line_end":1297,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1223}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":407652,"byte_end":407661,"line_start":1322,"line_end":1322,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1225},{"krate":0,"index":1226}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":428944,"byte_end":428948,"line_start":57,"line_end":57,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1322},{"krate":0,"index":1323},{"krate":0,"index":1324},{"krate":0,"index":1325},{"krate":0,"index":1327},{"krate":0,"index":1328},{"krate":0,"index":1330},{"krate":0,"index":1331},{"krate":0,"index":1333},{"krate":0,"index":1334},{"krate":0,"index":1336},{"krate":0,"index":1337},{"krate":0,"index":1339},{"krate":0,"index":1340},{"krate":0,"index":1342},{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1346},{"krate":0,"index":1347},{"krate":0,"index":1348},{"krate":0,"index":1350},{"krate":0,"index":1351}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":437048,"byte_end":437052,"line_start":277,"line_end":277,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1358},{"krate":0,"index":1362}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":438929,"byte_end":438933,"line_start":336,"line_end":336,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1366},{"krate":0,"index":1367},{"krate":0,"index":1368},{"krate":0,"index":1369},{"krate":0,"index":1370},{"krate":0,"index":1371},{"krate":0,"index":1372},{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1375},{"krate":0,"index":1377},{"krate":0,"index":1379},{"krate":0,"index":1381},{"krate":0,"index":1383},{"krate":0,"index":1385},{"krate":0,"index":1387}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":440768,"byte_end":440772,"line_start":411,"line_end":411,"column_start":29,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":440852,"byte_end":440856,"line_start":412,"line_end":412,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":440961,"byte_end":440965,"line_start":414,"line_end":414,"column_start":60,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1396}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":441085,"byte_end":441089,"line_start":420,"line_end":420,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":441132,"byte_end":441136,"line_start":422,"line_end":422,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1401}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":441288,"byte_end":441292,"line_start":428,"line_end":428,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1404}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":441427,"byte_end":441431,"line_start":434,"line_end":434,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1407}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":441570,"byte_end":441574,"line_start":440,"line_end":440,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1411},{"krate":0,"index":1412}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":441798,"byte_end":441802,"line_start":449,"line_end":449,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1415},{"krate":0,"index":1416}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":442023,"byte_end":442027,"line_start":458,"line_end":458,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1419},{"krate":0,"index":1420}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":442212,"byte_end":442216,"line_start":467,"line_end":467,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1423}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":442390,"byte_end":442394,"line_start":473,"line_end":473,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1426}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":445320,"byte_end":445328,"line_start":80,"line_end":80,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1536},{"krate":0,"index":1537},{"krate":0,"index":1538},{"krate":0,"index":1539},{"krate":0,"index":1540},{"krate":0,"index":1541},{"krate":0,"index":1542},{"krate":0,"index":1543},{"krate":0,"index":1544},{"krate":0,"index":1545},{"krate":0,"index":1546},{"krate":0,"index":1547},{"krate":0,"index":1549},{"krate":0,"index":1550},{"krate":0,"index":1551},{"krate":0,"index":1553},{"krate":0,"index":1554}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":451375,"byte_end":451383,"line_start":257,"line_end":257,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1556}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":451889,"byte_end":451897,"line_start":269,"line_end":269,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1558}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":452307,"byte_end":452315,"line_start":279,"line_end":279,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1560}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":452767,"byte_end":452775,"line_start":291,"line_end":291,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1562}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":453223,"byte_end":453231,"line_start":303,"line_end":303,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1564}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":453669,"byte_end":453677,"line_start":315,"line_end":315,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1566}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":454393,"byte_end":454401,"line_start":333,"line_end":333,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1572},{"krate":0,"index":1574},{"krate":0,"index":1576}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":457093,"byte_end":457101,"line_start":393,"line_end":393,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1579},{"krate":0,"index":1581},{"krate":0,"index":1583},{"krate":0,"index":1590},{"krate":0,"index":1594}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":462583,"byte_end":462591,"line_start":535,"line_end":535,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1598},{"krate":0,"index":1599},{"krate":0,"index":1600},{"krate":0,"index":1601},{"krate":0,"index":1602},{"krate":0,"index":1603},{"krate":0,"index":1604},{"krate":0,"index":1605},{"krate":0,"index":1606},{"krate":0,"index":1607},{"krate":0,"index":1609},{"krate":0,"index":1611},{"krate":0,"index":1613},{"krate":0,"index":1615},{"krate":0,"index":1617},{"krate":0,"index":1619}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":464448,"byte_end":464456,"line_start":609,"line_end":609,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1623},{"krate":0,"index":1624},{"krate":0,"index":1625},{"krate":0,"index":1626},{"krate":0,"index":1627},{"krate":0,"index":1629},{"krate":0,"index":1631},{"krate":0,"index":1633}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":465496,"byte_end":465504,"line_start":649,"line_end":649,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":465584,"byte_end":465592,"line_start":650,"line_end":650,"column_start":36,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":465701,"byte_end":465709,"line_start":652,"line_end":652,"column_start":64,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":1642}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":465841,"byte_end":465849,"line_start":658,"line_end":658,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":465922,"byte_end":465930,"line_start":660,"line_end":660,"column_start":65,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":1648}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":466669,"byte_end":466677,"line_start":681,"line_end":681,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1651}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":466824,"byte_end":466832,"line_start":687,"line_end":687,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1654}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":466975,"byte_end":466983,"line_start":693,"line_end":693,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1658},{"krate":0,"index":1659}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":467219,"byte_end":467227,"line_start":702,"line_end":702,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1662},{"krate":0,"index":1663}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":467464,"byte_end":467472,"line_start":711,"line_end":711,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1666},{"krate":0,"index":1667}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":467661,"byte_end":467669,"line_start":720,"line_end":720,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1670}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":467843,"byte_end":467851,"line_start":726,"line_end":726,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1673}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":468044,"byte_end":468052,"line_start":735,"line_end":735,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1675},{"krate":0,"index":1676}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":468278,"byte_end":468286,"line_start":744,"line_end":744,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1679},{"krate":0,"index":1680}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":468531,"byte_end":468539,"line_start":753,"line_end":753,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1683}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":469191,"byte_end":469199,"line_start":773,"line_end":773,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1685}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":469398,"byte_end":469408,"line_start":780,"line_end":780,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1688}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":539821,"byte_end":539836,"line_start":141,"line_end":141,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1751}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":539926,"byte_end":539941,"line_start":147,"line_end":147,"column_start":20,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1753}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":540047,"byte_end":540062,"line_start":153,"line_end":153,"column_start":13,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":540087,"byte_end":540102,"line_start":155,"line_end":155,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1756}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":547391,"byte_end":547401,"line_start":358,"line_end":358,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1767}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":548150,"byte_end":548160,"line_start":373,"line_end":373,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1769}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":574203,"byte_end":574209,"line_start":129,"line_end":129,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1899}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":574885,"byte_end":574891,"line_start":157,"line_end":157,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1901},{"krate":0,"index":1902},{"krate":0,"index":1903},{"krate":0,"index":1904},{"krate":0,"index":1905},{"krate":0,"index":1906},{"krate":0,"index":1907},{"krate":0,"index":1908},{"krate":0,"index":1909},{"krate":0,"index":1910},{"krate":0,"index":1911},{"krate":0,"index":1912},{"krate":0,"index":1913},{"krate":0,"index":1914},{"krate":0,"index":1915},{"krate":0,"index":1916},{"krate":0,"index":1917},{"krate":0,"index":1918},{"krate":0,"index":1919},{"krate":0,"index":1920},{"krate":0,"index":1921},{"krate":0,"index":1922},{"krate":0,"index":1923},{"krate":0,"index":1931},{"krate":0,"index":1932},{"krate":0,"index":1943},{"krate":0,"index":1944},{"krate":0,"index":1945}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":643796,"byte_end":643804,"line_start":458,"line_end":458,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2059},{"krate":0,"index":2060}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\strftime.rs","byte_start":692061,"byte_end":692074,"line_start":217,"line_end":217,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2146},{"krate":0,"index":2147}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\strftime.rs","byte_start":693569,"byte_end":693582,"line_start":266,"line_end":266,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2153},{"krate":0,"index":2154}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":563516,"byte_end":563529,"line_start":733,"line_end":733,"column_start":62,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":2166},{"krate":0,"index":2167}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":565502,"byte_end":565515,"line_start":794,"line_end":794,"column_start":79,"column_end":92},"value":"","parent":null,"children":[{"krate":0,"index":2173}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":566802,"byte_end":566809,"line_start":840,"line_end":840,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2175},{"krate":0,"index":2176}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":568767,"byte_end":568772,"line_start":914,"line_end":914,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2178},{"krate":0,"index":2179}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":712194,"byte_end":712195,"line_start":48,"line_end":48,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2217},{"krate":0,"index":2218}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":715576,"byte_end":715584,"line_start":149,"line_end":149,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2227},{"krate":0,"index":2228},{"krate":0,"index":2229}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":719046,"byte_end":719059,"line_start":244,"line_end":244,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2231}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":719638,"byte_end":719651,"line_start":261,"line_end":261,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2233}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27404,"byte_end":27411,"line_start":663,"line_end":663,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2235},{"krate":0,"index":2236},{"krate":0,"index":2237},{"krate":0,"index":2238},{"krate":0,"index":2239},{"krate":0,"index":2240}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":31402,"byte_end":31409,"line_start":773,"line_end":773,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2242}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":32057,"byte_end":32064,"line_start":790,"line_end":790,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2244},{"krate":0,"index":2245}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":33003,"byte_end":33020,"line_start":828,"line_end":828,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2250}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37496,"byte_end":37501,"line_start":993,"line_end":993,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2252},{"krate":0,"index":2253},{"krate":0,"index":2254},{"krate":0,"index":2255}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":40731,"byte_end":40736,"line_start":1088,"line_end":1088,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2257},{"krate":0,"index":2258},{"krate":0,"index":2259}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":42065,"byte_end":42080,"line_start":1131,"line_end":1131,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2261}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23609,"byte_end":23615,"line_start":540,"line_end":540,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":303}},{"kind":"Mod","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":24931,"byte_end":24937,"line_start":581,"line_end":581,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1692}},{"kind":"Mod","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":562762,"byte_end":562770,"line_start":713,"line_end":713,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":2119}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":58162,"byte_end":58170,"line_start":67,"line_end":67,"column_start":6,"column_end":14},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":2294},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":66713,"byte_end":66721,"line_start":302,"line_end":302,"column_start":14,"column_end":22},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":2294},"to":{"krate":2,"index":3152}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":67009,"byte_end":67017,"line_start":315,"line_end":315,"column_start":14,"column_end":22},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":2294},"to":{"krate":2,"index":3125}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":67361,"byte_end":67369,"line_start":329,"line_end":329,"column_start":14,"column_end":22},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":2294},"to":{"krate":2,"index":3130}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":67705,"byte_end":67713,"line_start":343,"line_end":343,"column_start":19,"column_end":27},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":2294},"to":{"krate":2,"index":3135}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":68144,"byte_end":68152,"line_start":355,"line_end":355,"column_start":19,"column_end":27},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":2294},"to":{"krate":2,"index":3140}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":68729,"byte_end":68737,"line_start":375,"line_end":375,"column_start":23,"column_end":31},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":2294},"to":{"krate":2,"index":9692}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":70154,"byte_end":70169,"line_start":415,"line_end":415,"column_start":23,"column_end":38},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":2313},"to":{"krate":2,"index":9692}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\oldtime.rs","byte_start":70369,"byte_end":70384,"line_start":422,"line_end":422,"column_start":16,"column_end":31},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":2313},"to":{"krate":1,"index":2546}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\sys.rs","byte_start":83612,"byte_end":83620,"line_start":41,"line_end":41,"column_start":6,"column_end":14},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":137},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\sys.rs","byte_start":85822,"byte_end":85824,"line_start":117,"line_end":117,"column_start":6,"column_end":8},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":143},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":93471,"byte_end":93482,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":2328},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":94663,"byte_end":94674,"line_start":76,"line_end":76,"column_start":20,"column_end":31},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":2328},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":97884,"byte_end":97895,"line_start":169,"line_end":169,"column_start":21,"column_end":32},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":2328},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":98357,"byte_end":98362,"line_start":183,"line_end":183,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":3062},"to":{"krate":0,"index":358}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":98365,"byte_end":98370,"line_start":183,"line_end":183,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":2679},"to":{"krate":0,"index":358}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":98378,"byte_end":98383,"line_start":183,"line_end":183,"column_start":40,"column_end":45},"kind":"SuperTrait","from":{"krate":2,"index":9685},"to":{"krate":0,"index":358}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":98673,"byte_end":98678,"line_start":192,"line_end":192,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":3062},"to":{"krate":0,"index":360}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":98681,"byte_end":98686,"line_start":192,"line_end":192,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":2679},"to":{"krate":0,"index":360}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":113242,"byte_end":113253,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":2362},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":115810,"byte_end":115821,"line_start":101,"line_end":101,"column_start":19,"column_end":30},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":2362},"to":{"krate":0,"index":360}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":116409,"byte_end":116420,"line_start":123,"line_end":123,"column_start":17,"column_end":28},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":2362},"to":{"krate":0,"index":358}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":116501,"byte_end":116512,"line_start":129,"line_end":129,"column_start":21,"column_end":32},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":2362},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":117010,"byte_end":117021,"line_start":143,"line_end":143,"column_start":23,"column_end":34},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":2362},"to":{"krate":2,"index":9692}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":117789,"byte_end":117798,"line_start":164,"line_end":164,"column_start":27,"column_end":36},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":2526},"to":{"krate":2,"index":3125}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":117986,"byte_end":117995,"line_start":173,"line_end":173,"column_start":27,"column_end":36},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":2526},"to":{"krate":2,"index":3130}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":118184,"byte_end":118197,"line_start":182,"line_end":182,"column_start":27,"column_end":40},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":2456},"to":{"krate":2,"index":3125}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":118393,"byte_end":118406,"line_start":191,"line_end":191,"column_start":27,"column_end":40},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":2456},"to":{"krate":2,"index":3130}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":118617,"byte_end":118625,"line_start":200,"line_end":200,"column_start":41,"column_end":49},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":3125}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":118837,"byte_end":118845,"line_start":209,"line_end":209,"column_start":41,"column_end":49},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":3130}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":123262,"byte_end":123267,"line_start":93,"line_end":93,"column_start":6,"column_end":11},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":2377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":124167,"byte_end":124172,"line_start":117,"line_end":117,"column_start":19,"column_end":24},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":2377},"to":{"krate":0,"index":360}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":129543,"byte_end":129546,"line_start":39,"line_end":39,"column_start":6,"column_end":9},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":2384},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":130432,"byte_end":130435,"line_start":62,"line_end":62,"column_start":19,"column_end":22},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":2384},"to":{"krate":0,"index":360}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":130955,"byte_end":130958,"line_start":84,"line_end":84,"column_start":17,"column_end":20},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":2384},"to":{"krate":0,"index":358}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":131054,"byte_end":131057,"line_start":90,"line_end":90,"column_start":21,"column_end":24},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":2384},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":131173,"byte_end":131176,"line_start":96,"line_end":96,"column_start":23,"column_end":26},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":2384},"to":{"krate":2,"index":9692}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":136971,"byte_end":136980,"line_start":136,"line_end":136,"column_start":6,"column_end":15},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":2395},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":174784,"byte_end":174793,"line_start":1102,"line_end":1102,"column_start":19,"column_end":28},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":2395},"to":{"krate":0,"index":2262}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":187094,"byte_end":187103,"line_start":1468,"line_end":1468,"column_start":27,"column_end":36},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":2395},"to":{"krate":2,"index":3125}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":187322,"byte_end":187331,"line_start":1477,"line_end":1477,"column_start":33,"column_end":42},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":2395},"to":{"krate":2,"index":3156}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":188715,"byte_end":188724,"line_start":1509,"line_end":1509,"column_start":27,"column_end":36},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":2395},"to":{"krate":2,"index":3130}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":188943,"byte_end":188952,"line_start":1518,"line_end":1518,"column_start":33,"column_end":42},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":2395},"to":{"krate":2,"index":3160}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":190177,"byte_end":190186,"line_start":1551,"line_end":1551,"column_start":25,"column_end":34},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":2395},"to":{"krate":2,"index":3130}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":190539,"byte_end":190560,"line_start":1566,"line_end":1566,"column_start":19,"column_end":40},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":2414},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":191137,"byte_end":191158,"line_start":1586,"line_end":1586,"column_start":28,"column_end":49},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":2414},"to":{"krate":2,"index":7859}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":191310,"byte_end":191332,"line_start":1593,"line_end":1593,"column_start":19,"column_end":41},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":2435},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":191847,"byte_end":191869,"line_start":1611,"line_end":1611,"column_start":28,"column_end":50},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":2435},"to":{"krate":2,"index":7859}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":192916,"byte_end":192925,"line_start":1639,"line_end":1639,"column_start":21,"column_end":30},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":2395},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":194184,"byte_end":194193,"line_start":1674,"line_end":1674,"column_start":23,"column_end":32},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":2395},"to":{"krate":2,"index":9692}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":194795,"byte_end":194804,"line_start":1696,"line_end":1696,"column_start":23,"column_end":32},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":2395},"to":{"krate":2,"index":12324}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":226115,"byte_end":226128,"line_start":67,"line_end":67,"column_start":6,"column_end":19},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":2456},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":252292,"byte_end":252305,"line_start":702,"line_end":702,"column_start":19,"column_end":32},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":2456},"to":{"krate":0,"index":2262}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":263361,"byte_end":263374,"line_start":1020,"line_end":1020,"column_start":19,"column_end":32},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":2456},"to":{"krate":0,"index":2281}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":269570,"byte_end":269583,"line_start":1192,"line_end":1192,"column_start":21,"column_end":34},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":2456},"to":{"krate":2,"index":9892}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":272134,"byte_end":272147,"line_start":1252,"line_end":1252,"column_start":27,"column_end":40},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":2456},"to":{"krate":2,"index":3125}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":272378,"byte_end":272391,"line_start":1261,"line_end":1261,"column_start":33,"column_end":46},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":2456},"to":{"krate":2,"index":3156}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":274838,"byte_end":274851,"line_start":1320,"line_end":1320,"column_start":27,"column_end":40},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":2456},"to":{"krate":2,"index":3130}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":275082,"byte_end":275095,"line_start":1329,"line_end":1329,"column_start":33,"column_end":46},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":2456},"to":{"krate":2,"index":3160}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":276969,"byte_end":276982,"line_start":1380,"line_end":1380,"column_start":29,"column_end":42},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":2456},"to":{"krate":2,"index":3130}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":278190,"byte_end":278203,"line_start":1416,"line_end":1416,"column_start":21,"column_end":34},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":2456},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":279301,"byte_end":279314,"line_start":1447,"line_end":1447,"column_start":23,"column_end":36},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":2456},"to":{"krate":2,"index":9692}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":280052,"byte_end":280065,"line_start":1469,"line_end":1469,"column_start":23,"column_end":36},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":2456},"to":{"krate":2,"index":12324}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\internals.rs","byte_start":324272,"byte_end":324281,"line_start":113,"line_end":113,"column_start":6,"column_end":15},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":2473},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\internals.rs","byte_start":325078,"byte_end":325087,"line_start":148,"line_end":148,"column_start":21,"column_end":30},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":2473},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\internals.rs","byte_start":333228,"byte_end":333230,"line_start":270,"line_end":270,"column_start":6,"column_end":8},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":2486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\internals.rs","byte_start":335309,"byte_end":335311,"line_start":359,"line_end":359,"column_start":21,"column_end":23},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":2486},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\internals.rs","byte_start":335910,"byte_end":335913,"line_start":380,"line_end":380,"column_start":6,"column_end":9},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":2498},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\internals.rs","byte_start":337876,"byte_end":337879,"line_start":469,"line_end":469,"column_start":21,"column_end":24},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":2498},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":352102,"byte_end":352109,"line_start":48,"line_end":48,"column_start":6,"column_end":13},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":2510},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":354655,"byte_end":354662,"line_start":130,"line_end":130,"column_start":21,"column_end":28},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":2510},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":363681,"byte_end":363690,"line_start":187,"line_end":187,"column_start":6,"column_end":15},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":2526},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":388080,"byte_end":388089,"line_start":803,"line_end":803,"column_start":19,"column_end":28},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":2526},"to":{"krate":0,"index":2281}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":395318,"byte_end":395327,"line_start":1016,"line_end":1016,"column_start":21,"column_end":30},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2526},"to":{"krate":2,"index":9892}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":398237,"byte_end":398246,"line_start":1078,"line_end":1078,"column_start":27,"column_end":36},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":2526},"to":{"krate":2,"index":3125}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":398427,"byte_end":398436,"line_start":1087,"line_end":1087,"column_start":33,"column_end":42},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2526},"to":{"krate":2,"index":3156}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":400942,"byte_end":400951,"line_start":1145,"line_end":1145,"column_start":27,"column_end":36},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":2526},"to":{"krate":2,"index":3130}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":401132,"byte_end":401141,"line_start":1154,"line_end":1154,"column_start":33,"column_end":42},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":2526},"to":{"krate":2,"index":3160}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":403612,"byte_end":403621,"line_start":1210,"line_end":1210,"column_start":25,"column_end":34},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":2526},"to":{"krate":2,"index":3130}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":405009,"byte_end":405018,"line_start":1247,"line_end":1247,"column_start":21,"column_end":30},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":2526},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":406871,"byte_end":406880,"line_start":1297,"line_end":1297,"column_start":23,"column_end":32},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":2526},"to":{"krate":2,"index":9692}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":407652,"byte_end":407661,"line_start":1322,"line_end":1322,"column_start":23,"column_end":32},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":2526},"to":{"krate":2,"index":12324}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":428944,"byte_end":428948,"line_start":57,"line_end":57,"column_start":20,"column_end":24},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":2543},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":437048,"byte_end":437052,"line_start":277,"line_end":277,"column_start":20,"column_end":24},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":2543},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":438929,"byte_end":438933,"line_start":336,"line_end":336,"column_start":33,"column_end":37},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":2543},"to":{"krate":0,"index":2262}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":440768,"byte_end":440772,"line_start":411,"line_end":411,"column_start":29,"column_end":33},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":2543},"to":{"krate":2,"index":3067}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":440852,"byte_end":440856,"line_start":412,"line_end":412,"column_start":36,"column_end":40},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":2543},"to":{"krate":2,"index":3057}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":440961,"byte_end":440965,"line_start":414,"line_end":414,"column_start":60,"column_end":64},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":2543},"to":{"krate":2,"index":2709}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":441085,"byte_end":441089,"line_start":420,"line_end":420,"column_start":27,"column_end":31},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":2543},"to":{"krate":2,"index":2714}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":441132,"byte_end":441136,"line_start":422,"line_end":422,"column_start":35,"column_end":39},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":2543},"to":{"krate":2,"index":2755}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":441288,"byte_end":441292,"line_start":428,"line_end":428,"column_start":28,"column_end":32},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":2543},"to":{"krate":2,"index":2745}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":441427,"byte_end":441431,"line_start":434,"line_end":434,"column_start":35,"column_end":39},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":2543},"to":{"krate":2,"index":9892}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":441570,"byte_end":441574,"line_start":440,"line_end":440,"column_start":41,"column_end":45},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":2543},"to":{"krate":2,"index":3125}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":441798,"byte_end":441802,"line_start":449,"line_end":449,"column_start":41,"column_end":45},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":2543},"to":{"krate":2,"index":3130}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":442023,"byte_end":442027,"line_start":458,"line_end":458,"column_start":38,"column_end":42},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":2543},"to":{"krate":2,"index":3130}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":442212,"byte_end":442216,"line_start":467,"line_end":467,"column_start":35,"column_end":39},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":2543},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":442390,"byte_end":442394,"line_start":473,"line_end":473,"column_start":37,"column_end":41},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":2543},"to":{"krate":2,"index":9692}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":445320,"byte_end":445328,"line_start":80,"line_end":80,"column_start":20,"column_end":28},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":2574},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":451375,"byte_end":451383,"line_start":257,"line_end":257,"column_start":30,"column_end":38},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":451889,"byte_end":451897,"line_start":269,"line_end":269,"column_start":30,"column_end":38},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":452307,"byte_end":452315,"line_start":279,"line_end":279,"column_start":38,"column_end":46},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":452767,"byte_end":452775,"line_start":291,"line_end":291,"column_start":38,"column_end":46},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":453223,"byte_end":453231,"line_start":303,"line_end":303,"column_start":32,"column_end":40},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":453669,"byte_end":453677,"line_start":315,"line_end":315,"column_start":32,"column_end":40},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":454393,"byte_end":454401,"line_start":333,"line_end":333,"column_start":6,"column_end":14},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":2574},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":457093,"byte_end":457101,"line_start":393,"line_end":393,"column_start":20,"column_end":28},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":2574},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":462583,"byte_end":462591,"line_start":535,"line_end":535,"column_start":33,"column_end":41},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":2574},"to":{"krate":0,"index":2262}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":464448,"byte_end":464456,"line_start":609,"line_end":609,"column_start":33,"column_end":41},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":2574},"to":{"krate":0,"index":2281}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":465496,"byte_end":465504,"line_start":649,"line_end":649,"column_start":29,"column_end":37},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":3067}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":465584,"byte_end":465592,"line_start":650,"line_end":650,"column_start":36,"column_end":44},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":3057}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":465701,"byte_end":465709,"line_start":652,"line_end":652,"column_start":64,"column_end":72},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":2709}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":465841,"byte_end":465849,"line_start":658,"line_end":658,"column_start":27,"column_end":35},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":2714}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":465922,"byte_end":465930,"line_start":660,"line_end":660,"column_start":65,"column_end":73},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":2755}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":466669,"byte_end":466677,"line_start":681,"line_end":681,"column_start":28,"column_end":36},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":2745}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":466824,"byte_end":466832,"line_start":687,"line_end":687,"column_start":35,"column_end":43},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":9892}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":466975,"byte_end":466983,"line_start":693,"line_end":693,"column_start":41,"column_end":49},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":3125}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":467219,"byte_end":467227,"line_start":702,"line_end":702,"column_start":41,"column_end":49},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":3130}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":467464,"byte_end":467472,"line_start":711,"line_end":711,"column_start":42,"column_end":50},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":3130}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":467661,"byte_end":467669,"line_start":720,"line_end":720,"column_start":35,"column_end":43},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":467843,"byte_end":467851,"line_start":726,"line_end":726,"column_start":37,"column_end":45},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":9692}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":468044,"byte_end":468052,"line_start":735,"line_end":735,"column_start":23,"column_end":31},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":12324}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":468278,"byte_end":468286,"line_start":744,"line_end":744,"column_start":23,"column_end":31},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":12324}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":468531,"byte_end":468539,"line_start":753,"line_end":753,"column_start":27,"column_end":35},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":469191,"byte_end":469199,"line_start":773,"line_end":773,"column_start":27,"column_end":35},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":469398,"byte_end":469408,"line_start":780,"line_end":780,"column_start":43,"column_end":53},"kind":{"Impl":{"id":119}},"from":{"krate":1,"index":11445},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":539821,"byte_end":539836,"line_start":141,"line_end":141,"column_start":16,"column_end":31},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1748},"to":{"krate":2,"index":2679}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":539926,"byte_end":539941,"line_start":147,"line_end":147,"column_start":20,"column_end":35},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1748},"to":{"krate":2,"index":2709}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":540047,"byte_end":540062,"line_start":153,"line_end":153,"column_start":13,"column_end":28},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1748},"to":{"krate":2,"index":2714}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":540087,"byte_end":540102,"line_start":155,"line_end":155,"column_start":21,"column_end":36},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1748},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":547391,"byte_end":547401,"line_start":358,"line_end":358,"column_start":23,"column_end":33},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":2788},"to":{"krate":2,"index":9692}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":548150,"byte_end":548160,"line_start":373,"line_end":373,"column_start":16,"column_end":26},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2788},"to":{"krate":1,"index":2546}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":574203,"byte_end":574209,"line_start":129,"line_end":129,"column_start":18,"column_end":24},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2829},"to":{"krate":2,"index":3035}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":574885,"byte_end":574891,"line_start":157,"line_end":157,"column_start":6,"column_end":12},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":2829},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":643796,"byte_end":643804,"line_start":458,"line_end":458,"column_start":23,"column_end":31},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":12324}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\strftime.rs","byte_start":692061,"byte_end":692074,"line_start":217,"line_end":217,"column_start":10,"column_end":23},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":2860},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\strftime.rs","byte_start":693569,"byte_end":693582,"line_start":266,"line_end":266,"column_start":23,"column_end":36},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":2860},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":563516,"byte_end":563529,"line_start":733,"line_end":733,"column_start":62,"column_end":75},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":2879},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":565502,"byte_end":565515,"line_start":794,"line_end":794,"column_start":79,"column_end":92},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":2879},"to":{"krate":2,"index":9692}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":566802,"byte_end":566809,"line_start":840,"line_end":840,"column_start":18,"column_end":25},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":2907},"to":{"krate":2,"index":12324}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":568767,"byte_end":568772,"line_start":914,"line_end":914,"column_start":18,"column_end":23},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":2951},"to":{"krate":2,"index":12324}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":712194,"byte_end":712195,"line_start":48,"line_end":48,"column_start":25,"column_end":26},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":2216},"to":{"krate":0,"index":2212}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":713892,"byte_end":713897,"line_start":102,"line_end":102,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":3062},"to":{"krate":0,"index":2220}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":715576,"byte_end":715584,"line_start":149,"line_end":149,"column_start":38,"column_end":46},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":2574},"to":{"krate":0,"index":2220}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":719046,"byte_end":719059,"line_start":244,"line_end":244,"column_start":23,"column_end":36},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":2889},"to":{"krate":2,"index":9692}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":719638,"byte_end":719651,"line_start":261,"line_end":261,"column_start":28,"column_end":41},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":2889},"to":{"krate":1,"index":2546}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27404,"byte_end":27411,"line_start":663,"line_end":663,"column_start":6,"column_end":13},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":2907},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":31402,"byte_end":31409,"line_start":773,"line_end":773,"column_start":23,"column_end":30},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":2907},"to":{"krate":2,"index":9692}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":32057,"byte_end":32064,"line_start":790,"line_end":790,"column_start":36,"column_end":43},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":2907},"to":{"krate":19,"index":333}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":33003,"byte_end":33020,"line_start":828,"line_end":828,"column_start":21,"column_end":38},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":2943},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37496,"byte_end":37501,"line_start":993,"line_end":993,"column_start":6,"column_end":11},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":2951},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":40731,"byte_end":40736,"line_start":1088,"line_end":1088,"column_start":36,"column_end":41},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":2951},"to":{"krate":19,"index":333}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":42065,"byte_end":42080,"line_start":1131,"line_end":1131,"column_start":21,"column_end":36},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":3002},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45168,"byte_end":45173,"line_start":1245,"line_end":1245,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":3062},"to":{"krate":0,"index":2262}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":49404,"byte_end":49409,"line_start":1363,"line_end":1363,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":3062},"to":{"krate":0,"index":2281}}]}