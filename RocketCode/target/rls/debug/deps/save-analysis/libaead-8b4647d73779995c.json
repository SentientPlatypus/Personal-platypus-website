{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3","program":"C:\\Users\\trexx\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","aead","--edition=2018","C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata,link","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","-C","metadata=8b4647d73779995c","-C","extra-filename=-8b4647d73779995c","--out-dir","c:\\Users\\trexx\\Documents\\PYTHON CODE LOL\\PersonalWebsite\\Personal-platypus-website\\RocketCode\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\trexx\\Documents\\PYTHON CODE LOL\\PersonalWebsite\\Personal-platypus-website\\RocketCode\\target\\rls\\debug\\deps","--extern","generic_array=c:\\Users\\trexx\\Documents\\PYTHON CODE LOL\\PersonalWebsite\\Personal-platypus-website\\RocketCode\\target\\rls\\debug\\deps\\libgeneric_array-8b44738782dbb3e5.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\trexx\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\trexx\\Documents\\PYTHON CODE LOL\\PersonalWebsite\\Personal-platypus-website\\RocketCode\\target\\rls\\debug\\deps\\libaead-8b4647d73779995c.rmeta"},"prelude":{"crate_id":{"name":"aead","disambiguator":[4347028073025204154,0]},"crate_root":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src","external_crates":[{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[1507510987272037120,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[3803325750332457499,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[4223354511651166533,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","num":4,"id":{"name":"alloc","disambiguator":[15700094508901508366,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","num":5,"id":{"name":"generic_array","disambiguator":[1243799999947525581,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","num":6,"id":{"name":"typenum","disambiguator":[1515727216883300365,0]}}],"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":0,"byte_end":18204,"line_start":1,"line_end":533,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":5,"index":0},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":1531,"byte_end":1544,"line_start":40,"line_end":40,"column_start":9,"column_end":22},"alias_span":null,"name":"generic_array","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":6,"index":2827},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":1562,"byte_end":1568,"line_start":40,"line_end":40,"column_start":40,"column_end":46},"alias_span":null,"name":"consts","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":0,"byte_end":18204,"line_start":1,"line_end":533,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":135},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":42},{"krate":0,"index":46},{"krate":0,"index":55},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":70},{"krate":0,"index":77},{"krate":0,"index":87},{"krate":0,"index":97},{"krate":0,"index":105},{"krate":0,"index":110},{"krate":0,"index":114},{"krate":0,"index":119}],"decl_id":null,"docs":" [Authenticated Encryption with Associated Data] (AEAD) traits","sig":null,"attributes":[{"value":"/ [Authenticated Encryption with Associated Data] (AEAD) traits","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":0,"byte_end":65,"line_start":1,"line_end":1,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":66,"byte_end":69,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate provides an abstract interface for AEAD ciphers, which guarantee","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":70,"byte_end":149,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/ both confidentiality and integrity, even from a powerful attacker who is","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":150,"byte_end":226,"line_start":4,"line_end":4,"column_start":1,"column_end":77}},{"value":"/ able to execute [chosen-ciphertext attacks]. The resulting security property,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":227,"byte_end":308,"line_start":5,"line_end":5,"column_start":1,"column_end":82}},{"value":"/ [ciphertext indistinguishability], is considered a basic requirement for","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":309,"byte_end":385,"line_start":6,"line_end":6,"column_start":1,"column_end":77}},{"value":"/ modern cryptographic implementations.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":386,"byte_end":427,"line_start":7,"line_end":7,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":428,"byte_end":431,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ See [RustCrypto/AEADs] for cipher implementations which use this trait.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":432,"byte_end":507,"line_start":9,"line_end":9,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":508,"byte_end":511,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [Authenticated Encryption with Associated Data]: https://en.wikipedia.org/wiki/Authenticated_encryption","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":512,"byte_end":619,"line_start":11,"line_end":11,"column_start":1,"column_end":108}},{"value":"/ [chosen-ciphertext attacks]: https://en.wikipedia.org/wiki/Chosen-ciphertext_attack","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":620,"byte_end":707,"line_start":12,"line_end":12,"column_start":1,"column_end":88}},{"value":"/ [ciphertext indistinguishability]: https://en.wikipedia.org/wiki/Ciphertext_indistinguishability","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":708,"byte_end":808,"line_start":13,"line_end":13,"column_start":1,"column_end":101}},{"value":"/ [RustCrypto/AEADs]: https://github.com/RustCrypto/AEADs","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":809,"byte_end":868,"line_start":14,"line_end":14,"column_start":1,"column_end":60}},{"value":"no_std","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":870,"byte_end":880,"line_start":16,"line_end":16,"column_start":1,"column_end":11}},{"value":"forbid(unsafe_code, clippy :: unwrap_used)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":920,"byte_end":964,"line_start":18,"line_end":18,"column_start":1,"column_end":45}},{"value":"warn(missing_docs, rust_2018_idioms)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":1212,"byte_end":1252,"line_start":24,"line_end":24,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":122},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":2180,"byte_end":2185,"line_start":64,"line_end":64,"column_start":12,"column_end":17},"name":"Error","qualname":"::Error","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error type.","sig":null,"attributes":[{"value":"/ Error type.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":1974,"byte_end":1989,"line_start":59,"line_end":59,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":1990,"byte_end":1993,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ This type is deliberately opaque as to avoid potential side-channel","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":1994,"byte_end":2065,"line_start":61,"line_end":61,"column_start":1,"column_end":72}},{"value":"/ leakage (e.g. padding oracle).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":2066,"byte_end":2100,"line_start":62,"line_end":62,"column_start":1,"column_end":35}}]},{"kind":"Type","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":2235,"byte_end":2241,"line_start":67,"line_end":67,"column_start":10,"column_end":16},"name":"Result","qualname":"::Result","value":"core::result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" Result type alias with [`Error`].\n","sig":null,"attributes":[{"value":"/ Result type alias with [`Error`].","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":2188,"byte_end":2225,"line_start":66,"line_end":66,"column_start":1,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":2582,"byte_end":2585,"line_start":80,"line_end":80,"column_start":10,"column_end":13},"name":"Key","qualname":"::Key","value":"GenericArray<u8, <A as NewAead>::KeySize>","parent":null,"children":[],"decl_id":null,"docs":" Key for a [`NewAead`] algorithm\n","sig":null,"attributes":[{"value":"/ Key for a [`NewAead`] algorithm","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":2478,"byte_end":2513,"line_start":78,"line_end":78,"column_start":1,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":34},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":2708,"byte_end":2713,"line_start":83,"line_end":83,"column_start":10,"column_end":15},"name":"Nonce","qualname":"::Nonce","value":"GenericArray<u8, <A as AeadCore>::NonceSize>","parent":null,"children":[],"decl_id":null,"docs":" Nonce: single-use value for ensuring ciphertexts are unique\n","sig":null,"attributes":[{"value":"/ Nonce: single-use value for ensuring ciphertexts are unique","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":2635,"byte_end":2698,"line_start":82,"line_end":82,"column_start":1,"column_end":64}}]},{"kind":"Type","id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":2844,"byte_end":2847,"line_start":86,"line_end":86,"column_start":10,"column_end":13},"name":"Tag","qualname":"::Tag","value":"GenericArray<u8, <A as AeadCore>::TagSize>","parent":null,"children":[],"decl_id":null,"docs":" Tag: authentication code which ensures ciphertexts are authentic\n","sig":null,"attributes":[{"value":"/ Tag: authentication code which ensures ciphertexts are authentic","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":2766,"byte_end":2834,"line_start":85,"line_end":85,"column_start":1,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":38},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":2987,"byte_end":2994,"line_start":89,"line_end":89,"column_start":11,"column_end":18},"name":"NewAead","qualname":"::NewAead","value":"NewAead","parent":null,"children":[{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41}],"decl_id":null,"docs":" Instantiate either a stateless [`Aead`] or stateful [`AeadMut`] algorithm.\n","sig":null,"attributes":[{"value":"/ Instantiate either a stateless [`Aead`] or stateful [`AeadMut`] algorithm.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":2898,"byte_end":2976,"line_start":88,"line_end":88,"column_start":1,"column_end":79}}]},{"kind":"Type","id":{"krate":0,"index":39},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":3068,"byte_end":3075,"line_start":91,"line_end":91,"column_start":10,"column_end":17},"name":"KeySize","qualname":"::NewAead::KeySize","value":"type KeySize: ArrayLength<u8>;","parent":{"krate":0,"index":38},"children":[],"decl_id":null,"docs":" The size of the key array required by this algorithm.\n","sig":null,"attributes":[{"value":"/ The size of the key array required by this algorithm.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":3001,"byte_end":3058,"line_start":90,"line_end":90,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":3157,"byte_end":3160,"line_start":94,"line_end":94,"column_start":8,"column_end":11},"name":"new","qualname":"::NewAead::new","value":"pub fn new(&Key<Self>) -> Self","parent":{"krate":0,"index":38},"children":[],"decl_id":null,"docs":" Create a new AEAD instance with the given key.\n","sig":null,"attributes":[{"value":"/ Create a new AEAD instance with the given key.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":3099,"byte_end":3149,"line_start":93,"line_end":93,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":3354,"byte_end":3368,"line_start":99,"line_end":99,"column_start":8,"column_end":22},"name":"new_from_slice","qualname":"::NewAead::new_from_slice","value":"pub fn new_from_slice(&[u8]) -> Result<Self> where Self: Sized","parent":{"krate":0,"index":38},"children":[],"decl_id":null,"docs":" Create new AEAD instance from key given as a byte slice..","sig":null,"attributes":[{"value":"/ Create new AEAD instance from key given as a byte slice..","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":3192,"byte_end":3253,"line_start":96,"line_end":96,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":3258,"byte_end":3261,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ Default implementation will accept only keys with length equal to `KeySize`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":3266,"byte_end":3346,"line_start":98,"line_end":98,"column_start":5,"column_end":85}}]},{"kind":"Trait","id":{"krate":0,"index":42},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":4131,"byte_end":4139,"line_start":124,"line_end":124,"column_start":11,"column_end":19},"name":"AeadCore","qualname":"::AeadCore","value":"AeadCore","parent":null,"children":[{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45}],"decl_id":null,"docs":" Authenticated Encryption with Associated Data (AEAD) algorithm core trait.","sig":null,"attributes":[{"value":"/ Authenticated Encryption with Associated Data (AEAD) algorithm core trait.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":3940,"byte_end":4018,"line_start":120,"line_end":120,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":4019,"byte_end":4022,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ Defines nonce, tag, and overhead sizes that are consumed by various other","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":4023,"byte_end":4100,"line_start":122,"line_end":122,"column_start":1,"column_end":78}},{"value":"/ `Aead*` traits.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":4101,"byte_end":4120,"line_start":123,"line_end":123,"column_start":1,"column_end":20}}]},{"kind":"Type","id":{"krate":0,"index":43},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":4182,"byte_end":4191,"line_start":126,"line_end":126,"column_start":10,"column_end":19},"name":"NonceSize","qualname":"::AeadCore::NonceSize","value":"type NonceSize: ArrayLength<u8>;","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" The length of a nonce.\n","sig":null,"attributes":[{"value":"/ The length of a nonce.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":4146,"byte_end":4172,"line_start":125,"line_end":125,"column_start":5,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":4261,"byte_end":4268,"line_start":129,"line_end":129,"column_start":10,"column_end":17},"name":"TagSize","qualname":"::AeadCore::TagSize","value":"type TagSize: ArrayLength<u8>;","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" The maximum length of the nonce.\n","sig":null,"attributes":[{"value":"/ The maximum length of the nonce.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":4215,"byte_end":4251,"line_start":128,"line_end":128,"column_start":5,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":45},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":4406,"byte_end":4424,"line_start":133,"line_end":133,"column_start":10,"column_end":28},"name":"CiphertextOverhead","qualname":"::AeadCore::CiphertextOverhead","value":"type CiphertextOverhead: ArrayLength<u8> + Unsigned;","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" The upper bound amount of additional space required to support a\n ciphertext vs. a plaintext.\n","sig":null,"attributes":[{"value":"/ The upper bound amount of additional space required to support a","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":4292,"byte_end":4360,"line_start":131,"line_end":131,"column_start":5,"column_end":73}},{"value":"/ ciphertext vs. a plaintext.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":4365,"byte_end":4396,"line_start":132,"line_end":132,"column_start":5,"column_end":36}}]},{"kind":"Trait","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":4738,"byte_end":4742,"line_start":142,"line_end":142,"column_start":11,"column_end":15},"name":"Aead","qualname":"::Aead","value":"Aead: AeadCore","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":51}],"decl_id":null,"docs":" Authenticated Encryption with Associated Data (AEAD) algorithm.","sig":null,"attributes":[{"value":"/ Authenticated Encryption with Associated Data (AEAD) algorithm.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":4457,"byte_end":4524,"line_start":136,"line_end":136,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":4525,"byte_end":4528,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ This trait is intended for use with stateless AEAD algorithms. The","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":4529,"byte_end":4599,"line_start":138,"line_end":138,"column_start":1,"column_end":71}},{"value":"/ [`AeadMut`] trait provides a stateful interface.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":4600,"byte_end":4652,"line_start":139,"line_end":139,"column_start":1,"column_end":53}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":4653,"byte_end":4678,"line_start":140,"line_end":140,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":5948,"byte_end":5955,"line_start":166,"line_end":166,"column_start":8,"column_end":15},"name":"encrypt","qualname":"::Aead::encrypt","value":"pub fn encrypt<'msg, 'aad,\nimpl Into<Payload<'msg, 'aad>>: Into<Payload>>(&Self, &Nonce<Self>,\nimpl Into<Payload<'msg, 'aad>>) -> Result<Vec<u8>>","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Encrypt the given plaintext payload, and return the resulting\n ciphertext as a vector of bytes.","sig":null,"attributes":[{"value":"/ Encrypt the given plaintext payload, and return the resulting","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":4759,"byte_end":4824,"line_start":143,"line_end":143,"column_start":5,"column_end":70}},{"value":"/ ciphertext as a vector of bytes.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":4829,"byte_end":4865,"line_start":144,"line_end":144,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":4870,"byte_end":4873,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ The [`Payload`] type can be used to provide Additional Associated Data","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":4878,"byte_end":4952,"line_start":146,"line_end":146,"column_start":5,"column_end":79}},{"value":"/ (AAD) along with the message: this is an optional bytestring which is","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":4957,"byte_end":5030,"line_start":147,"line_end":147,"column_start":5,"column_end":78}},{"value":"/ not encrypted, but *is* authenticated along with the message. Failure","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":5035,"byte_end":5108,"line_start":148,"line_end":148,"column_start":5,"column_end":78}},{"value":"/ to pass the same AAD that was used during encryption will cause","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":5113,"byte_end":5180,"line_start":149,"line_end":149,"column_start":5,"column_end":72}},{"value":"/ decryption to fail, which is useful if you would like to \"bind\" the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":5185,"byte_end":5256,"line_start":150,"line_end":150,"column_start":5,"column_end":76}},{"value":"/ ciphertext to some other identifier, like a digital signature key","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":5261,"byte_end":5330,"line_start":151,"line_end":151,"column_start":5,"column_end":74}},{"value":"/ or other identifier.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":5335,"byte_end":5359,"line_start":152,"line_end":152,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":5364,"byte_end":5367,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ If you don't care about AAD and just want to encrypt a plaintext","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":5372,"byte_end":5440,"line_start":154,"line_end":154,"column_start":5,"column_end":73}},{"value":"/ message, `&[u8]` will automatically be coerced into a `Payload`:","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":5445,"byte_end":5513,"line_start":155,"line_end":155,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":5518,"byte_end":5521,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ ```nobuild","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":5526,"byte_end":5540,"line_start":157,"line_end":157,"column_start":5,"column_end":19}},{"value":"/ let plaintext = b\"Top secret message, handle with care\";","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":5545,"byte_end":5605,"line_start":158,"line_end":158,"column_start":5,"column_end":65}},{"value":"/ let ciphertext = cipher.encrypt(nonce, plaintext);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":5610,"byte_end":5664,"line_start":159,"line_end":159,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":5669,"byte_end":5676,"line_start":160,"line_end":160,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":5681,"byte_end":5684,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ The default implementation assumes a postfix tag (ala AES-GCM,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":5689,"byte_end":5755,"line_start":162,"line_end":162,"column_start":5,"column_end":71}},{"value":"/ AES-GCM-SIV, ChaCha20Poly1305). [`Aead`] implementations which do not","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":5760,"byte_end":5833,"line_start":163,"line_end":163,"column_start":5,"column_end":78}},{"value":"/ use a postfix tag will need to override this to correctly assemble the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":5838,"byte_end":5912,"line_start":164,"line_end":164,"column_start":5,"column_end":79}},{"value":"/ ciphertext message.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":5917,"byte_end":5940,"line_start":165,"line_end":165,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":6794,"byte_end":6801,"line_start":189,"line_end":189,"column_start":8,"column_end":15},"name":"decrypt","qualname":"::Aead::decrypt","value":"pub fn decrypt<'msg, 'aad,\nimpl Into<Payload<'msg, 'aad>>: Into<Payload>>(&Self, &Nonce<Self>,\nimpl Into<Payload<'msg, 'aad>>) -> Result<Vec<u8>>","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Decrypt the given ciphertext slice, and return the resulting plaintext\n as a vector of bytes.","sig":null,"attributes":[{"value":"/ Decrypt the given ciphertext slice, and return the resulting plaintext","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":6095,"byte_end":6169,"line_start":172,"line_end":172,"column_start":5,"column_end":79}},{"value":"/ as a vector of bytes.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":6174,"byte_end":6199,"line_start":173,"line_end":173,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":6204,"byte_end":6207,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ See notes on [`Aead::encrypt()`] about allowable message payloads and","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":6212,"byte_end":6285,"line_start":175,"line_end":175,"column_start":5,"column_end":78}},{"value":"/ Associated Additional Data (AAD).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":6290,"byte_end":6327,"line_start":176,"line_end":176,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":6332,"byte_end":6335,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ If you have no AAD, you can call this as follows:","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":6340,"byte_end":6393,"line_start":178,"line_end":178,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":6398,"byte_end":6401,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ ```nobuild","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":6406,"byte_end":6420,"line_start":180,"line_end":180,"column_start":5,"column_end":19}},{"value":"/ let ciphertext = b\"...\";","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":6425,"byte_end":6453,"line_start":181,"line_end":181,"column_start":5,"column_end":33}},{"value":"/ let plaintext = cipher.decrypt(nonce, ciphertext)?;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":6458,"byte_end":6513,"line_start":182,"line_end":182,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":6518,"byte_end":6525,"line_start":183,"line_end":183,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":6530,"byte_end":6533,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ The default implementation assumes a postfix tag (ala AES-GCM,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":6538,"byte_end":6604,"line_start":185,"line_end":185,"column_start":5,"column_end":71}},{"value":"/ AES-GCM-SIV, ChaCha20Poly1305). [`Aead`] implementations which do not","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":6609,"byte_end":6682,"line_start":186,"line_end":186,"column_start":5,"column_end":78}},{"value":"/ use a postfix tag will need to override this to correctly parse the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":6687,"byte_end":6758,"line_start":187,"line_end":187,"column_start":5,"column_end":76}},{"value":"/ ciphertext message.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":6763,"byte_end":6786,"line_start":188,"line_end":188,"column_start":5,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":55},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":7095,"byte_end":7102,"line_start":199,"line_end":199,"column_start":11,"column_end":18},"name":"AeadMut","qualname":"::AeadMut","value":"AeadMut: AeadCore","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":60}],"decl_id":null,"docs":" Stateful Authenticated Encryption with Associated Data algorithm.\n","sig":null,"attributes":[{"value":"/ Stateful Authenticated Encryption with Associated Data algorithm.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":6940,"byte_end":7009,"line_start":196,"line_end":196,"column_start":1,"column_end":70}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":7010,"byte_end":7035,"line_start":197,"line_end":197,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":7359,"byte_end":7366,"line_start":205,"line_end":205,"column_start":8,"column_end":15},"name":"encrypt","qualname":"::AeadMut::encrypt","value":"pub fn encrypt<'msg, 'aad,\nimpl Into<Payload<'msg, 'aad>>: Into<Payload>>(&mut Self, &Nonce<Self>,\nimpl Into<Payload<'msg, 'aad>>) -> Result<Vec<u8>>","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" Encrypt the given plaintext slice, and return the resulting ciphertext\n as a vector of bytes.","sig":null,"attributes":[{"value":"/ Encrypt the given plaintext slice, and return the resulting ciphertext","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":7119,"byte_end":7193,"line_start":200,"line_end":200,"column_start":5,"column_end":79}},{"value":"/ as a vector of bytes.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":7198,"byte_end":7223,"line_start":201,"line_end":201,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":7228,"byte_end":7231,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ See notes on [`Aead::encrypt()`] about allowable message payloads and","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":7236,"byte_end":7309,"line_start":203,"line_end":203,"column_start":5,"column_end":78}},{"value":"/ Associated Additional Data (AAD).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":7314,"byte_end":7351,"line_start":204,"line_end":204,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":7774,"byte_end":7781,"line_start":216,"line_end":216,"column_start":8,"column_end":15},"name":"decrypt","qualname":"::AeadMut::decrypt","value":"pub fn decrypt<'msg, 'aad,\nimpl Into<Payload<'msg, 'aad>>: Into<Payload>>(&mut Self, &Nonce<Self>,\nimpl Into<Payload<'msg, 'aad>>) -> Result<Vec<u8>>","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" Decrypt the given ciphertext slice, and return the resulting plaintext\n as a vector of bytes.","sig":null,"attributes":[{"value":"/ Decrypt the given ciphertext slice, and return the resulting plaintext","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":7510,"byte_end":7584,"line_start":211,"line_end":211,"column_start":5,"column_end":79}},{"value":"/ as a vector of bytes.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":7589,"byte_end":7614,"line_start":212,"line_end":212,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":7619,"byte_end":7622,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ See notes on [`Aead::encrypt()`] and [`Aead::decrypt()`] about allowable","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":7627,"byte_end":7703,"line_start":214,"line_end":214,"column_start":5,"column_end":81}},{"value":"/ message payloads and Associated Additional Data (AAD).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":7708,"byte_end":7766,"line_start":215,"line_end":215,"column_start":5,"column_end":63}}]},{"kind":"Trait","id":{"krate":0,"index":65},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":8832,"byte_end":8843,"line_start":245,"line_end":245,"column_start":11,"column_end":22},"name":"AeadInPlace","qualname":"::AeadInPlace","value":"AeadInPlace: AeadCore","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69}],"decl_id":null,"docs":" In-place stateless AEAD trait.","sig":null,"attributes":[{"value":"/ In-place stateless AEAD trait.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":8703,"byte_end":8737,"line_start":242,"line_end":242,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":8738,"byte_end":8741,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ This trait is both object safe and has no dependencies on `alloc` or `std`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":8742,"byte_end":8821,"line_start":244,"line_end":244,"column_start":1,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":9333,"byte_end":9349,"line_start":255,"line_end":255,"column_start":8,"column_end":24},"name":"encrypt_in_place","qualname":"::AeadInPlace::encrypt_in_place","value":"pub fn encrypt_in_place(&Self, &Nonce<Self>, &[u8], &mut dyn Buffer)\n-> Result<()>","parent":{"krate":0,"index":65},"children":[],"decl_id":null,"docs":" Encrypt the given buffer containing a plaintext message in-place.","sig":null,"attributes":[{"value":"/ Encrypt the given buffer containing a plaintext message in-place.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":8860,"byte_end":8929,"line_start":246,"line_end":246,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":8934,"byte_end":8937,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ The buffer must have sufficient capacity to store the ciphertext","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":8942,"byte_end":9010,"line_start":248,"line_end":248,"column_start":5,"column_end":73}},{"value":"/ message, which will always be larger than the original plaintext.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":9015,"byte_end":9084,"line_start":249,"line_end":249,"column_start":5,"column_end":74}},{"value":"/ The exact size needed is cipher-dependent, but generally includes","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":9089,"byte_end":9158,"line_start":250,"line_end":250,"column_start":5,"column_end":74}},{"value":"/ the size of an authentication tag.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":9163,"byte_end":9201,"line_start":251,"line_end":251,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":9206,"byte_end":9209,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the buffer has insufficient capacity to store the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":9214,"byte_end":9287,"line_start":253,"line_end":253,"column_start":5,"column_end":78}},{"value":"/ resulting ciphertext message.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":9292,"byte_end":9325,"line_start":254,"line_end":254,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":9722,"byte_end":9747,"line_start":267,"line_end":267,"column_start":8,"column_end":33},"name":"encrypt_in_place_detached","qualname":"::AeadInPlace::encrypt_in_place_detached","value":"pub fn encrypt_in_place_detached(&Self, &Nonce<Self>, &[u8], &mut [u8])\n-> Result<Tag<Self>>","parent":{"krate":0,"index":65},"children":[],"decl_id":null,"docs":" Encrypt the data in-place, returning the authentication tag\n","sig":null,"attributes":[{"value":"/ Encrypt the data in-place, returning the authentication tag","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":9651,"byte_end":9714,"line_start":266,"line_end":266,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":10150,"byte_end":10166,"line_start":279,"line_end":279,"column_start":8,"column_end":24},"name":"decrypt_in_place","qualname":"::AeadInPlace::decrypt_in_place","value":"pub fn decrypt_in_place(&Self, &Nonce<Self>, &[u8], &mut dyn Buffer)\n-> Result<()>","parent":{"krate":0,"index":65},"children":[],"decl_id":null,"docs":" Decrypt the message in-place, returning an error in the event the\n provided authentication tag does not match the given ciphertext.","sig":null,"attributes":[{"value":"/ Decrypt the message in-place, returning an error in the event the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":9885,"byte_end":9954,"line_start":274,"line_end":274,"column_start":5,"column_end":74}},{"value":"/ provided authentication tag does not match the given ciphertext.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":9959,"byte_end":10027,"line_start":275,"line_end":275,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":10032,"byte_end":10035,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ The buffer will be truncated to the length of the original plaintext","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":10040,"byte_end":10112,"line_start":277,"line_end":277,"column_start":5,"column_end":77}},{"value":"/ message upon success.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":10117,"byte_end":10142,"line_start":278,"line_end":278,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":10578,"byte_end":10603,"line_start":291,"line_end":291,"column_start":8,"column_end":33},"name":"decrypt_in_place_detached","qualname":"::AeadInPlace::decrypt_in_place_detached","value":"pub fn decrypt_in_place_detached(&Self, &Nonce<Self>, &[u8], &mut [u8],\n&Tag<Self>) -> Result<()>","parent":{"krate":0,"index":65},"children":[],"decl_id":null,"docs":" Decrypt the message in-place, returning an error in the event the provided\n authentication tag does not match the given ciphertext (i.e. ciphertext\n is modified/unauthentic)\n","sig":null,"attributes":[{"value":"/ Decrypt the message in-place, returning an error in the event the provided","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":10379,"byte_end":10457,"line_start":288,"line_end":288,"column_start":5,"column_end":83}},{"value":"/ authentication tag does not match the given ciphertext (i.e. ciphertext","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":10462,"byte_end":10537,"line_start":289,"line_end":289,"column_start":5,"column_end":80}},{"value":"/ is modified/unauthentic)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":10542,"byte_end":10570,"line_start":290,"line_end":290,"column_start":5,"column_end":33}}]},{"kind":"Trait","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":10885,"byte_end":10899,"line_start":303,"line_end":303,"column_start":11,"column_end":25},"name":"AeadMutInPlace","qualname":"::AeadMutInPlace","value":"AeadMutInPlace: AeadCore","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":76}],"decl_id":null,"docs":" In-place stateful AEAD trait.","sig":null,"attributes":[{"value":"/ In-place stateful AEAD trait.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":10757,"byte_end":10790,"line_start":300,"line_end":300,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":10791,"byte_end":10794,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ This trait is both object safe and has no dependencies on `alloc` or `std`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":10795,"byte_end":10874,"line_start":302,"line_end":302,"column_start":1,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":11389,"byte_end":11405,"line_start":313,"line_end":313,"column_start":8,"column_end":24},"name":"encrypt_in_place","qualname":"::AeadMutInPlace::encrypt_in_place","value":"pub fn encrypt_in_place<impl Buffer: Buffer>(&mut Self, &Nonce<Self>, &[u8],\n&mut impl Buffer) -> Result<()>","parent":{"krate":0,"index":70},"children":[],"decl_id":null,"docs":" Encrypt the given buffer containing a plaintext message in-place.","sig":null,"attributes":[{"value":"/ Encrypt the given buffer containing a plaintext message in-place.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":10916,"byte_end":10985,"line_start":304,"line_end":304,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":10990,"byte_end":10993,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ The buffer must have sufficient capacity to store the ciphertext","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":10998,"byte_end":11066,"line_start":306,"line_end":306,"column_start":5,"column_end":73}},{"value":"/ message, which will always be larger than the original plaintext.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":11071,"byte_end":11140,"line_start":307,"line_end":307,"column_start":5,"column_end":74}},{"value":"/ The exact size needed is cipher-dependent, but generally includes","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":11145,"byte_end":11214,"line_start":308,"line_end":308,"column_start":5,"column_end":74}},{"value":"/ the size of an authentication tag.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":11219,"byte_end":11257,"line_start":309,"line_end":309,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":11262,"byte_end":11265,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the buffer has insufficient capacity to store the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":11270,"byte_end":11343,"line_start":311,"line_end":311,"column_start":5,"column_end":78}},{"value":"/ resulting ciphertext message.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":11348,"byte_end":11381,"line_start":312,"line_end":312,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":11783,"byte_end":11808,"line_start":325,"line_end":325,"column_start":8,"column_end":33},"name":"encrypt_in_place_detached","qualname":"::AeadMutInPlace::encrypt_in_place_detached","value":"pub fn encrypt_in_place_detached(&mut Self, &Nonce<Self>, &[u8], &mut [u8])\n-> Result<Tag<Self>>","parent":{"krate":0,"index":70},"children":[],"decl_id":null,"docs":" Encrypt the data in-place, returning the authentication tag\n","sig":null,"attributes":[{"value":"/ Encrypt the data in-place, returning the authentication tag","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":11712,"byte_end":11775,"line_start":324,"line_end":324,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":12215,"byte_end":12231,"line_start":337,"line_end":337,"column_start":8,"column_end":24},"name":"decrypt_in_place","qualname":"::AeadMutInPlace::decrypt_in_place","value":"pub fn decrypt_in_place<impl Buffer: Buffer>(&mut Self, &Nonce<Self>, &[u8],\n&mut impl Buffer) -> Result<()>","parent":{"krate":0,"index":70},"children":[],"decl_id":null,"docs":" Decrypt the message in-place, returning an error in the event the\n provided authentication tag does not match the given ciphertext.","sig":null,"attributes":[{"value":"/ Decrypt the message in-place, returning an error in the event the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":11950,"byte_end":12019,"line_start":332,"line_end":332,"column_start":5,"column_end":74}},{"value":"/ provided authentication tag does not match the given ciphertext.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":12024,"byte_end":12092,"line_start":333,"line_end":333,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":12097,"byte_end":12100,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ The buffer will be truncated to the length of the original plaintext","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":12105,"byte_end":12177,"line_start":335,"line_end":335,"column_start":5,"column_end":77}},{"value":"/ message upon success.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":12182,"byte_end":12207,"line_start":336,"line_end":336,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":12645,"byte_end":12670,"line_start":349,"line_end":349,"column_start":8,"column_end":33},"name":"decrypt_in_place_detached","qualname":"::AeadMutInPlace::decrypt_in_place_detached","value":"pub fn decrypt_in_place_detached(&mut Self, &Nonce<Self>, &[u8], &mut [u8],\n&Tag<Self>) -> Result<()>","parent":{"krate":0,"index":70},"children":[],"decl_id":null,"docs":" Decrypt the data in-place, returning an error in the event the provided\n authentication tag does not match the given ciphertext (i.e. ciphertext\n is modified/unauthentic)\n","sig":null,"attributes":[{"value":"/ Decrypt the data in-place, returning an error in the event the provided","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":12449,"byte_end":12524,"line_start":346,"line_end":346,"column_start":5,"column_end":80}},{"value":"/ authentication tag does not match the given ciphertext (i.e. ciphertext","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":12529,"byte_end":12604,"line_start":347,"line_end":347,"column_start":5,"column_end":80}},{"value":"/ is modified/unauthentic)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":12609,"byte_end":12637,"line_start":348,"line_end":348,"column_start":5,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":105},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":16023,"byte_end":16030,"line_start":457,"line_end":457,"column_start":12,"column_end":19},"name":"Payload","qualname":"::Payload","value":"Payload { msg, aad }","parent":null,"children":[{"krate":0,"index":108},{"krate":0,"index":109}],"decl_id":null,"docs":" AEAD payloads are a combination of a message (plaintext or ciphertext)\n and \"additional associated data\" (AAD) to be authenticated (in cleartext)\n along with the message.","sig":null,"attributes":[{"value":"/ AEAD payloads are a combination of a message (plaintext or ciphertext)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":15603,"byte_end":15677,"line_start":449,"line_end":449,"column_start":1,"column_end":75}},{"value":"/ and \"additional associated data\" (AAD) to be authenticated (in cleartext)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":15678,"byte_end":15755,"line_start":450,"line_end":450,"column_start":1,"column_end":78}},{"value":"/ along with the message.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":15756,"byte_end":15783,"line_start":451,"line_end":451,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":15784,"byte_end":15787,"line_start":452,"line_end":452,"column_start":1,"column_end":4}},{"value":"/ If you don't care about AAD, you can pass a `&[u8]` as the payload to","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":15788,"byte_end":15861,"line_start":453,"line_end":453,"column_start":1,"column_end":74}},{"value":"/ `encrypt`/`decrypt` and it will automatically be coerced to this type.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":15862,"byte_end":15936,"line_start":454,"line_end":454,"column_start":1,"column_end":75}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":15937,"byte_end":15962,"line_start":455,"line_end":455,"column_start":1,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":108},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":16095,"byte_end":16098,"line_start":459,"line_end":459,"column_start":9,"column_end":12},"name":"msg","qualname":"::Payload::msg","value":"&'msg [u8]","parent":{"krate":0,"index":105},"children":[],"decl_id":null,"docs":" Message to be encrypted/decrypted\n","sig":null,"attributes":[{"value":"/ Message to be encrypted/decrypted","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":16049,"byte_end":16086,"line_start":458,"line_end":458,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":109},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":16384,"byte_end":16387,"line_start":465,"line_end":465,"column_start":9,"column_end":12},"name":"aad","qualname":"::Payload::aad","value":"&'aad [u8]","parent":{"krate":0,"index":105},"children":[],"decl_id":null,"docs":" Optional \"additional associated data\" to authenticate along with\n this message. If AAD is provided at the time the message is encrypted,\n the same AAD *MUST* be provided at the time the message is decrypted,\n or decryption will fail.\n","sig":null,"attributes":[{"value":"/ Optional \"additional associated data\" to authenticate along with","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":16117,"byte_end":16185,"line_start":461,"line_end":461,"column_start":5,"column_end":73}},{"value":"/ this message. If AAD is provided at the time the message is encrypted,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":16190,"byte_end":16264,"line_start":462,"line_end":462,"column_start":5,"column_end":79}},{"value":"/ the same AAD *MUST* be provided at the time the message is decrypted,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":16269,"byte_end":16342,"line_start":463,"line_end":463,"column_start":5,"column_end":78}},{"value":"/ or decryption will fail.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":16347,"byte_end":16375,"line_start":464,"line_end":464,"column_start":5,"column_end":33}}]},{"kind":"Trait","id":{"krate":0,"index":114},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":16743,"byte_end":16749,"line_start":479,"line_end":479,"column_start":11,"column_end":17},"name":"Buffer","qualname":"::Buffer","value":"Buffer: AsRef<[u8]> + AsMut<[u8]>","parent":null,"children":[{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118}],"decl_id":null,"docs":" In-place encryption/decryption byte buffers.","sig":null,"attributes":[{"value":"/ In-place encryption/decryption byte buffers.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":16569,"byte_end":16617,"line_start":475,"line_end":475,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":16618,"byte_end":16621,"line_start":476,"line_end":476,"column_start":1,"column_end":4}},{"value":"/ This trait defines the set of methods needed to support in-place operations","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":16622,"byte_end":16701,"line_start":477,"line_end":477,"column_start":1,"column_end":80}},{"value":"/ on a `Vec`-like data type.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":16702,"byte_end":16732,"line_start":478,"line_end":478,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":16823,"byte_end":16826,"line_start":481,"line_end":481,"column_start":8,"column_end":11},"name":"len","qualname":"::Buffer::len","value":"pub fn len(&Self) -> usize","parent":{"krate":0,"index":114},"children":[],"decl_id":null,"docs":" Get the length of the buffer\n","sig":null,"attributes":[{"value":"/ Get the length of the buffer","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":16783,"byte_end":16815,"line_start":480,"line_end":480,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":16916,"byte_end":16924,"line_start":486,"line_end":486,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::Buffer::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":{"krate":0,"index":114},"children":[],"decl_id":null,"docs":" Is the buffer empty?\n","sig":null,"attributes":[{"value":"/ Is the buffer empty?","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":16884,"byte_end":16908,"line_start":485,"line_end":485,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":17037,"byte_end":17054,"line_start":491,"line_end":491,"column_start":8,"column_end":25},"name":"extend_from_slice","qualname":"::Buffer::extend_from_slice","value":"pub fn extend_from_slice(&mut Self, &[u8]) -> Result<()>","parent":{"krate":0,"index":114},"children":[],"decl_id":null,"docs":" Extend this buffer from the given slice\n","sig":null,"attributes":[{"value":"/ Extend this buffer from the given slice","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":16986,"byte_end":17029,"line_start":490,"line_end":490,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":17150,"byte_end":17158,"line_start":494,"line_end":494,"column_start":8,"column_end":16},"name":"truncate","qualname":"::Buffer::truncate","value":"pub fn truncate(&mut Self, usize)","parent":{"krate":0,"index":114},"children":[],"decl_id":null,"docs":" Truncate this buffer to the given size\n","sig":null,"attributes":[{"value":"/ Truncate this buffer to the given size","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":17100,"byte_end":17142,"line_start":493,"line_end":493,"column_start":5,"column_end":47}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":2302,"byte_end":2307,"line_start":69,"line_end":69,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":12886,"byte_end":12889,"line_start":359,"line_end":359,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":13710,"byte_end":13713,"line_start":385,"line_end":385,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":93}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":14520,"byte_end":14523,"line_start":410,"line_end":410,"column_start":43,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":99},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":16468,"byte_end":16475,"line_start":469,"line_end":469,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":17228,"byte_end":17231,"line_start":498,"line_end":498,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":120},{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":2302,"byte_end":2307,"line_start":69,"line_end":69,"column_start":23,"column_end":28},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":122},"to":{"krate":1,"index":9692}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":4744,"byte_end":4752,"line_start":142,"line_end":142,"column_start":17,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":42},"to":{"krate":0,"index":46}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":7104,"byte_end":7112,"line_start":199,"line_end":199,"column_start":20,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":42},"to":{"krate":0,"index":55}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":8845,"byte_end":8853,"line_start":245,"line_end":245,"column_start":24,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":42},"to":{"krate":0,"index":65}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":10901,"byte_end":10909,"line_start":303,"line_end":303,"column_start":27,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":42},"to":{"krate":0,"index":70}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":12886,"byte_end":12889,"line_start":359,"line_end":359,"column_start":33,"column_end":36},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":78},"to":{"krate":0,"index":46}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":13710,"byte_end":13713,"line_start":385,"line_end":385,"column_start":39,"column_end":42},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":88},"to":{"krate":0,"index":55}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":14520,"byte_end":14523,"line_start":410,"line_end":410,"column_start":43,"column_end":46},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":98},"to":{"krate":0,"index":70}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":16468,"byte_end":16475,"line_start":469,"line_end":469,"column_start":39,"column_end":46},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":105},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":16751,"byte_end":16756,"line_start":479,"line_end":479,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":2954},"to":{"krate":0,"index":114}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":16765,"byte_end":16770,"line_start":479,"line_end":479,"column_start":33,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":2957},"to":{"krate":0,"index":114}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.4.3\\src\\lib.rs","byte_start":17228,"byte_end":17231,"line_start":498,"line_end":498,"column_start":17,"column_end":20},"kind":{"Impl":{"id":5}},"from":{"krate":4,"index":7089},"to":{"krate":0,"index":114}}]}