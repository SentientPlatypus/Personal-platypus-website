{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2","program":"C:\\Users\\trexx\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","indexmap","--edition=2018","C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"serde\"","--cfg","feature=\"serde-1\"","--cfg","feature=\"std\"","-C","metadata=3144fe9fd2ab5e8c","-C","extra-filename=-3144fe9fd2ab5e8c","--out-dir","c:\\Users\\trexx\\Documents\\PYTHON CODE LOL\\PersonalWebsite\\Personal-platypus-website\\RocketCode\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\trexx\\Documents\\PYTHON CODE LOL\\PersonalWebsite\\Personal-platypus-website\\RocketCode\\target\\rls\\debug\\deps","--extern","hashbrown=c:\\Users\\trexx\\Documents\\PYTHON CODE LOL\\PersonalWebsite\\Personal-platypus-website\\RocketCode\\target\\rls\\debug\\deps\\libhashbrown-900fa2beacaf1b78.rmeta","--extern","serde=c:\\Users\\trexx\\Documents\\PYTHON CODE LOL\\PersonalWebsite\\Personal-platypus-website\\RocketCode\\target\\rls\\debug\\deps\\libserde-665b41cf40a176c7.rmeta","--cap-lints","allow","--cfg","has_std","--cfg","rustc_1_51","--error-format=json","--sysroot","C:\\Users\\trexx\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\trexx\\Documents\\PYTHON CODE LOL\\PersonalWebsite\\Personal-platypus-website\\RocketCode\\target\\rls\\debug\\deps\\libindexmap-3144fe9fd2ab5e8c.rmeta"},"prelude":{"crate_id":{"name":"indexmap","disambiguator":[15610604331078840555,0]},"crate_root":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src","external_crates":[{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[1507510987272037120,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[3803325750332457499,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[4223354511651166533,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","num":4,"id":{"name":"alloc","disambiguator":[15700094508901508366,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","num":5,"id":{"name":"std","disambiguator":[13015713666403456114,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12632183332710247155,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[18262169243471273054,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15664785966706829415,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[3895343934390880989,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1841993658411810574,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[1117248029108287081,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[14646112292732085519,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[11979428506951486581,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[2104796995944127881,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[4084207378877276393,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde.rs","num":16,"id":{"name":"serde","disambiguator":[2979992307576341484,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde.rs","num":17,"id":{"name":"serde_derive","disambiguator":[16401903822441338432,0]}},{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","num":18,"id":{"name":"hashbrown","disambiguator":[13235364969512228043,0]}}],"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":92,"byte_end":5459,"line_start":2,"line_end":193,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":327},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":96111,"byte_end":96124,"line_start":559,"line_end":559,"column_start":20,"column_end":33},"alias_span":null,"name":"OccupiedEntry","value":"","parent":{"krate":0,"index":281}},{"kind":"Use","ref_id":{"krate":0,"index":45},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":21895,"byte_end":21906,"line_start":6,"line_end":6,"column_start":30,"column_end":41},"alias_span":null,"name":"MutableKeys","value":"","parent":{"krate":0,"index":280}},{"kind":"Use","ref_id":{"krate":0,"index":463},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":22470,"byte_end":22475,"line_start":27,"line_end":27,"column_start":22,"column_end":27},"alias_span":null,"name":"Entry","value":"","parent":{"krate":0,"index":280}},{"kind":"Use","ref_id":{"krate":0,"index":327},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":22477,"byte_end":22490,"line_start":27,"line_end":27,"column_start":29,"column_end":42},"alias_span":null,"name":"OccupiedEntry","value":"","parent":{"krate":0,"index":280}},{"kind":"Use","ref_id":{"krate":0,"index":506},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":22492,"byte_end":22503,"line_start":27,"line_end":27,"column_start":44,"column_end":55},"alias_span":null,"name":"VacantEntry","value":"","parent":{"krate":0,"index":280}},{"kind":"Use","ref_id":{"krate":0,"index":22},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":3606,"byte_end":3616,"line_start":109,"line_end":109,"column_start":28,"column_end":38},"alias_span":null,"name":"Equivalent","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":607},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":3638,"byte_end":3646,"line_start":110,"line_end":110,"column_start":21,"column_end":29},"alias_span":null,"name":"IndexMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1118},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":3668,"byte_end":3676,"line_start":111,"line_end":111,"column_start":21,"column_end":29},"alias_span":null,"name":"IndexSet","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":92,"byte_end":5459,"line_start":2,"line_end":193,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":18},{"krate":0,"index":29},{"krate":0,"index":64},{"krate":0,"index":191},{"krate":0,"index":258},{"krate":0,"index":280},{"krate":0,"index":1050},{"krate":0,"index":1515},{"krate":0,"index":1518},{"krate":0,"index":1521},{"krate":0,"index":1658},{"krate":0,"index":1661},{"krate":0,"index":1663},{"krate":0,"index":1664},{"krate":0,"index":1666},{"krate":0,"index":1667},{"krate":0,"index":1524},{"krate":0,"index":1670},{"krate":0,"index":1676},{"krate":0,"index":1679},{"krate":0,"index":1526},{"krate":0,"index":1531},{"krate":0,"index":1543}],"decl_id":null,"docs":" [`IndexMap`] is a hash table where the iteration order of the key-value\n pairs is independent of the hash values of the keys.","sig":null,"attributes":[{"value":"deny(unsafe_code)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":92,"byte_end":113,"line_start":2,"line_end":2,"column_start":1,"column_end":22}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":114,"byte_end":140,"line_start":3,"line_end":3,"column_start":1,"column_end":27}},{"value":"no_std","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":196,"byte_end":206,"line_start":5,"line_end":5,"column_start":1,"column_end":11}},{"value":"/ [`IndexMap`] is a hash table where the iteration order of the key-value","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":208,"byte_end":283,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/ pairs is independent of the hash values of the keys.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":284,"byte_end":340,"line_start":8,"line_end":8,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":341,"byte_end":344,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`] is a corresponding hash set using the same implementation and","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":345,"byte_end":423,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ with similar properties.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":424,"byte_end":452,"line_start":11,"line_end":11,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":453,"byte_end":456,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ [`IndexMap`]: map/struct.IndexMap.html","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":457,"byte_end":499,"line_start":13,"line_end":13,"column_start":1,"column_end":43}},{"value":"/ [`IndexSet`]: set/struct.IndexSet.html","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":500,"byte_end":542,"line_start":14,"line_end":14,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":543,"byte_end":546,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":547,"byte_end":550,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ### Feature Highlights","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":551,"byte_end":577,"line_start":17,"line_end":17,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":578,"byte_end":581,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [`IndexMap`] and [`IndexSet`] are drop-in compatible with the std `HashMap`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":582,"byte_end":661,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ and `HashSet`, but they also have some features of note:","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":662,"byte_end":722,"line_start":20,"line_end":20,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":723,"byte_end":726,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ - The ordering semantics (see their documentation for details)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":727,"byte_end":793,"line_start":22,"line_end":22,"column_start":1,"column_end":67}},{"value":"/ - Sorting methods and the [`.pop()`][IndexMap::pop] methods.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":794,"byte_end":858,"line_start":23,"line_end":23,"column_start":1,"column_end":65}},{"value":"/ - The [`Equivalent`] trait, which offers more flexible equality definitions","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":859,"byte_end":938,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/   between borrowed and owned versions of keys.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":939,"byte_end":989,"line_start":25,"line_end":25,"column_start":1,"column_end":51}},{"value":"/ - The [`MutableKeys`][map::MutableKeys] trait, which gives opt-in mutable","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":990,"byte_end":1067,"line_start":26,"line_end":26,"column_start":1,"column_end":78}},{"value":"/   access to hash map keys.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":1068,"byte_end":1098,"line_start":27,"line_end":27,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":1099,"byte_end":1102,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ### Alternate Hashers","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":1103,"byte_end":1128,"line_start":29,"line_end":29,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":1129,"byte_end":1132,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ [`IndexMap`] and [`IndexSet`] have a default hasher type `S = RandomState`,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":1133,"byte_end":1212,"line_start":31,"line_end":31,"column_start":1,"column_end":80}},{"value":"/ just like the standard `HashMap` and `HashSet`, which is resistant to","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":1213,"byte_end":1286,"line_start":32,"line_end":32,"column_start":1,"column_end":74}},{"value":"/ HashDoS attacks but not the most performant. Type aliases can make it easier","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":1287,"byte_end":1367,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ to use alternate hashers:","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":1368,"byte_end":1397,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":1398,"byte_end":1401,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":1402,"byte_end":1409,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ use fnv::FnvBuildHasher;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":1410,"byte_end":1438,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/ use fxhash::FxBuildHasher;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":1439,"byte_end":1469,"line_start":38,"line_end":38,"column_start":1,"column_end":31}},{"value":"/ use indexmap::{IndexMap, IndexSet};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":1470,"byte_end":1509,"line_start":39,"line_end":39,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":1510,"byte_end":1513,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ type FnvIndexMap<K, V> = IndexMap<K, V, FnvBuildHasher>;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":1514,"byte_end":1574,"line_start":41,"line_end":41,"column_start":1,"column_end":61}},{"value":"/ type FnvIndexSet<T> = IndexSet<T, FnvBuildHasher>;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":1575,"byte_end":1629,"line_start":42,"line_end":42,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":1630,"byte_end":1633,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ type FxIndexMap<K, V> = IndexMap<K, V, FxBuildHasher>;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":1634,"byte_end":1692,"line_start":44,"line_end":44,"column_start":1,"column_end":59}},{"value":"/ type FxIndexSet<T> = IndexSet<T, FxBuildHasher>;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":1693,"byte_end":1745,"line_start":45,"line_end":45,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":1746,"byte_end":1749,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ let std: IndexSet<i32> = (0..100).collect();","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":1750,"byte_end":1798,"line_start":47,"line_end":47,"column_start":1,"column_end":49}},{"value":"/ let fnv: FnvIndexSet<i32> = (0..100).collect();","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":1799,"byte_end":1850,"line_start":48,"line_end":48,"column_start":1,"column_end":52}},{"value":"/ let fx: FxIndexSet<i32> = (0..100).collect();","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":1851,"byte_end":1900,"line_start":49,"line_end":49,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(std, fnv);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":1901,"byte_end":1926,"line_start":50,"line_end":50,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(std, fx);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":1927,"byte_end":1951,"line_start":51,"line_end":51,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":1952,"byte_end":1959,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":1960,"byte_end":1963,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ### Rust Version","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":1964,"byte_end":1984,"line_start":54,"line_end":54,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":1985,"byte_end":1988,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ This version of indexmap requires Rust 1.49 or later.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":1989,"byte_end":2046,"line_start":56,"line_end":56,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":2047,"byte_end":2050,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ The indexmap 1.x release series will use a carefully considered version","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":2051,"byte_end":2126,"line_start":58,"line_end":58,"column_start":1,"column_end":76}},{"value":"/ upgrade policy, where in a later 1.x version, we will raise the minimum","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":2127,"byte_end":2202,"line_start":59,"line_end":59,"column_start":1,"column_end":76}},{"value":"/ required Rust version.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":2203,"byte_end":2229,"line_start":60,"line_end":60,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":2230,"byte_end":2233,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ ## No Standard Library Targets","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":2234,"byte_end":2268,"line_start":62,"line_end":62,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":2269,"byte_end":2272,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ This crate supports being built without `std`, requiring","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":2273,"byte_end":2333,"line_start":64,"line_end":64,"column_start":1,"column_end":61}},{"value":"/ `alloc` instead. This is enabled automatically when it is detected that","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":2334,"byte_end":2409,"line_start":65,"line_end":65,"column_start":1,"column_end":76}},{"value":"/ `std` is not available. There is no crate feature to enable/disable to","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":2410,"byte_end":2484,"line_start":66,"line_end":66,"column_start":1,"column_end":75}},{"value":"/ trigger this. It can be tested by building for a std-less target.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":2485,"byte_end":2554,"line_start":67,"line_end":67,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":2555,"byte_end":2558,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ - Creating maps and sets using [`new`][IndexMap::new] and","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":2559,"byte_end":2620,"line_start":69,"line_end":69,"column_start":1,"column_end":62}},{"value":"/ [`with_capacity`][IndexMap::with_capacity] is unavailable without `std`.  ","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":2621,"byte_end":2699,"line_start":70,"line_end":70,"column_start":1,"column_end":79}},{"value":"/   Use methods [`IndexMap::default`][def],","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":2700,"byte_end":2745,"line_start":71,"line_end":71,"column_start":1,"column_end":46}},{"value":"/   [`with_hasher`][IndexMap::with_hasher],","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":2746,"byte_end":2791,"line_start":72,"line_end":72,"column_start":1,"column_end":46}},{"value":"/   [`with_capacity_and_hasher`][IndexMap::with_capacity_and_hasher] instead.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":2792,"byte_end":2871,"line_start":73,"line_end":73,"column_start":1,"column_end":80}},{"value":"/   A no-std compatible hasher will be needed as well, for example","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":2872,"byte_end":2940,"line_start":74,"line_end":74,"column_start":1,"column_end":69}},{"value":"/   from the crate `twox-hash`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":2941,"byte_end":2974,"line_start":75,"line_end":75,"column_start":1,"column_end":34}},{"value":"/ - Macros [`indexmap!`] and [`indexset!`] are unavailable without `std`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":2975,"byte_end":3050,"line_start":76,"line_end":76,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":3051,"byte_end":3054,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ [def]: map/struct.IndexMap.html#impl-Default","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":3055,"byte_end":3103,"line_start":78,"line_end":78,"column_start":1,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":22},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\equivalent.rs","byte_start":11026,"byte_end":11036,"line_start":13,"line_end":13,"column_start":11,"column_end":21},"name":"Equivalent","qualname":"::equivalent::Equivalent","value":"Equivalent<K: ?Sized>","parent":null,"children":[{"krate":0,"index":24}],"decl_id":null,"docs":" Key equivalence trait.","sig":null,"attributes":[{"value":"/ Key equivalence trait.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\equivalent.rs","byte_start":10636,"byte_end":10662,"line_start":3,"line_end":3,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\equivalent.rs","byte_start":10663,"byte_end":10666,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ This trait allows hash table lookup to be customized.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\equivalent.rs","byte_start":10667,"byte_end":10724,"line_start":5,"line_end":5,"column_start":1,"column_end":58}},{"value":"/ It has one blanket implementation that uses the regular `Borrow` solution,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\equivalent.rs","byte_start":10725,"byte_end":10803,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ just like `HashMap` and `BTreeMap` do, so that you can pass `&str` to lookup","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\equivalent.rs","byte_start":10804,"byte_end":10884,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ into a map with `String` keys and so on.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\equivalent.rs","byte_start":10885,"byte_end":10929,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\equivalent.rs","byte_start":10930,"byte_end":10933,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Contract","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\equivalent.rs","byte_start":10934,"byte_end":10948,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\equivalent.rs","byte_start":10949,"byte_end":10952,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ The implementor **must** hash like `K`, if it is hashable.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\equivalent.rs","byte_start":10953,"byte_end":11015,"line_start":12,"line_end":12,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\equivalent.rs","byte_start":11124,"byte_end":11134,"line_start":15,"line_end":15,"column_start":8,"column_end":18},"name":"equivalent","qualname":"::equivalent::Equivalent::equivalent","value":"pub fn equivalent(&Self, &K) -> bool","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Compare self to `key` and return `true` if they are equal.\n","sig":null,"attributes":[{"value":"/ Compare self to `key` and return `true` if they are equal.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\equivalent.rs","byte_start":11054,"byte_end":11116,"line_start":14,"line_end":14,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":11430,"byte_end":11443,"line_start":5,"line_end":5,"column_start":12,"column_end":25},"name":"PrivateMarker","qualname":"::mutable_keys::PrivateMarker","value":"PrivateMarker {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":45},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":11993,"byte_end":12004,"line_start":19,"line_end":19,"column_start":11,"column_end":22},"name":"MutableKeys","qualname":"::mutable_keys::MutableKeys","value":"MutableKeys","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52}],"decl_id":null,"docs":" Opt-in mutable access to keys.","sig":null,"attributes":[{"value":"/ Opt-in mutable access to keys.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":11448,"byte_end":11482,"line_start":7,"line_end":7,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":11483,"byte_end":11486,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ These methods expose `&mut K`, mutable references to the key as it is stored","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":11487,"byte_end":11567,"line_start":9,"line_end":9,"column_start":1,"column_end":81}},{"value":"/ in the map.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":11568,"byte_end":11583,"line_start":10,"line_end":10,"column_start":1,"column_end":16}},{"value":"/ You are allowed to modify the keys in the hashmap **if the modification","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":11584,"byte_end":11659,"line_start":11,"line_end":11,"column_start":1,"column_end":76}},{"value":"/ does not change the key’s hash and equality**.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":11660,"byte_end":11712,"line_start":12,"line_end":12,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":11713,"byte_end":11716,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ If keys are modified erroneously, you can no longer look them up.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":11717,"byte_end":11786,"line_start":14,"line_end":14,"column_start":1,"column_end":70}},{"value":"/ This is sound (memory safe) but a logical error hazard (just like","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":11787,"byte_end":11856,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/ implementing PartialEq, Eq, or Hash incorrectly would be).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":11857,"byte_end":11919,"line_start":16,"line_end":16,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":11920,"byte_end":11923,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ `use` this trait to enable its methods for `IndexMap`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":11924,"byte_end":11982,"line_start":18,"line_end":18,"column_start":1,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":12016,"byte_end":12019,"line_start":20,"line_end":20,"column_start":10,"column_end":13},"name":"Key","qualname":"::mutable_keys::MutableKeys::Key","value":"type Key;","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":47},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":12030,"byte_end":12035,"line_start":21,"line_end":21,"column_start":10,"column_end":15},"name":"Value","qualname":"::mutable_keys::MutableKeys::Value","value":"type Value;","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":12107,"byte_end":12120,"line_start":24,"line_end":24,"column_start":8,"column_end":21},"name":"get_full_mut2","qualname":"::mutable_keys::MutableKeys::get_full_mut2","value":"pub fn get_full_mut2<Q: ?Sized>(&mut Self, &Q)\n-> Option<(usize, &mut Self::Key, &mut Self::Value)> where Q: Hash +\nEquivalent<Self::Key>","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Return item index, mutable reference to key and value\n","sig":null,"attributes":[{"value":"/ Return item index, mutable reference to key and value","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":12042,"byte_end":12099,"line_start":23,"line_end":23,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":12556,"byte_end":12563,"line_start":38,"line_end":38,"column_start":8,"column_end":15},"name":"retain2","qualname":"::mutable_keys::MutableKeys::retain2","value":"pub fn retain2<F>(&mut Self, F) where\nF: FnMut(&mut Self::Key, &mut Self::Value) -> bool","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Scan through each key-value pair in the map and keep those where the\n closure `keep` returns `true`.","sig":null,"attributes":[{"value":"/ Scan through each key-value pair in the map and keep those where the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":12284,"byte_end":12356,"line_start":31,"line_end":31,"column_start":5,"column_end":77}},{"value":"/ closure `keep` returns `true`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":12361,"byte_end":12395,"line_start":32,"line_end":32,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":12400,"byte_end":12403,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ The elements are visited in order, and remaining elements keep their","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":12408,"byte_end":12480,"line_start":34,"line_end":34,"column_start":5,"column_end":77}},{"value":"/ order.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":12485,"byte_end":12495,"line_start":35,"line_end":35,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":12500,"byte_end":12503,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":12508,"byte_end":12548,"line_start":37,"line_end":37,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":12855,"byte_end":12871,"line_start":45,"line_end":45,"column_start":8,"column_end":24},"name":"__private_marker","qualname":"::mutable_keys::MutableKeys::__private_marker","value":"pub fn __private_marker(&Self) -> PrivateMarker","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" This method is not useful in itself – it is there to “seal” the trait\n for external implementation, so that we can add methods without\n causing breaking changes.\n","sig":null,"attributes":[{"value":"/ This method is not useful in itself – it is there to “seal” the trait","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":12662,"byte_end":12741,"line_start":42,"line_end":42,"column_start":5,"column_end":78}},{"value":"/ for external implementation, so that we can add methods without","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":12746,"byte_end":12813,"line_start":43,"line_end":43,"column_start":5,"column_end":72}},{"value":"/ causing breaking changes.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":12818,"byte_end":12847,"line_start":44,"line_end":44,"column_start":5,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"serde_seq","qualname":"::serde_seq","value":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":196},{"krate":0,"index":199},{"krate":0,"index":202},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":209},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":216},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":237},{"krate":0,"index":243},{"krate":0,"index":252}],"decl_id":null,"docs":" Functions to serialize and deserialize an `IndexMap` as an ordered sequence.","sig":null,"attributes":[{"value":"cfg(feature = \"serde\")","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":3300,"byte_end":3325,"line_start":94,"line_end":94,"column_start":1,"column_end":26}},{"value":"/ Functions to serialize and deserialize an `IndexMap` as an ordered sequence.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":17444,"byte_end":17524,"line_start":1,"line_end":1,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":17525,"byte_end":17528,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The default `serde` implementation serializes `IndexMap` as a normal map,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":17529,"byte_end":17606,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"/ but there is no guarantee that serialization formats will preserve the order","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":17607,"byte_end":17687,"line_start":4,"line_end":4,"column_start":1,"column_end":81}},{"value":"/ of the key-value pairs. This module serializes `IndexMap` as a sequence of","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":17688,"byte_end":17766,"line_start":5,"line_end":5,"column_start":1,"column_end":79}},{"value":"/ `(key, value)` elements instead, in order.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":17767,"byte_end":17813,"line_start":6,"line_end":6,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":17814,"byte_end":17817,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This module may be used in a field attribute for derived implementations:","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":17818,"byte_end":17895,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":17896,"byte_end":17899,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":17900,"byte_end":17907,"line_start":10,"line_end":10,"column_start":1,"column_end":8}},{"value":"/ # use indexmap::IndexMap;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":17908,"byte_end":17937,"line_start":11,"line_end":11,"column_start":1,"column_end":30}},{"value":"/ # use serde_derive::{Deserialize, Serialize};","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":17938,"byte_end":17987,"line_start":12,"line_end":12,"column_start":1,"column_end":50}},{"value":"/ #[derive(Deserialize, Serialize)]","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":17988,"byte_end":18025,"line_start":13,"line_end":13,"column_start":1,"column_end":38}},{"value":"/ struct Data {","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":18026,"byte_end":18043,"line_start":14,"line_end":14,"column_start":1,"column_end":18}},{"value":"/     #[serde(with = \"indexmap::serde_seq\")]","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":18044,"byte_end":18090,"line_start":15,"line_end":15,"column_start":1,"column_end":47}},{"value":"/     map: IndexMap<i32, u64>,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":18091,"byte_end":18123,"line_start":16,"line_end":16,"column_start":1,"column_end":33}},{"value":"/     // ...","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":18124,"byte_end":18138,"line_start":17,"line_end":17,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":18139,"byte_end":18144,"line_start":18,"line_end":18,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":18145,"byte_end":18152,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":18153,"byte_end":18156,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Requires crate feature `\"serde\"` or `\"serde-1\"`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":18157,"byte_end":18208,"line_start":21,"line_end":21,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":232},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":18888,"byte_end":18897,"line_start":48,"line_end":48,"column_start":8,"column_end":17},"name":"serialize","qualname":"::serde_seq::serialize","value":"pub fn serialize<K, V, S, T>(&IndexMap<K, V, S>, T) -> Result<T::Ok, T::Error>\nwhere K: Serialize + Hash + Eq, V: Serialize, S: BuildHasher, T: Serializer","parent":null,"children":[],"decl_id":null,"docs":" Serializes an `IndexMap` as an ordered sequence.","sig":null,"attributes":[{"value":"/ Serializes an `IndexMap` as an ordered sequence.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":18441,"byte_end":18493,"line_start":32,"line_end":32,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":18494,"byte_end":18497,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ This function may be used in a field attribute for deriving `Serialize`:","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":18498,"byte_end":18574,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":18575,"byte_end":18578,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":18579,"byte_end":18586,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ # use indexmap::IndexMap;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":18587,"byte_end":18616,"line_start":37,"line_end":37,"column_start":1,"column_end":30}},{"value":"/ # use serde_derive::Serialize;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":18617,"byte_end":18651,"line_start":38,"line_end":38,"column_start":1,"column_end":35}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":18652,"byte_end":18676,"line_start":39,"line_end":39,"column_start":1,"column_end":25}},{"value":"/ struct Data {","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":18677,"byte_end":18694,"line_start":40,"line_end":40,"column_start":1,"column_end":18}},{"value":"/     #[serde(serialize_with = \"indexmap::serde_seq::serialize\")]","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":18695,"byte_end":18762,"line_start":41,"line_end":41,"column_start":1,"column_end":68}},{"value":"/     map: IndexMap<i32, u64>,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":18763,"byte_end":18795,"line_start":42,"line_end":42,"column_start":1,"column_end":33}},{"value":"/     // ...","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":18796,"byte_end":18810,"line_start":43,"line_end":43,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":18811,"byte_end":18816,"line_start":44,"line_end":44,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":18817,"byte_end":18824,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":18825,"byte_end":18828,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Requires crate feature `\"serde\"` or `\"serde-1\"`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":18829,"byte_end":18880,"line_start":47,"line_end":47,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":252},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":20373,"byte_end":20384,"line_start":104,"line_end":104,"column_start":8,"column_end":19},"name":"deserialize","qualname":"::serde_seq::deserialize","value":"pub fn deserialize<'de, D, K, V, S>(D) -> Result<IndexMap<K, V, S>, D::Error>\nwhere D: Deserializer, K: Deserialize + Eq + Hash, V: Deserialize,\nS: Default + BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Deserializes an `IndexMap` from an ordered sequence.","sig":null,"attributes":[{"value":"/ Deserializes an `IndexMap` from an ordered sequence.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":19912,"byte_end":19968,"line_start":88,"line_end":88,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":19969,"byte_end":19972,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ This function may be used in a field attribute for deriving `Deserialize`:","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":19973,"byte_end":20051,"line_start":90,"line_end":90,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":20052,"byte_end":20055,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":20056,"byte_end":20063,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"/ # use indexmap::IndexMap;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":20064,"byte_end":20093,"line_start":93,"line_end":93,"column_start":1,"column_end":30}},{"value":"/ # use serde_derive::Deserialize;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":20094,"byte_end":20130,"line_start":94,"line_end":94,"column_start":1,"column_end":37}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":20131,"byte_end":20157,"line_start":95,"line_end":95,"column_start":1,"column_end":27}},{"value":"/ struct Data {","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":20158,"byte_end":20175,"line_start":96,"line_end":96,"column_start":1,"column_end":18}},{"value":"/     #[serde(deserialize_with = \"indexmap::serde_seq::deserialize\")]","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":20176,"byte_end":20247,"line_start":97,"line_end":97,"column_start":1,"column_end":72}},{"value":"/     map: IndexMap<i32, u64>,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":20248,"byte_end":20280,"line_start":98,"line_end":98,"column_start":1,"column_end":33}},{"value":"/     // ...","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":20281,"byte_end":20295,"line_start":99,"line_end":99,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":20296,"byte_end":20301,"line_start":100,"line_end":100,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":20302,"byte_end":20309,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":20310,"byte_end":20313,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ Requires crate feature `\"serde\"` or `\"serde-1\"`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":20314,"byte_end":20365,"line_start":103,"line_end":103,"column_start":1,"column_end":52}}]},{"kind":"Mod","id":{"krate":0,"index":280},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"map","qualname":"::map","value":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":525},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":532},{"krate":0,"index":535},{"krate":0,"index":538},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":548},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":555},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":562},{"krate":0,"index":565},{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":572},{"krate":0,"index":575},{"krate":0,"index":578},{"krate":0,"index":581},{"krate":0,"index":584},{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":591},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":601},{"krate":0,"index":604},{"krate":0,"index":607},{"krate":0,"index":613},{"krate":0,"index":619},{"krate":0,"index":629},{"krate":0,"index":634},{"krate":0,"index":639},{"krate":0,"index":661},{"krate":0,"index":731},{"krate":0,"index":744},{"krate":0,"index":749},{"krate":0,"index":754},{"krate":0,"index":757},{"krate":0,"index":761},{"krate":0,"index":764},{"krate":0,"index":768},{"krate":0,"index":772},{"krate":0,"index":776},{"krate":0,"index":780},{"krate":0,"index":783},{"krate":0,"index":787},{"krate":0,"index":790},{"krate":0,"index":794},{"krate":0,"index":799},{"krate":0,"index":804},{"krate":0,"index":807},{"krate":0,"index":811},{"krate":0,"index":814},{"krate":0,"index":818},{"krate":0,"index":822},{"krate":0,"index":827},{"krate":0,"index":832},{"krate":0,"index":835},{"krate":0,"index":839},{"krate":0,"index":842},{"krate":0,"index":846},{"krate":0,"index":850},{"krate":0,"index":853},{"krate":0,"index":857},{"krate":0,"index":860},{"krate":0,"index":864},{"krate":0,"index":869},{"krate":0,"index":874},{"krate":0,"index":877},{"krate":0,"index":881},{"krate":0,"index":884},{"krate":0,"index":888},{"krate":0,"index":892},{"krate":0,"index":897},{"krate":0,"index":902},{"krate":0,"index":905},{"krate":0,"index":909},{"krate":0,"index":912},{"krate":0,"index":916},{"krate":0,"index":920},{"krate":0,"index":923},{"krate":0,"index":927},{"krate":0,"index":930},{"krate":0,"index":934},{"krate":0,"index":939},{"krate":0,"index":943},{"krate":0,"index":946},{"krate":0,"index":950},{"krate":0,"index":953},{"krate":0,"index":957},{"krate":0,"index":965},{"krate":0,"index":973},{"krate":0,"index":980},{"krate":0,"index":987},{"krate":0,"index":993},{"krate":0,"index":999},{"krate":0,"index":1004},{"krate":0,"index":1010},{"krate":0,"index":1017},{"krate":0,"index":1024},{"krate":0,"index":1032},{"krate":0,"index":1037},{"krate":0,"index":1046}],"decl_id":null,"docs":" `IndexMap` is a hash table where the iteration order of the key-value\n pairs is independent of the hash values of the keys.\n","sig":null,"attributes":[{"value":"/ `IndexMap` is a hash table where the iteration order of the key-value","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":21723,"byte_end":21796,"line_start":1,"line_end":1,"column_start":1,"column_end":74}},{"value":"/ pairs is independent of the hash values of the keys.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":21797,"byte_end":21853,"line_start":2,"line_end":2,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":327},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":102895,"byte_end":102908,"line_start":95,"line_end":95,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::map::core::raw::OccupiedEntry","value":"OccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333}],"decl_id":null,"docs":" A view into an occupied entry in a `IndexMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `IndexMap`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":102623,"byte_end":102673,"line_start":89,"line_end":89,"column_start":1,"column_end":51}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":102674,"byte_end":102711,"line_start":90,"line_end":90,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":102712,"byte_end":102715,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":102716,"byte_end":102746,"line_start":92,"line_end":92,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":103639,"byte_end":103642,"line_start":112,"line_end":112,"column_start":12,"column_end":15},"name":"key","qualname":"<OccupiedEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the entry's key in the map.","sig":null,"attributes":[{"value":"/ Gets a reference to the entry's key in the map.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":103309,"byte_end":103360,"line_start":107,"line_end":107,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":103365,"byte_end":103368,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ Note that this is not the key that was used to find the entry. There may be an observable","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":103373,"byte_end":103466,"line_start":109,"line_end":109,"column_start":5,"column_end":98}},{"value":"/ difference if the key type has any distinguishing features outside of `Hash` and `Eq`, like","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":103471,"byte_end":103566,"line_start":110,"line_end":110,"column_start":5,"column_end":100}},{"value":"/ extra fields or the memory address of an allocation.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":103571,"byte_end":103627,"line_start":111,"line_end":111,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":103778,"byte_end":103781,"line_start":117,"line_end":117,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry>::get","value":"pub fn get(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the entry's value in the map.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the entry's value in the map.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":103713,"byte_end":103766,"line_start":116,"line_end":116,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":104047,"byte_end":104054,"line_start":125,"line_end":125,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the entry's value in the map.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the entry's value in the map.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":103854,"byte_end":103915,"line_start":121,"line_end":121,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":103920,"byte_end":103923,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ If you need a reference which may outlive the destruction of the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":103928,"byte_end":103996,"line_start":123,"line_end":123,"column_start":5,"column_end":73}},{"value":"/ `Entry` value, see `into_mut`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":104001,"byte_end":104035,"line_start":124,"line_end":124,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":104466,"byte_end":104471,"line_start":139,"line_end":139,"column_start":12,"column_end":17},"name":"index","qualname":"<OccupiedEntry>::index","value":"pub fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index of the key-value pair\n","sig":null,"attributes":[{"value":"/ Return the index of the key-value pair","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":104398,"byte_end":104440,"line_start":137,"line_end":137,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":104445,"byte_end":104454,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":104741,"byte_end":104749,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry>::into_mut","value":"pub fn into_mut(Self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts into a mutable reference to the entry's value in the map,\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts into a mutable reference to the entry's value in the map,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":104610,"byte_end":104680,"line_start":144,"line_end":144,"column_start":5,"column_end":75}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":104685,"byte_end":104729,"line_start":145,"line_end":145,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":105211,"byte_end":105228,"line_start":158,"line_end":158,"column_start":12,"column_end":29},"name":"swap_remove_entry","qualname":"<OccupiedEntry>::swap_remove_entry","value":"pub fn swap_remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key, value pair stored in the map for this entry","sig":null,"attributes":[{"value":"/ Remove and return the key, value pair stored in the map for this entry","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":104859,"byte_end":104933,"line_start":151,"line_end":151,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":104938,"byte_end":104941,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":104946,"byte_end":105018,"line_start":153,"line_end":153,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":105023,"byte_end":105086,"line_start":154,"line_end":154,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":105091,"byte_end":105146,"line_start":155,"line_end":155,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":105151,"byte_end":105154,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":105159,"byte_end":105199,"line_start":157,"line_end":157,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":105878,"byte_end":105896,"line_start":172,"line_end":172,"column_start":12,"column_end":30},"name":"shift_remove_entry","qualname":"<OccupiedEntry>::shift_remove_entry","value":"pub fn shift_remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key, value pair stored in the map for this entry","sig":null,"attributes":[{"value":"/ Remove and return the key, value pair stored in the map for this entry","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":105532,"byte_end":105606,"line_start":165,"line_end":165,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":105611,"byte_end":105614,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":105619,"byte_end":105685,"line_start":167,"line_end":167,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":105690,"byte_end":105751,"line_start":168,"line_end":168,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":105756,"byte_end":105813,"line_start":169,"line_end":169,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":105818,"byte_end":105821,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":105826,"byte_end":105866,"line_start":171,"line_end":171,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":467},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":92590,"byte_end":92598,"line_start":455,"line_end":455,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::core::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry)","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Existing slot with equivalent key.\n","sig":null,"attributes":[{"value":"/ Existing slot with equivalent key.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":92547,"byte_end":92585,"line_start":454,"line_end":454,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":470},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":92681,"byte_end":92687,"line_start":457,"line_end":457,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::core::Entry::Vacant","value":"Entry::Vacant(VacantEntry)","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Vacant slot (no equivalent key in the map).\n","sig":null,"attributes":[{"value":"/ Vacant slot (no equivalent key in the map).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":92629,"byte_end":92676,"line_start":456,"line_end":456,"column_start":5,"column_end":52}}]},{"kind":"Enum","id":{"krate":0,"index":463},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":92525,"byte_end":92530,"line_start":453,"line_end":453,"column_start":10,"column_end":15},"name":"Entry","qualname":"::map::core::Entry","value":"pub enum Entry<'a, K, V> { Occupied(OccupiedEntry), Vacant(VacantEntry), }","parent":null,"children":[{"krate":0,"index":467},{"krate":0,"index":470}],"decl_id":null,"docs":" Entry for an existing key-value pair or a vacant location to\n insert one.\n","sig":null,"attributes":[{"value":"/ Entry for an existing key-value pair or a vacant location to","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":92435,"byte_end":92499,"line_start":451,"line_end":451,"column_start":1,"column_end":65}},{"value":"/ insert one.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":92500,"byte_end":92515,"line_start":452,"line_end":452,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":93010,"byte_end":93019,"line_start":465,"line_end":465,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry>::or_insert","value":"pub fn or_insert(Self, V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Inserts the given default value in the entry if it is vacant and returns a mutable\n reference to it. Otherwise a mutable reference to an already existent value is returned.","sig":null,"attributes":[{"value":"/ Inserts the given default value in the entry if it is vacant and returns a mutable","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":92752,"byte_end":92838,"line_start":461,"line_end":461,"column_start":5,"column_end":91}},{"value":"/ reference to it. Otherwise a mutable reference to an already existent value is returned.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":92843,"byte_end":92935,"line_start":462,"line_end":462,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":92940,"byte_end":92943,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":92948,"byte_end":92998,"line_start":464,"line_end":464,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":93478,"byte_end":93492,"line_start":476,"line_end":476,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<Entry>::or_insert_with","value":"pub fn or_insert_with<F>(Self, F) -> &'a mut V where F: FnOnce() -> V","parent":null,"children":[],"decl_id":null,"docs":" Inserts the result of the `call` function in the entry if it is vacant and returns a mutable\n reference to it. Otherwise a mutable reference to an already existent value is returned.","sig":null,"attributes":[{"value":"/ Inserts the result of the `call` function in the entry if it is vacant and returns a mutable","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":93210,"byte_end":93306,"line_start":472,"line_end":472,"column_start":5,"column_end":101}},{"value":"/ reference to it. Otherwise a mutable reference to an already existent value is returned.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":93311,"byte_end":93403,"line_start":473,"line_end":473,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":93408,"byte_end":93411,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":93416,"byte_end":93466,"line_start":475,"line_end":475,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":94033,"byte_end":94051,"line_start":491,"line_end":491,"column_start":12,"column_end":30},"name":"or_insert_with_key","qualname":"<Entry>::or_insert_with_key","value":"pub fn or_insert_with_key<F>(Self, F) -> &'a mut V where F: FnOnce(&K) -> V","parent":null,"children":[],"decl_id":null,"docs":" Inserts the result of the `call` function with a reference to the entry's key if it is\n vacant, and returns a mutable reference to the new value. Otherwise a mutable reference to\n an already existent value is returned.","sig":null,"attributes":[{"value":"/ Inserts the result of the `call` function with a reference to the entry's key if it is","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":93722,"byte_end":93812,"line_start":486,"line_end":486,"column_start":5,"column_end":95}},{"value":"/ vacant, and returns a mutable reference to the new value. Otherwise a mutable reference to","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":93817,"byte_end":93911,"line_start":487,"line_end":487,"column_start":5,"column_end":99}},{"value":"/ an already existent value is returned.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":93916,"byte_end":93958,"line_start":488,"line_end":488,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":93963,"byte_end":93966,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":93971,"byte_end":94021,"line_start":490,"line_end":490,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":94507,"byte_end":94510,"line_start":506,"line_end":506,"column_start":12,"column_end":15},"name":"key","qualname":"<Entry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the entry's key, either within the map if occupied,\n or else the new key that was used to find the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the entry's key, either within the map if occupied,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":94359,"byte_end":94434,"line_start":504,"line_end":504,"column_start":5,"column_end":80}},{"value":"/ or else the new key that was used to find the entry.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":94439,"byte_end":94495,"line_start":505,"line_end":505,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":94762,"byte_end":94767,"line_start":514,"line_end":514,"column_start":12,"column_end":17},"name":"index","qualname":"<Entry>::index","value":"pub fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index where the key-value pair exists or will be inserted.\n","sig":null,"attributes":[{"value":"/ Return the index where the key-value pair exists or will be inserted.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":94677,"byte_end":94750,"line_start":513,"line_end":513,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":94994,"byte_end":95004,"line_start":522,"line_end":522,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<Entry>::and_modify","value":"pub fn and_modify<F>(Self, F) -> Self where F: FnOnce(&mut V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Modifies the entry if it is occupied.\n","sig":null,"attributes":[{"value":"/ Modifies the entry if it is occupied.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":94941,"byte_end":94982,"line_start":521,"line_end":521,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":95516,"byte_end":95526,"line_start":539,"line_end":539,"column_start":12,"column_end":22},"name":"or_default","qualname":"<Entry>::or_default","value":"pub fn or_default(Self) -> &'a mut V where V: Default","parent":null,"children":[],"decl_id":null,"docs":" Inserts a default-constructed value in the entry if it is vacant and returns a mutable\n reference to it. Otherwise a mutable reference to an already existent value is returned.","sig":null,"attributes":[{"value":"/ Inserts a default-constructed value in the entry if it is vacant and returns a mutable","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":95254,"byte_end":95344,"line_start":535,"line_end":535,"column_start":5,"column_end":95}},{"value":"/ reference to it. Otherwise a mutable reference to an already existent value is returned.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":95349,"byte_end":95441,"line_start":536,"line_end":536,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":95446,"byte_end":95449,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":95454,"byte_end":95504,"line_start":538,"line_end":538,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":96321,"byte_end":96327,"line_start":564,"line_end":564,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntry>::insert","value":"pub fn insert(&mut Self, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry to `value`, and returns the entry's old value.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry to `value`, and returns the entry's old value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":96231,"byte_end":96309,"line_start":563,"line_end":563,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":96570,"byte_end":96576,"line_start":571,"line_end":571,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry>::remove","value":"pub fn remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove the key, value pair stored in the map for this entry, and return the value.","sig":null,"attributes":[{"value":"/ Remove the key, value pair stored in the map for this entry, and return the value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":96406,"byte_end":96492,"line_start":568,"line_end":568,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":96497,"byte_end":96500,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove()`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":96505,"byte_end":96558,"line_start":570,"line_end":570,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":96992,"byte_end":97003,"line_start":582,"line_end":582,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<OccupiedEntry>::swap_remove","value":"pub fn swap_remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove the key, value pair stored in the map for this entry, and return the value.","sig":null,"attributes":[{"value":"/ Remove the key, value pair stored in the map for this entry, and return the value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":96628,"byte_end":96714,"line_start":575,"line_end":575,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":96719,"byte_end":96722,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":96727,"byte_end":96799,"line_start":577,"line_end":577,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":96804,"byte_end":96867,"line_start":578,"line_end":578,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":96872,"byte_end":96927,"line_start":579,"line_end":579,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":96932,"byte_end":96935,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":96940,"byte_end":96980,"line_start":581,"line_end":581,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":97421,"byte_end":97433,"line_start":593,"line_end":593,"column_start":12,"column_end":24},"name":"shift_remove","qualname":"<OccupiedEntry>::shift_remove","value":"pub fn shift_remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove the key, value pair stored in the map for this entry, and return the value.","sig":null,"attributes":[{"value":"/ Remove the key, value pair stored in the map for this entry, and return the value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":97063,"byte_end":97149,"line_start":586,"line_end":586,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":97154,"byte_end":97157,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":97162,"byte_end":97228,"line_start":588,"line_end":588,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":97233,"byte_end":97294,"line_start":589,"line_end":589,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":97299,"byte_end":97356,"line_start":590,"line_end":590,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":97361,"byte_end":97364,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":97369,"byte_end":97409,"line_start":592,"line_end":592,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":97652,"byte_end":97664,"line_start":600,"line_end":600,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<OccupiedEntry>::remove_entry","value":"pub fn remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key, value pair stored in the map for this entry","sig":null,"attributes":[{"value":"/ Remove and return the key, value pair stored in the map for this entry","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":97494,"byte_end":97568,"line_start":597,"line_end":597,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":97573,"byte_end":97576,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove_entry()`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":97581,"byte_end":97640,"line_start":599,"line_end":599,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":506},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":98155,"byte_end":98166,"line_start":618,"line_end":618,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::map::core::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512}],"decl_id":null,"docs":" A view into a vacant entry in a `IndexMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `IndexMap`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":98023,"byte_end":98070,"line_start":614,"line_end":614,"column_start":1,"column_end":48}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":98071,"byte_end":98108,"line_start":615,"line_end":615,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":98109,"byte_end":98112,"line_start":616,"line_end":616,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":98113,"byte_end":98143,"line_start":617,"line_end":617,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":98371,"byte_end":98374,"line_start":626,"line_end":626,"column_start":12,"column_end":15},"name":"key","qualname":"<VacantEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key that was used to find the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the key that was used to find the entry.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":98295,"byte_end":98359,"line_start":625,"line_end":625,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":98488,"byte_end":98496,"line_start":631,"line_end":631,"column_start":12,"column_end":20},"name":"into_key","qualname":"<VacantEntry>::into_key","value":"pub fn into_key(Self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Takes ownership of the key, leaving the entry vacant.\n","sig":null,"attributes":[{"value":"/ Takes ownership of the key, leaving the entry vacant.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":98419,"byte_end":98476,"line_start":630,"line_end":630,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":98613,"byte_end":98618,"line_start":636,"line_end":636,"column_start":12,"column_end":17},"name":"index","qualname":"<VacantEntry>::index","value":"pub fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index where the key-value pair will be inserted.\n","sig":null,"attributes":[{"value":"/ Return the index where the key-value pair will be inserted.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":98538,"byte_end":98601,"line_start":635,"line_end":635,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":98798,"byte_end":98804,"line_start":642,"line_end":642,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry>::insert","value":"pub fn insert(Self, V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Inserts the entry's key and the given value into the map, and returns a mutable reference\n to the value.\n","sig":null,"attributes":[{"value":"/ Inserts the entry's key and the given value into the map, and returns a mutable reference","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":98671,"byte_end":98764,"line_start":640,"line_end":640,"column_start":5,"column_end":98}},{"value":"/ to the value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":98769,"byte_end":98786,"line_start":641,"line_end":641,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":607},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":23943,"byte_end":23951,"line_start":71,"line_end":71,"column_start":12,"column_end":20},"name":"IndexMap","qualname":"::map::IndexMap","value":"IndexMap {  }","parent":null,"children":[{"krate":0,"index":611},{"krate":0,"index":612}],"decl_id":null,"docs":" A hash table where the iteration order of the key-value pairs is independent\n of the hash values of the keys.","sig":null,"attributes":[{"value":"/ A hash table where the iteration order of the key-value pairs is independent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":22507,"byte_end":22587,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ of the hash values of the keys.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":22588,"byte_end":22623,"line_start":30,"line_end":30,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":22624,"byte_end":22627,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ The interface is closely compatible with the standard `HashMap`, but also","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":22628,"byte_end":22705,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"/ has additional features.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":22706,"byte_end":22734,"line_start":33,"line_end":33,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":22735,"byte_end":22738,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # Order","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":22739,"byte_end":22750,"line_start":35,"line_end":35,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":22751,"byte_end":22754,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ The key-value pairs have a consistent order that is determined by","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":22755,"byte_end":22824,"line_start":37,"line_end":37,"column_start":1,"column_end":70}},{"value":"/ the sequence of insertion and removal calls on the map. The order does","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":22825,"byte_end":22899,"line_start":38,"line_end":38,"column_start":1,"column_end":75}},{"value":"/ not depend on the keys or the hash function at all.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":22900,"byte_end":22955,"line_start":39,"line_end":39,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":22956,"byte_end":22959,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ All iterators traverse the map in *the order*.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":22960,"byte_end":23010,"line_start":41,"line_end":41,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":23011,"byte_end":23014,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ The insertion order is preserved, with **notable exceptions** like the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":23015,"byte_end":23089,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ `.remove()` or `.swap_remove()` methods. Methods such as `.sort_by()` of","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":23090,"byte_end":23166,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"/ course result in a new order, depending on the sorting order.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":23167,"byte_end":23232,"line_start":45,"line_end":45,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":23233,"byte_end":23236,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # Indices","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":23237,"byte_end":23250,"line_start":47,"line_end":47,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":23251,"byte_end":23254,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ The key-value pairs are indexed in a compact range without holes in the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":23255,"byte_end":23330,"line_start":49,"line_end":49,"column_start":1,"column_end":76}},{"value":"/ range `0..self.len()`. For example, the method `.get_full` looks up the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":23331,"byte_end":23406,"line_start":50,"line_end":50,"column_start":1,"column_end":76}},{"value":"/ index for a key, and the method `.get_index` looks up the key-value pair by","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":23407,"byte_end":23486,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/ index.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":23487,"byte_end":23497,"line_start":52,"line_end":52,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":23498,"byte_end":23501,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":23502,"byte_end":23516,"line_start":54,"line_end":54,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":23517,"byte_end":23520,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":23521,"byte_end":23528,"line_start":56,"line_end":56,"column_start":1,"column_end":8}},{"value":"/ use indexmap::IndexMap;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":23529,"byte_end":23556,"line_start":57,"line_end":57,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":23557,"byte_end":23560,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ // count the frequency of each letter in a sentence.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":23561,"byte_end":23617,"line_start":59,"line_end":59,"column_start":1,"column_end":57}},{"value":"/ let mut letters = IndexMap::new();","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":23618,"byte_end":23656,"line_start":60,"line_end":60,"column_start":1,"column_end":39}},{"value":"/ for ch in \"a short treatise on fungi\".chars() {","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":23657,"byte_end":23708,"line_start":61,"line_end":61,"column_start":1,"column_end":52}},{"value":"/     *letters.entry(ch).or_insert(0) += 1;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":23709,"byte_end":23754,"line_start":62,"line_end":62,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":23755,"byte_end":23760,"line_start":63,"line_end":63,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":23761,"byte_end":23764,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(letters[&'s'], 2);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":23765,"byte_end":23798,"line_start":65,"line_end":65,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(letters[&'t'], 3);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":23799,"byte_end":23832,"line_start":66,"line_end":66,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(letters[&'u'], 1);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":23833,"byte_end":23866,"line_start":67,"line_end":67,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(letters.get(&'y'), None);","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":23867,"byte_end":23907,"line_start":68,"line_end":68,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":23908,"byte_end":23915,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"cfg(has_std)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":23916,"byte_end":23931,"line_start":70,"line_end":70,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":25679,"byte_end":25682,"line_start":147,"line_end":147,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexMap<K, V>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map. (Does not allocate.)\n","sig":null,"attributes":[{"value":"/ Create a new map. (Does not allocate.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":25611,"byte_end":25653,"line_start":145,"line_end":145,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":25658,"byte_end":25667,"line_start":146,"line_end":146,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":638},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":25909,"byte_end":25922,"line_start":156,"line_end":156,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<IndexMap<K, V>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map with capacity for `n` key-value pairs. (Does not\n allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new map with capacity for `n` key-value pairs. (Does not","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":25737,"byte_end":25806,"line_start":151,"line_end":151,"column_start":5,"column_end":74}},{"value":"/ allocate if `n` is zero.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":25811,"byte_end":25840,"line_start":152,"line_end":152,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":25845,"byte_end":25848,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":25853,"byte_end":25883,"line_start":154,"line_end":154,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":25888,"byte_end":25897,"line_start":155,"line_end":155,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":643},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":26220,"byte_end":26244,"line_start":167,"line_end":167,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<IndexMap<K, V, S>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map with capacity for `n` key-value pairs. (Does not\n allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new map with capacity for `n` key-value pairs. (Does not","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":26048,"byte_end":26117,"line_start":162,"line_end":162,"column_start":5,"column_end":74}},{"value":"/ allocate if `n` is zero.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":26122,"byte_end":26151,"line_start":163,"line_end":163,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":26156,"byte_end":26159,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":26164,"byte_end":26194,"line_start":165,"line_end":165,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":26199,"byte_end":26208,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":26656,"byte_end":26667,"line_start":182,"line_end":182,"column_start":18,"column_end":29},"name":"with_hasher","qualname":"<IndexMap<K, V, S>>::with_hasher","value":"pub const fn with_hasher(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map with `hash_builder`.","sig":null,"attributes":[{"value":"/ Create a new map with `hash_builder`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":26505,"byte_end":26546,"line_start":178,"line_end":178,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":26551,"byte_end":26554,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ This function is `const`, so it","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":26559,"byte_end":26594,"line_start":180,"line_end":180,"column_start":5,"column_end":40}},{"value":"/ can be called in `static` contexts.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":26599,"byte_end":26638,"line_start":181,"line_end":181,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":645},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":26842,"byte_end":26850,"line_start":190,"line_end":190,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexMap<K, V, S>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time.\n","sig":null,"attributes":[{"value":"/ Computes in **O(1)** time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":26800,"byte_end":26830,"line_start":189,"line_end":189,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":646},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":26971,"byte_end":26977,"line_start":195,"line_end":195,"column_start":12,"column_end":18},"name":"hasher","qualname":"<IndexMap<K, V, S>>::hasher","value":"pub fn hasher(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the map's `BuildHasher`.\n","sig":null,"attributes":[{"value":"/ Return a reference to the map's `BuildHasher`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":26909,"byte_end":26959,"line_start":194,"line_end":194,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":647},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":27152,"byte_end":27155,"line_start":203,"line_end":203,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexMap<K, V, S>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of key-value pairs in the map.","sig":null,"attributes":[{"value":"/ Return the number of key-value pairs in the map.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":27031,"byte_end":27083,"line_start":199,"line_end":199,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":27088,"byte_end":27091,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":27096,"byte_end":27126,"line_start":201,"line_end":201,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":27131,"byte_end":27140,"line_start":202,"line_end":202,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":648},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":27327,"byte_end":27335,"line_start":211,"line_end":211,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexMap<K, V, S>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains no elements.","sig":null,"attributes":[{"value":"/ Returns true if the map contains no elements.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":27209,"byte_end":27258,"line_start":207,"line_end":207,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":27263,"byte_end":27266,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":27271,"byte_end":27301,"line_start":209,"line_end":209,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":27306,"byte_end":27315,"line_start":210,"line_end":210,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":649},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":27474,"byte_end":27478,"line_start":216,"line_end":216,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexMap<K, V, S>>::iter","value":"pub fn iter(&Self) -> Iter<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the key-value pairs of the map, in their order","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":27388,"byte_end":27462,"line_start":215,"line_end":215,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":27672,"byte_end":27680,"line_start":223,"line_end":223,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<IndexMap<K, V, S>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the key-value pairs of the map, in their order","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":27586,"byte_end":27660,"line_start":222,"line_end":222,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":27881,"byte_end":27885,"line_start":230,"line_end":230,"column_start":12,"column_end":16},"name":"keys","qualname":"<IndexMap<K, V, S>>::keys","value":"pub fn keys(&Self) -> Keys<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the keys of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the keys of the map, in their order","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":27806,"byte_end":27869,"line_start":229,"line_end":229,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":28075,"byte_end":28084,"line_start":237,"line_end":237,"column_start":12,"column_end":21},"name":"into_keys","qualname":"<IndexMap<K, V, S>>::into_keys","value":"pub fn into_keys(Self) -> IntoKeys<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an owning iterator over the keys of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an owning iterator over the keys of the map, in their order","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":27993,"byte_end":28063,"line_start":236,"line_end":236,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":28279,"byte_end":28285,"line_start":244,"line_end":244,"column_start":12,"column_end":18},"name":"values","qualname":"<IndexMap<K, V, S>>::values","value":"pub fn values(&Self) -> Values<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the values of the map, in their order","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":28202,"byte_end":28267,"line_start":243,"line_end":243,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":28504,"byte_end":28514,"line_start":252,"line_end":252,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<IndexMap<K, V, S>>::values_mut","value":"pub fn values_mut(&mut Self) -> ValuesMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over mutable references to the values of the map,\n in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over mutable references to the values of the map,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":28397,"byte_end":28469,"line_start":250,"line_end":250,"column_start":5,"column_end":77}},{"value":"/ in their order","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":28474,"byte_end":28492,"line_start":251,"line_end":251,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":28728,"byte_end":28739,"line_start":259,"line_end":259,"column_start":12,"column_end":23},"name":"into_values","qualname":"<IndexMap<K, V, S>>::into_values","value":"pub fn into_values(Self) -> IntoValues<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an owning iterator over the values of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an owning iterator over the values of the map, in their order","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":28644,"byte_end":28716,"line_start":258,"line_end":258,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":28989,"byte_end":28994,"line_start":268,"line_end":268,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexMap<K, V, S>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all key-value pairs in the map, while preserving its capacity.","sig":null,"attributes":[{"value":"/ Remove all key-value pairs in the map, while preserving its capacity.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":28861,"byte_end":28934,"line_start":265,"line_end":265,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":28939,"byte_end":28942,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":28947,"byte_end":28977,"line_start":267,"line_end":267,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":657},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":29222,"byte_end":29230,"line_start":275,"line_end":275,"column_start":12,"column_end":20},"name":"truncate","qualname":"<IndexMap<K, V, S>>::truncate","value":"pub fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shortens the map, keeping the first `len` elements and dropping the rest.","sig":null,"attributes":[{"value":"/ Shortens the map, keeping the first `len` elements and dropping the rest.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":29046,"byte_end":29123,"line_start":272,"line_end":272,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":29128,"byte_end":29131,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ If `len` is greater than the map's current length, this has no effect.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":29136,"byte_end":29210,"line_start":274,"line_end":274,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":29982,"byte_end":29987,"line_start":292,"line_end":292,"column_start":12,"column_end":17},"name":"drain","qualname":"<IndexMap<K, V, S>>::drain","value":"pub fn drain<R>(&mut Self, R) -> Drain<, K, V> where R: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Clears the `IndexMap` in the given index range, returning those\n key-value pairs as a drain iterator.","sig":null,"attributes":[{"value":"/ Clears the `IndexMap` in the given index range, returning those","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":29300,"byte_end":29367,"line_start":279,"line_end":279,"column_start":5,"column_end":72}},{"value":"/ key-value pairs as a drain iterator.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":29372,"byte_end":29412,"line_start":280,"line_end":280,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":29417,"byte_end":29420,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ The range may be any type that implements `RangeBounds<usize>`,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":29425,"byte_end":29492,"line_start":282,"line_end":282,"column_start":5,"column_end":72}},{"value":"/ including all of the `std::ops::Range*` types, or even a tuple pair of","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":29497,"byte_end":29571,"line_start":283,"line_end":283,"column_start":5,"column_end":79}},{"value":"/ `Bound` start and end values. To drain the map entirely, use `RangeFull`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":29576,"byte_end":29652,"line_start":284,"line_end":284,"column_start":5,"column_end":81}},{"value":"/ like `map.drain(..)`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":29657,"byte_end":29682,"line_start":285,"line_end":285,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":29687,"byte_end":29690,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ This shifts down all entries following the drained range to fill the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":29695,"byte_end":29767,"line_start":287,"line_end":287,"column_start":5,"column_end":77}},{"value":"/ gap, and keeps the allocated memory for reuse.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":29772,"byte_end":29822,"line_start":288,"line_end":288,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":29827,"byte_end":29830,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if the starting point is greater than the end point or if","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":29835,"byte_end":29909,"line_start":290,"line_end":290,"column_start":5,"column_end":79}},{"value":"/ the end point is greater than the length of the map.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":29914,"byte_end":29970,"line_start":291,"line_end":291,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":660},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":30497,"byte_end":30506,"line_start":308,"line_end":308,"column_start":12,"column_end":21},"name":"split_off","qualname":"<IndexMap<K, V, S>>::split_off","value":"pub fn split_off(&mut Self, usize) -> Self where S: Clone","parent":null,"children":[],"decl_id":null,"docs":" Splits the collection into two at the given index.","sig":null,"attributes":[{"value":"/ Splits the collection into two at the given index.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":30157,"byte_end":30211,"line_start":301,"line_end":301,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":30216,"byte_end":30219,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ Returns a newly allocated map containing the elements in the range","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":30224,"byte_end":30294,"line_start":303,"line_end":303,"column_start":5,"column_end":75}},{"value":"/ `[at, len)`. After the call, the original map will be left containing","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":30299,"byte_end":30372,"line_start":304,"line_end":304,"column_start":5,"column_end":78}},{"value":"/ the elements `[0, at)` with its previous capacity unchanged.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":30377,"byte_end":30441,"line_start":305,"line_end":305,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":30446,"byte_end":30449,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `at > len`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":30454,"byte_end":30485,"line_start":307,"line_end":307,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":665},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":30897,"byte_end":30904,"line_start":327,"line_end":327,"column_start":12,"column_end":19},"name":"reserve","qualname":"<IndexMap<K, V, S>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserve capacity for `additional` more key-value pairs.","sig":null,"attributes":[{"value":"/ Reserve capacity for `additional` more key-value pairs.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":30783,"byte_end":30842,"line_start":324,"line_end":324,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":30847,"byte_end":30850,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":30855,"byte_end":30885,"line_start":326,"line_end":326,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":666},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":31097,"byte_end":31110,"line_start":334,"line_end":334,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<IndexMap<K, V, S>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the capacity of the map as much as possible.","sig":null,"attributes":[{"value":"/ Shrink the capacity of the map as much as possible.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":30987,"byte_end":31042,"line_start":331,"line_end":331,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":31047,"byte_end":31050,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":31055,"byte_end":31085,"line_start":333,"line_end":333,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":32009,"byte_end":32015,"line_start":357,"line_end":357,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexMap<K, V, S>>::insert","value":"pub fn insert(&mut Self, K, V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Insert a key-value pair in the map.","sig":null,"attributes":[{"value":"/ Insert a key-value pair in the map.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":31357,"byte_end":31396,"line_start":344,"line_end":344,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":31401,"byte_end":31404,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ If an equivalent key already exists in the map: the key remains and","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":31409,"byte_end":31480,"line_start":346,"line_end":346,"column_start":5,"column_end":76}},{"value":"/ retains in its place in the order, its corresponding value is updated","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":31485,"byte_end":31558,"line_start":347,"line_end":347,"column_start":5,"column_end":78}},{"value":"/ with `value` and the older value is returned inside `Some(_)`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":31563,"byte_end":31629,"line_start":348,"line_end":348,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":31634,"byte_end":31637,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ If no equivalent key existed in the map: the new key-value pair is","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":31642,"byte_end":31712,"line_start":350,"line_end":350,"column_start":5,"column_end":75}},{"value":"/ inserted, last in order, and `None` is returned.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":31717,"byte_end":31769,"line_start":351,"line_end":351,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":31774,"byte_end":31777,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":31782,"byte_end":31832,"line_start":353,"line_end":353,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":31837,"byte_end":31840,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ See also [`entry`](#method.entry) if you you want to insert *or* modify","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":31845,"byte_end":31920,"line_start":355,"line_end":355,"column_start":5,"column_end":80}},{"value":"/ or if you need to get the index of the corresponding key-value pair.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":31925,"byte_end":31997,"line_start":356,"line_end":356,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":670},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":32801,"byte_end":32812,"line_start":374,"line_end":374,"column_start":12,"column_end":23},"name":"insert_full","qualname":"<IndexMap<K, V, S>>::insert_full","value":"pub fn insert_full(&mut Self, K, V) -> (usize, Option<V>)","parent":null,"children":[],"decl_id":null,"docs":" Insert a key-value pair in the map, and get their index.","sig":null,"attributes":[{"value":"/ Insert a key-value pair in the map, and get their index.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":32110,"byte_end":32170,"line_start":361,"line_end":361,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":32175,"byte_end":32178,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ If an equivalent key already exists in the map: the key remains and","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":32183,"byte_end":32254,"line_start":363,"line_end":363,"column_start":5,"column_end":76}},{"value":"/ retains in its place in the order, its corresponding value is updated","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":32259,"byte_end":32332,"line_start":364,"line_end":364,"column_start":5,"column_end":78}},{"value":"/ with `value` and the older value is returned inside `(index, Some(_))`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":32337,"byte_end":32412,"line_start":365,"line_end":365,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":32417,"byte_end":32420,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ If no equivalent key existed in the map: the new key-value pair is","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":32425,"byte_end":32495,"line_start":367,"line_end":367,"column_start":5,"column_end":75}},{"value":"/ inserted, last in order, and `(index, None)` is returned.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":32500,"byte_end":32561,"line_start":368,"line_end":368,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":32566,"byte_end":32569,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":32574,"byte_end":32624,"line_start":370,"line_end":370,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":32629,"byte_end":32632,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ See also [`entry`](#method.entry) if you you want to insert *or* modify","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":32637,"byte_end":32712,"line_start":372,"line_end":372,"column_start":5,"column_end":80}},{"value":"/ or if you need to get the index of the corresponding key-value pair.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":32717,"byte_end":32789,"line_start":373,"line_end":373,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":33144,"byte_end":33149,"line_start":383,"line_end":383,"column_start":12,"column_end":17},"name":"entry","qualname":"<IndexMap<K, V, S>>::entry","value":"pub fn entry(&mut Self, K) -> Entry<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Get the given key’s corresponding entry in the map for insertion and/or\n in-place manipulation.","sig":null,"attributes":[{"value":"/ Get the given key’s corresponding entry in the map for insertion and/or","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":32961,"byte_end":33038,"line_start":379,"line_end":379,"column_start":5,"column_end":80}},{"value":"/ in-place manipulation.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":33043,"byte_end":33069,"line_start":380,"line_end":380,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":33074,"byte_end":33077,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":33082,"byte_end":33132,"line_start":382,"line_end":382,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":33399,"byte_end":33411,"line_start":391,"line_end":391,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<IndexMap<K, V, S>>::contains_key","value":"pub fn contains_key<Q: ?Sized>(&Self, &Q) -> bool where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if an equivalent to `key` exists in the map.","sig":null,"attributes":[{"value":"/ Return `true` if an equivalent to `key` exists in the map.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":33272,"byte_end":33334,"line_start":388,"line_end":388,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":33339,"byte_end":33342,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":33347,"byte_end":33387,"line_start":390,"line_end":390,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":33705,"byte_end":33708,"line_start":402,"line_end":402,"column_start":12,"column_end":15},"name":"get","qualname":"<IndexMap<K, V, S>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&V> where Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the value stored for `key`, if it is present,\n else `None`.","sig":null,"attributes":[{"value":"/ Return a reference to the value stored for `key`, if it is present,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":33548,"byte_end":33619,"line_start":398,"line_end":398,"column_start":5,"column_end":76}},{"value":"/ else `None`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":33624,"byte_end":33640,"line_start":399,"line_end":399,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":33645,"byte_end":33648,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":33653,"byte_end":33693,"line_start":401,"line_end":401,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":676},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":34147,"byte_end":34160,"line_start":418,"line_end":418,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<IndexMap<K, V, S>>::get_key_value","value":"pub fn get_key_value<Q: ?Sized>(&Self, &Q) -> Option<(&K, &V)> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return references to the key-value pair stored for `key`,\n if it is present, else `None`.","sig":null,"attributes":[{"value":"/ Return references to the key-value pair stored for `key`,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":33982,"byte_end":34043,"line_start":414,"line_end":414,"column_start":5,"column_end":66}},{"value":"/ if it is present, else `None`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":34048,"byte_end":34082,"line_start":415,"line_end":415,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":34087,"byte_end":34090,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":34095,"byte_end":34135,"line_start":417,"line_end":417,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":678},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":34502,"byte_end":34510,"line_start":431,"line_end":431,"column_start":12,"column_end":20},"name":"get_full","qualname":"<IndexMap<K, V, S>>::get_full","value":"pub fn get_full<Q: ?Sized>(&Self, &Q) -> Option<(usize, &K, &V)> where\nQ: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return item index, key and value\n","sig":null,"attributes":[{"value":"/ Return item index, key and value","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":34454,"byte_end":34490,"line_start":430,"line_end":430,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":680},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":34925,"byte_end":34937,"line_start":446,"line_end":446,"column_start":12,"column_end":24},"name":"get_index_of","qualname":"<IndexMap<K, V, S>>::get_index_of","value":"pub fn get_index_of<Q: ?Sized>(&Self, &Q) -> Option<usize> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return item index, if it exists in the map","sig":null,"attributes":[{"value":"/ Return item index, if it exists in the map","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":34814,"byte_end":34860,"line_start":443,"line_end":443,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":34865,"byte_end":34868,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":34873,"byte_end":34913,"line_start":445,"line_end":445,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":35207,"byte_end":35214,"line_start":458,"line_end":458,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<IndexMap<K, V, S>>::get_mut","value":"pub fn get_mut<Q: ?Sized>(&mut Self, &Q) -> Option<&mut V> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":35515,"byte_end":35527,"line_start":470,"line_end":470,"column_start":12,"column_end":24},"name":"get_full_mut","qualname":"<IndexMap<K, V, S>>::get_full_mut","value":"pub fn get_full_mut<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, &K, &mut V)>\nwhere Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":36559,"byte_end":36565,"line_start":505,"line_end":505,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexMap<K, V, S>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return\n its value.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":36238,"byte_end":36298,"line_start":497,"line_end":497,"column_start":5,"column_end":65}},{"value":"/ its value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":36303,"byte_end":36317,"line_start":498,"line_end":498,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":36322,"byte_end":36325,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove(key)`, if you need to","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":36330,"byte_end":36401,"line_start":500,"line_end":500,"column_start":5,"column_end":76}},{"value":"/ preserve the order of the keys in the map, use `.shift_remove(key)`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":36406,"byte_end":36477,"line_start":501,"line_end":501,"column_start":5,"column_end":76}},{"value":"/ instead.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":36482,"byte_end":36494,"line_start":502,"line_end":502,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":36499,"byte_end":36502,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":36507,"byte_end":36547,"line_start":504,"line_end":504,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":37015,"byte_end":37027,"line_start":519,"line_end":519,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<IndexMap<K, V, S>>::remove_entry","value":"pub fn remove_entry<Q: ?Sized>(&mut Self, &Q) -> Option<(K, V)> where\nQ: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key-value pair equivalent to `key`.","sig":null,"attributes":[{"value":"/ Remove and return the key-value pair equivalent to `key`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":36700,"byte_end":36761,"line_start":512,"line_end":512,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":36766,"byte_end":36769,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove_entry(key)`, if you need to","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":36774,"byte_end":36851,"line_start":514,"line_end":514,"column_start":5,"column_end":82}},{"value":"/ preserve the order of the keys in the map, use `.shift_remove_entry(key)`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":36856,"byte_end":36933,"line_start":515,"line_end":515,"column_start":5,"column_end":82}},{"value":"/ instead.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":36938,"byte_end":36950,"line_start":516,"line_end":516,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":36955,"byte_end":36958,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":36963,"byte_end":37003,"line_start":518,"line_end":518,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":37584,"byte_end":37595,"line_start":536,"line_end":536,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<IndexMap<K, V, S>>::swap_remove","value":"pub fn swap_remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return\n its value.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":37173,"byte_end":37233,"line_start":526,"line_end":526,"column_start":5,"column_end":65}},{"value":"/ its value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":37238,"byte_end":37252,"line_start":527,"line_end":527,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":37257,"byte_end":37260,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":37265,"byte_end":37337,"line_start":529,"line_end":529,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":37342,"byte_end":37405,"line_start":530,"line_end":530,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":37410,"byte_end":37465,"line_start":531,"line_end":531,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":37470,"byte_end":37473,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":37478,"byte_end":37519,"line_start":533,"line_end":533,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":37524,"byte_end":37527,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":37532,"byte_end":37572,"line_start":535,"line_end":535,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":38139,"byte_end":38156,"line_start":552,"line_end":552,"column_start":12,"column_end":29},"name":"swap_remove_entry","qualname":"<IndexMap<K, V, S>>::swap_remove_entry","value":"pub fn swap_remove_entry<Q: ?Sized>(&mut Self, &Q) -> Option<(K, V)> where\nQ: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key-value pair equivalent to `key`.","sig":null,"attributes":[{"value":"/ Remove and return the key-value pair equivalent to `key`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":37746,"byte_end":37807,"line_start":543,"line_end":543,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":37812,"byte_end":37815,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":37820,"byte_end":37892,"line_start":545,"line_end":545,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":37897,"byte_end":37960,"line_start":546,"line_end":546,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":37965,"byte_end":38020,"line_start":547,"line_end":547,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":38025,"byte_end":38028,"line_start":548,"line_end":548,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":38033,"byte_end":38074,"line_start":549,"line_end":549,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":38079,"byte_end":38082,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":38087,"byte_end":38127,"line_start":551,"line_end":551,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":696},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":38827,"byte_end":38843,"line_start":572,"line_end":572,"column_start":12,"column_end":28},"name":"swap_remove_full","qualname":"<IndexMap<K, V, S>>::swap_remove_full","value":"pub fn swap_remove_full<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, K, V)>\nwhere Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return it and\n the index it had.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return it and","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":38402,"byte_end":38469,"line_start":562,"line_end":562,"column_start":5,"column_end":72}},{"value":"/ the index it had.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":38474,"byte_end":38495,"line_start":563,"line_end":563,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":38500,"byte_end":38503,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":38508,"byte_end":38580,"line_start":565,"line_end":565,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":38585,"byte_end":38648,"line_start":566,"line_end":566,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":38653,"byte_end":38708,"line_start":567,"line_end":567,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":38713,"byte_end":38716,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":38721,"byte_end":38762,"line_start":569,"line_end":569,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":38767,"byte_end":38770,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":38775,"byte_end":38815,"line_start":571,"line_end":571,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":39510,"byte_end":39522,"line_start":593,"line_end":593,"column_start":12,"column_end":24},"name":"shift_remove","qualname":"<IndexMap<K, V, S>>::shift_remove","value":"pub fn shift_remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return\n its value.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":39105,"byte_end":39165,"line_start":583,"line_end":583,"column_start":5,"column_end":65}},{"value":"/ its value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":39170,"byte_end":39184,"line_start":584,"line_end":584,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":39189,"byte_end":39192,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":39197,"byte_end":39263,"line_start":586,"line_end":586,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":39268,"byte_end":39329,"line_start":587,"line_end":587,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":39334,"byte_end":39391,"line_start":588,"line_end":588,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":39396,"byte_end":39399,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":39404,"byte_end":39445,"line_start":590,"line_end":590,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":39450,"byte_end":39453,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":39458,"byte_end":39498,"line_start":592,"line_end":592,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":40061,"byte_end":40079,"line_start":609,"line_end":609,"column_start":12,"column_end":30},"name":"shift_remove_entry","qualname":"<IndexMap<K, V, S>>::shift_remove_entry","value":"pub fn shift_remove_entry<Q: ?Sized>(&mut Self, &Q) -> Option<(K, V)> where\nQ: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key-value pair equivalent to `key`.","sig":null,"attributes":[{"value":"/ Remove and return the key-value pair equivalent to `key`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":39674,"byte_end":39735,"line_start":600,"line_end":600,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":39740,"byte_end":39743,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":39748,"byte_end":39814,"line_start":602,"line_end":602,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":39819,"byte_end":39880,"line_start":603,"line_end":603,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":39885,"byte_end":39942,"line_start":604,"line_end":604,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":39947,"byte_end":39950,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":39955,"byte_end":39996,"line_start":606,"line_end":606,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":40001,"byte_end":40004,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":40009,"byte_end":40049,"line_start":608,"line_end":608,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":40745,"byte_end":40762,"line_start":629,"line_end":629,"column_start":12,"column_end":29},"name":"shift_remove_full","qualname":"<IndexMap<K, V, S>>::shift_remove_full","value":"pub fn shift_remove_full<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, K, V)>\nwhere Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return it and\n the index it had.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return it and","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":40326,"byte_end":40393,"line_start":619,"line_end":619,"column_start":5,"column_end":72}},{"value":"/ the index it had.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":40398,"byte_end":40419,"line_start":620,"line_end":620,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":40424,"byte_end":40427,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":40432,"byte_end":40498,"line_start":622,"line_end":622,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":40503,"byte_end":40564,"line_start":623,"line_end":623,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":40569,"byte_end":40626,"line_start":624,"line_end":624,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":40631,"byte_end":40634,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":40639,"byte_end":40680,"line_start":626,"line_end":626,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":40685,"byte_end":40688,"line_start":627,"line_end":627,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":40693,"byte_end":40733,"line_start":628,"line_end":628,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":41192,"byte_end":41195,"line_start":645,"line_end":645,"column_start":12,"column_end":15},"name":"pop","qualname":"<IndexMap<K, V, S>>::pop","value":"pub fn pop(&mut Self) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the last key-value pair","sig":null,"attributes":[{"value":"/ Remove the last key-value pair","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":41025,"byte_end":41059,"line_start":640,"line_end":640,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":41064,"byte_end":41067,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ This preserves the order of the remaining elements.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":41072,"byte_end":41127,"line_start":642,"line_end":642,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":41132,"byte_end":41135,"line_start":643,"line_end":643,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":41140,"byte_end":41180,"line_start":644,"line_end":644,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":41538,"byte_end":41544,"line_start":656,"line_end":656,"column_start":12,"column_end":18},"name":"retain","qualname":"<IndexMap<K, V, S>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&K, &mut V) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Scan through each key-value pair in the map and keep those where the\n closure `keep` returns `true`.","sig":null,"attributes":[{"value":"/ Scan through each key-value pair in the map and keep those where the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":41262,"byte_end":41334,"line_start":649,"line_end":649,"column_start":5,"column_end":77}},{"value":"/ closure `keep` returns `true`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":41339,"byte_end":41373,"line_start":650,"line_end":650,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":41378,"byte_end":41381,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ The elements are visited in order, and remaining elements keep their","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":41386,"byte_end":41458,"line_start":652,"line_end":652,"column_start":5,"column_end":77}},{"value":"/ order.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":41463,"byte_end":41473,"line_start":653,"line_end":653,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":41478,"byte_end":41481,"line_start":654,"line_end":654,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":41486,"byte_end":41526,"line_start":655,"line_end":655,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":41999,"byte_end":42008,"line_start":673,"line_end":673,"column_start":12,"column_end":21},"name":"sort_keys","qualname":"<IndexMap<K, V, S>>::sort_keys","value":"pub fn sort_keys(&mut Self) where K: Ord","parent":null,"children":[],"decl_id":null,"docs":" Sort the map’s key-value pairs by the default ordering of the keys.","sig":null,"attributes":[{"value":"/ Sort the map’s key-value pairs by the default ordering of the keys.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":41854,"byte_end":41927,"line_start":670,"line_end":670,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":41932,"byte_end":41935,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ See [`sort_by`](Self::sort_by) for details.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":41940,"byte_end":41987,"line_start":672,"line_end":672,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":42598,"byte_end":42605,"line_start":690,"line_end":690,"column_start":12,"column_end":19},"name":"sort_by","qualname":"<IndexMap<K, V, S>>::sort_by","value":"pub fn sort_by<F>(&mut Self, F) where F: FnMut(&K, &V, &K, &V) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the map’s key-value pairs in place using the comparison\n function `cmp`.","sig":null,"attributes":[{"value":"/ Sort the map’s key-value pairs in place using the comparison","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":42183,"byte_end":42249,"line_start":682,"line_end":682,"column_start":5,"column_end":69}},{"value":"/ function `cmp`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":42254,"byte_end":42273,"line_start":683,"line_end":683,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":42278,"byte_end":42281,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ The comparison function receives two key and value pairs to compare (you","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":42286,"byte_end":42362,"line_start":685,"line_end":685,"column_start":5,"column_end":81}},{"value":"/ can sort by keys or values or their combination as needed).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":42367,"byte_end":42430,"line_start":686,"line_end":686,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":42435,"byte_end":42438,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n log n + c)** time and **O(n)** space where *n* is","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":42443,"byte_end":42514,"line_start":688,"line_end":688,"column_start":5,"column_end":76}},{"value":"/ the length of the map and *c* the capacity. The sort is stable.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":42519,"byte_end":42586,"line_start":689,"line_end":689,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":717},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":43008,"byte_end":43017,"line_start":703,"line_end":703,"column_start":12,"column_end":21},"name":"sorted_by","qualname":"<IndexMap<K, V, S>>::sorted_by","value":"pub fn sorted_by<F>(Self, F) -> IntoIter<K, V> where F: FnMut(&K, &V, &K, &V)\n-> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the key-value pairs of the map and return a by-value iterator of\n the key-value pairs with the result.","sig":null,"attributes":[{"value":"/ Sort the key-value pairs of the map and return a by-value iterator of","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":42842,"byte_end":42915,"line_start":699,"line_end":699,"column_start":5,"column_end":78}},{"value":"/ the key-value pairs with the result.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":42920,"byte_end":42960,"line_start":700,"line_end":700,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":42965,"byte_end":42968,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ The sort is stable.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":42973,"byte_end":42996,"line_start":702,"line_end":702,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":43542,"byte_end":43560,"line_start":718,"line_end":718,"column_start":12,"column_end":30},"name":"sort_unstable_keys","qualname":"<IndexMap<K, V, S>>::sort_unstable_keys","value":"pub fn sort_unstable_keys(&mut Self) where K: Ord","parent":null,"children":[],"decl_id":null,"docs":" Sort the map's key-value pairs by the default ordering of the keys, but\n may not preserve the order of equal elements.","sig":null,"attributes":[{"value":"/ Sort the map's key-value pairs by the default ordering of the keys, but","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":43323,"byte_end":43398,"line_start":714,"line_end":714,"column_start":5,"column_end":80}},{"value":"/ may not preserve the order of equal elements.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":43403,"byte_end":43452,"line_start":715,"line_end":715,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":43457,"byte_end":43460,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/ See [`sort_unstable_by`](Self::sort_unstable_by) for details.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":43465,"byte_end":43530,"line_start":717,"line_end":717,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":723},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":44193,"byte_end":44209,"line_start":735,"line_end":735,"column_start":12,"column_end":28},"name":"sort_unstable_by","qualname":"<IndexMap<K, V, S>>::sort_unstable_by","value":"pub fn sort_unstable_by<F>(&mut Self, F) where F: FnMut(&K, &V, &K, &V) ->\nOrdering","parent":null,"children":[],"decl_id":null,"docs":" Sort the map's key-value pairs in place using the comparison function `cmp`, but\n may not preserve the order of equal elements.","sig":null,"attributes":[{"value":"/ Sort the map's key-value pairs in place using the comparison function `cmp`, but","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":43744,"byte_end":43828,"line_start":727,"line_end":727,"column_start":5,"column_end":89}},{"value":"/ may not preserve the order of equal elements.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":43833,"byte_end":43882,"line_start":728,"line_end":728,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":43887,"byte_end":43890,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ The comparison function receives two key and value pairs to compare (you","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":43895,"byte_end":43971,"line_start":730,"line_end":730,"column_start":5,"column_end":81}},{"value":"/ can sort by keys or values or their combination as needed).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":43976,"byte_end":44039,"line_start":731,"line_end":731,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":44044,"byte_end":44047,"line_start":732,"line_end":732,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n log n + c)** time where *n* is","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":44052,"byte_end":44104,"line_start":733,"line_end":733,"column_start":5,"column_end":57}},{"value":"/ the length of the map and *c* is the capacity. The sort is unstable.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":44109,"byte_end":44181,"line_start":734,"line_end":734,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":44637,"byte_end":44655,"line_start":749,"line_end":749,"column_start":12,"column_end":30},"name":"sorted_unstable_by","qualname":"<IndexMap<K, V, S>>::sorted_unstable_by","value":"pub fn sorted_unstable_by<F>(Self, F) -> IntoIter<K, V> where\nF: FnMut(&K, &V, &K, &V) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the key-value pairs of the map and return a by-value iterator of\n the key-value pairs with the result.","sig":null,"attributes":[{"value":"/ Sort the key-value pairs of the map and return a by-value iterator of","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":44455,"byte_end":44528,"line_start":744,"line_end":744,"column_start":5,"column_end":78}},{"value":"/ the key-value pairs with the result.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":44533,"byte_end":44573,"line_start":745,"line_end":745,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":44578,"byte_end":44581,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ The sort is unstable.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":44586,"byte_end":44611,"line_start":747,"line_end":747,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":44616,"byte_end":44625,"line_start":748,"line_end":748,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":45107,"byte_end":45114,"line_start":763,"line_end":763,"column_start":12,"column_end":19},"name":"reverse","qualname":"<IndexMap<K, V, S>>::reverse","value":"pub fn reverse(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reverses the order of the map’s key-value pairs in place.","sig":null,"attributes":[{"value":"/ Reverses the order of the map’s key-value pairs in place.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":44970,"byte_end":45033,"line_start":760,"line_end":760,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":45038,"byte_end":45041,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time and **O(1)** space.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":45046,"byte_end":45095,"line_start":762,"line_end":762,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":735},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":45351,"byte_end":45360,"line_start":774,"line_end":774,"column_start":12,"column_end":21},"name":"get_index","qualname":"<IndexMap<K, V, S>>::get_index","value":"pub fn get_index(&Self, usize) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Get a key-value pair by index","sig":null,"attributes":[{"value":"/ Get a key-value pair by index","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":45203,"byte_end":45236,"line_start":769,"line_end":769,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":45241,"byte_end":45244,"line_start":770,"line_end":770,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":45249,"byte_end":45296,"line_start":771,"line_end":771,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":45301,"byte_end":45304,"line_start":772,"line_end":772,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":45309,"byte_end":45339,"line_start":773,"line_end":773,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":45618,"byte_end":45631,"line_start":783,"line_end":783,"column_start":12,"column_end":25},"name":"get_index_mut","qualname":"<IndexMap<K, V, S>>::get_index_mut","value":"pub fn get_index_mut(&mut Self, usize) -> Option<(&mut K, &mut V)>","parent":null,"children":[],"decl_id":null,"docs":" Get a key-value pair by index","sig":null,"attributes":[{"value":"/ Get a key-value pair by index","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":45470,"byte_end":45503,"line_start":778,"line_end":778,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":45508,"byte_end":45511,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":45516,"byte_end":45563,"line_start":780,"line_end":780,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":45568,"byte_end":45571,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":45576,"byte_end":45606,"line_start":782,"line_end":782,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":45848,"byte_end":45853,"line_start":790,"line_end":790,"column_start":12,"column_end":17},"name":"first","qualname":"<IndexMap<K, V, S>>::first","value":"pub fn first(&Self) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Get the first key-value pair","sig":null,"attributes":[{"value":"/ Get the first key-value pair","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":45761,"byte_end":45793,"line_start":787,"line_end":787,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":45798,"byte_end":45801,"line_start":788,"line_end":788,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":45806,"byte_end":45836,"line_start":789,"line_end":789,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":46067,"byte_end":46076,"line_start":797,"line_end":797,"column_start":12,"column_end":21},"name":"first_mut","qualname":"<IndexMap<K, V, S>>::first_mut","value":"pub fn first_mut(&mut Self) -> Option<(&K, &mut V)>","parent":null,"children":[],"decl_id":null,"docs":" Get the first key-value pair, with mutable access to the value","sig":null,"attributes":[{"value":"/ Get the first key-value pair, with mutable access to the value","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":45946,"byte_end":46012,"line_start":794,"line_end":794,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":46017,"byte_end":46020,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":46025,"byte_end":46055,"line_start":796,"line_end":796,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":739},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":46274,"byte_end":46278,"line_start":804,"line_end":804,"column_start":12,"column_end":16},"name":"last","qualname":"<IndexMap<K, V, S>>::last","value":"pub fn last(&Self) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Get the last key-value pair","sig":null,"attributes":[{"value":"/ Get the last key-value pair","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":46188,"byte_end":46219,"line_start":801,"line_end":801,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":46224,"byte_end":46227,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":46232,"byte_end":46262,"line_start":803,"line_end":803,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":46490,"byte_end":46498,"line_start":811,"line_end":811,"column_start":12,"column_end":20},"name":"last_mut","qualname":"<IndexMap<K, V, S>>::last_mut","value":"pub fn last_mut(&mut Self) -> Option<(&K, &mut V)>","parent":null,"children":[],"decl_id":null,"docs":" Get the last key-value pair, with mutable access to the value","sig":null,"attributes":[{"value":"/ Get the last key-value pair, with mutable access to the value","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":46370,"byte_end":46435,"line_start":808,"line_end":808,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":46440,"byte_end":46443,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":46448,"byte_end":46478,"line_start":810,"line_end":810,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":741},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":46985,"byte_end":47002,"line_start":824,"line_end":824,"column_start":12,"column_end":29},"name":"swap_remove_index","qualname":"<IndexMap<K, V, S>>::swap_remove_index","value":"pub fn swap_remove_index(&mut Self, usize) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair by index","sig":null,"attributes":[{"value":"/ Remove the key-value pair by index","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":46609,"byte_end":46647,"line_start":815,"line_end":815,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":46652,"byte_end":46655,"line_start":816,"line_end":816,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":46660,"byte_end":46707,"line_start":817,"line_end":817,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":46712,"byte_end":46715,"line_start":818,"line_end":818,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":46720,"byte_end":46792,"line_start":819,"line_end":819,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":46797,"byte_end":46860,"line_start":820,"line_end":820,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":46865,"byte_end":46920,"line_start":821,"line_end":821,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":46925,"byte_end":46928,"line_start":822,"line_end":822,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":46933,"byte_end":46973,"line_start":823,"line_end":823,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":742},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":47472,"byte_end":47490,"line_start":837,"line_end":837,"column_start":12,"column_end":30},"name":"shift_remove_index","qualname":"<IndexMap<K, V, S>>::shift_remove_index","value":"pub fn shift_remove_index(&mut Self, usize) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair by index","sig":null,"attributes":[{"value":"/ Remove the key-value pair by index","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":47102,"byte_end":47140,"line_start":828,"line_end":828,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":47145,"byte_end":47148,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":47153,"byte_end":47200,"line_start":830,"line_end":830,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":47205,"byte_end":47208,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":47213,"byte_end":47279,"line_start":832,"line_end":832,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":47284,"byte_end":47345,"line_start":833,"line_end":833,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":47350,"byte_end":47407,"line_start":834,"line_end":834,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":47412,"byte_end":47415,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":47420,"byte_end":47460,"line_start":836,"line_end":836,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":743},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":47722,"byte_end":47734,"line_start":844,"line_end":844,"column_start":12,"column_end":24},"name":"swap_indices","qualname":"<IndexMap<K, V, S>>::swap_indices","value":"pub fn swap_indices(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swaps the position of two key-value pairs in the map.","sig":null,"attributes":[{"value":"/ Swaps the position of two key-value pairs in the map.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":47591,"byte_end":47648,"line_start":841,"line_end":841,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":47653,"byte_end":47656,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `a` or `b` are out of bounds.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":47661,"byte_end":47710,"line_start":843,"line_end":843,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":744},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":48071,"byte_end":48075,"line_start":856,"line_end":856,"column_start":12,"column_end":16},"name":"Keys","qualname":"::map::Keys","value":"Keys {  }","parent":null,"children":[{"krate":0,"index":748}],"decl_id":null,"docs":" An iterator over the keys of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An iterator over the keys of a `IndexMap`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":47814,"byte_end":47860,"line_start":849,"line_end":849,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":47861,"byte_end":47864,"line_start":850,"line_end":850,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`keys`] method on [`IndexMap`]. See its","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":47865,"byte_end":47941,"line_start":851,"line_end":851,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":47942,"byte_end":47969,"line_start":852,"line_end":852,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":47970,"byte_end":47973,"line_start":853,"line_end":853,"column_start":1,"column_end":4}},{"value":"/ [`keys`]: struct.IndexMap.html#method.keys","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":47974,"byte_end":48020,"line_start":854,"line_end":854,"column_start":1,"column_end":47}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":48021,"byte_end":48059,"line_start":855,"line_end":855,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":772},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":49175,"byte_end":49183,"line_start":900,"line_end":900,"column_start":12,"column_end":20},"name":"IntoKeys","qualname":"::map::IntoKeys","value":"IntoKeys {  }","parent":null,"children":[{"krate":0,"index":775}],"decl_id":null,"docs":" An owning iterator over the keys of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the keys of a `IndexMap`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":48896,"byte_end":48949,"line_start":893,"line_end":893,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":48950,"byte_end":48953,"line_start":894,"line_end":894,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_keys`] method on [`IndexMap`].","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":48954,"byte_end":49027,"line_start":895,"line_end":895,"column_start":1,"column_end":74}},{"value":"/ See its documentation for more.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":49028,"byte_end":49063,"line_start":896,"line_end":896,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":49064,"byte_end":49067,"line_start":897,"line_end":897,"column_start":1,"column_end":4}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":49068,"byte_end":49106,"line_start":898,"line_end":898,"column_start":1,"column_end":39}},{"value":"/ [`into_keys`]: struct.IndexMap.html#method.into_keys","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":49107,"byte_end":49163,"line_start":899,"line_end":899,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":794},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":50105,"byte_end":50111,"line_start":936,"line_end":936,"column_start":12,"column_end":18},"name":"Values","qualname":"::map::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":798}],"decl_id":null,"docs":" An iterator over the values of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An iterator over the values of a `IndexMap`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":49840,"byte_end":49888,"line_start":929,"line_end":929,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":49889,"byte_end":49892,"line_start":930,"line_end":930,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values`] method on [`IndexMap`]. See its","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":49893,"byte_end":49971,"line_start":931,"line_end":931,"column_start":1,"column_end":79}},{"value":"/ documentation for more.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":49972,"byte_end":49999,"line_start":932,"line_end":932,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":50000,"byte_end":50003,"line_start":933,"line_end":933,"column_start":1,"column_end":4}},{"value":"/ [`values`]: struct.IndexMap.html#method.values","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":50004,"byte_end":50054,"line_start":934,"line_end":934,"column_start":1,"column_end":51}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":50055,"byte_end":50093,"line_start":935,"line_end":935,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":822},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":51223,"byte_end":51232,"line_start":980,"line_end":980,"column_start":12,"column_end":21},"name":"ValuesMut","qualname":"::map::ValuesMut","value":"ValuesMut {  }","parent":null,"children":[{"krate":0,"index":826}],"decl_id":null,"docs":" A mutable iterator over the values of a `IndexMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the values of a `IndexMap`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":50939,"byte_end":50994,"line_start":973,"line_end":973,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":50995,"byte_end":50998,"line_start":974,"line_end":974,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values_mut`] method on [`IndexMap`]. See its","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":50999,"byte_end":51081,"line_start":975,"line_end":975,"column_start":1,"column_end":83}},{"value":"/ documentation for more.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":51082,"byte_end":51109,"line_start":976,"line_end":976,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":51110,"byte_end":51113,"line_start":977,"line_end":977,"column_start":1,"column_end":4}},{"value":"/ [`values_mut`]: struct.IndexMap.html#method.values_mut","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":51114,"byte_end":51172,"line_start":978,"line_end":978,"column_start":1,"column_end":59}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":51173,"byte_end":51211,"line_start":979,"line_end":979,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":842},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":52076,"byte_end":52086,"line_start":1011,"line_end":1011,"column_start":12,"column_end":22},"name":"IntoValues","qualname":"::map::IntoValues","value":"IntoValues {  }","parent":null,"children":[{"krate":0,"index":845}],"decl_id":null,"docs":" An owning iterator over the values of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the values of a `IndexMap`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":51789,"byte_end":51844,"line_start":1004,"line_end":1004,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":51845,"byte_end":51848,"line_start":1005,"line_end":1005,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_values`] method on [`IndexMap`].","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":51849,"byte_end":51924,"line_start":1006,"line_end":1006,"column_start":1,"column_end":76}},{"value":"/ See its documentation for more.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":51925,"byte_end":51960,"line_start":1007,"line_end":1007,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":51961,"byte_end":51964,"line_start":1008,"line_end":1008,"column_start":1,"column_end":4}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":51965,"byte_end":52003,"line_start":1009,"line_end":1009,"column_start":1,"column_end":39}},{"value":"/ [`into_values`]: struct.IndexMap.html#method.into_values","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":52004,"byte_end":52064,"line_start":1010,"line_end":1010,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":864},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":53019,"byte_end":53023,"line_start":1047,"line_end":1047,"column_start":12,"column_end":16},"name":"Iter","qualname":"::map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":868}],"decl_id":null,"docs":" An iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An iterator over the entries of a `IndexMap`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":52759,"byte_end":52808,"line_start":1040,"line_end":1040,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":52809,"byte_end":52812,"line_start":1041,"line_end":1041,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`IndexMap`]. See its","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":52813,"byte_end":52889,"line_start":1042,"line_end":1042,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":52890,"byte_end":52917,"line_start":1043,"line_end":1043,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":52918,"byte_end":52921,"line_start":1044,"line_end":1044,"column_start":1,"column_end":4}},{"value":"/ [`iter`]: struct.IndexMap.html#method.iter","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":52922,"byte_end":52968,"line_start":1045,"line_end":1045,"column_start":1,"column_end":47}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":52969,"byte_end":53007,"line_start":1046,"line_end":1046,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":892},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":54127,"byte_end":54134,"line_start":1091,"line_end":1091,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":896}],"decl_id":null,"docs":" A mutable iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the entries of a `IndexMap`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":53848,"byte_end":53904,"line_start":1084,"line_end":1084,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":53905,"byte_end":53908,"line_start":1085,"line_end":1085,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter_mut`] method on [`IndexMap`]. See its","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":53909,"byte_end":53989,"line_start":1086,"line_end":1086,"column_start":1,"column_end":81}},{"value":"/ documentation for more.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":53990,"byte_end":54017,"line_start":1087,"line_end":1087,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":54018,"byte_end":54021,"line_start":1088,"line_end":1088,"column_start":1,"column_end":4}},{"value":"/ [`iter_mut`]: struct.IndexMap.html#method.iter_mut","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":54022,"byte_end":54076,"line_start":1089,"line_end":1089,"column_start":1,"column_end":55}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":54077,"byte_end":54115,"line_start":1090,"line_end":1090,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":912},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":55007,"byte_end":55015,"line_start":1122,"line_end":1122,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":915}],"decl_id":null,"docs":" An owning iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the entries of a `IndexMap`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":54686,"byte_end":54742,"line_start":1115,"line_end":1115,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":54743,"byte_end":54746,"line_start":1116,"line_end":1116,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`IndexMap`]","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":54747,"byte_end":54819,"line_start":1117,"line_end":1117,"column_start":1,"column_end":73}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":54820,"byte_end":54895,"line_start":1118,"line_end":1118,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":54896,"byte_end":54899,"line_start":1119,"line_end":1119,"column_start":1,"column_end":4}},{"value":"/ [`into_iter`]: struct.IndexMap.html#method.into_iter","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":54900,"byte_end":54956,"line_start":1120,"line_end":1120,"column_start":1,"column_end":57}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":54957,"byte_end":54995,"line_start":1121,"line_end":1121,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":934},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":55980,"byte_end":55985,"line_start":1158,"line_end":1158,"column_start":12,"column_end":17},"name":"Drain","qualname":"::map::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":938}],"decl_id":null,"docs":" A draining iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ A draining iterator over the entries of a `IndexMap`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":55709,"byte_end":55766,"line_start":1151,"line_end":1151,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":55767,"byte_end":55770,"line_start":1152,"line_end":1152,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`IndexMap`]. See its","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":55771,"byte_end":55848,"line_start":1153,"line_end":1153,"column_start":1,"column_end":78}},{"value":"/ documentation for more.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":55849,"byte_end":55876,"line_start":1154,"line_end":1154,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":55877,"byte_end":55880,"line_start":1155,"line_end":1155,"column_start":1,"column_end":4}},{"value":"/ [`drain`]: struct.IndexMap.html#method.drain","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":55881,"byte_end":55929,"line_start":1156,"line_end":1156,"column_start":1,"column_end":49}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":55930,"byte_end":55968,"line_start":1157,"line_end":1157,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":1050},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"set","qualname":"::set","value":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","parent":null,"children":[{"krate":0,"index":1051},{"krate":0,"index":1054},{"krate":0,"index":1055},{"krate":0,"index":1058},{"krate":0,"index":1061},{"krate":0,"index":1064},{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":1071},{"krate":0,"index":1072},{"krate":0,"index":1074},{"krate":0,"index":1075},{"krate":0,"index":1078},{"krate":0,"index":1081},{"krate":0,"index":1084},{"krate":0,"index":1085},{"krate":0,"index":1088},{"krate":0,"index":1091},{"krate":0,"index":1094},{"krate":0,"index":1097},{"krate":0,"index":1100},{"krate":0,"index":1103},{"krate":0,"index":1106},{"krate":0,"index":1107},{"krate":0,"index":1110},{"krate":0,"index":1113},{"krate":0,"index":1116},{"krate":0,"index":1118},{"krate":0,"index":1122},{"krate":0,"index":1127},{"krate":0,"index":1136},{"krate":0,"index":1140},{"krate":0,"index":1144},{"krate":0,"index":1159},{"krate":0,"index":1232},{"krate":0,"index":1243},{"krate":0,"index":1248},{"krate":0,"index":1251},{"krate":0,"index":1254},{"krate":0,"index":1256},{"krate":0,"index":1259},{"krate":0,"index":1261},{"krate":0,"index":1264},{"krate":0,"index":1268},{"krate":0,"index":1272},{"krate":0,"index":1274},{"krate":0,"index":1277},{"krate":0,"index":1279},{"krate":0,"index":1282},{"krate":0,"index":1285},{"krate":0,"index":1289},{"krate":0,"index":1292},{"krate":0,"index":1294},{"krate":0,"index":1297},{"krate":0,"index":1299},{"krate":0,"index":1302},{"krate":0,"index":1309},{"krate":0,"index":1315},{"krate":0,"index":1321},{"krate":0,"index":1327},{"krate":0,"index":1333},{"krate":0,"index":1339},{"krate":0,"index":1343},{"krate":0,"index":1348},{"krate":0,"index":1351},{"krate":0,"index":1363},{"krate":0,"index":1369},{"krate":0,"index":1376},{"krate":0,"index":1380},{"krate":0,"index":1383},{"krate":0,"index":1387},{"krate":0,"index":1391},{"krate":0,"index":1397},{"krate":0,"index":1404},{"krate":0,"index":1408},{"krate":0,"index":1411},{"krate":0,"index":1415},{"krate":0,"index":1419},{"krate":0,"index":1425},{"krate":0,"index":1436},{"krate":0,"index":1444},{"krate":0,"index":1448},{"krate":0,"index":1453},{"krate":0,"index":1458},{"krate":0,"index":1463},{"krate":0,"index":1473},{"krate":0,"index":1480},{"krate":0,"index":1483},{"krate":0,"index":1487},{"krate":0,"index":1491},{"krate":0,"index":1497},{"krate":0,"index":1503},{"krate":0,"index":1509}],"decl_id":null,"docs":" A hash set implemented using `IndexMap`\n","sig":null,"attributes":[{"value":"/ A hash set implemented using `IndexMap`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":106199,"byte_end":106242,"line_start":1,"line_end":1,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":1118},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":108303,"byte_end":108311,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"IndexSet","qualname":"::set::IndexSet","value":"IndexSet {  }","parent":null,"children":[{"krate":0,"index":1121}],"decl_id":null,"docs":" A hash set where the iteration order of the values is independent of their\n hash values.","sig":null,"attributes":[{"value":"/ A hash set where the iteration order of the values is independent of their","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":106697,"byte_end":106775,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ hash values.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":106776,"byte_end":106792,"line_start":22,"line_end":22,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":106793,"byte_end":106796,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The interface is closely compatible with the standard `HashSet`, but also","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":106797,"byte_end":106874,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ has additional features.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":106875,"byte_end":106903,"line_start":25,"line_end":25,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":106904,"byte_end":106907,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Order","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":106908,"byte_end":106919,"line_start":27,"line_end":27,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":106920,"byte_end":106923,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ The values have a consistent order that is determined by the sequence of","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":106924,"byte_end":107000,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ insertion and removal calls on the set. The order does not depend on the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":107001,"byte_end":107077,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"/ values or the hash function at all. Note that insertion order and value","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":107078,"byte_end":107153,"line_start":31,"line_end":31,"column_start":1,"column_end":76}},{"value":"/ are not affected if a re-insertion is attempted once an element is","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":107154,"byte_end":107224,"line_start":32,"line_end":32,"column_start":1,"column_end":71}},{"value":"/ already present.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":107225,"byte_end":107245,"line_start":33,"line_end":33,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":107246,"byte_end":107249,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ All iterators traverse the set *in order*.  Set operation iterators like","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":107250,"byte_end":107326,"line_start":35,"line_end":35,"column_start":1,"column_end":77}},{"value":"/ `union` produce a concatenated order, as do their matching \"bitwise\"","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":107327,"byte_end":107399,"line_start":36,"line_end":36,"column_start":1,"column_end":73}},{"value":"/ operators.  See their documentation for specifics.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":107400,"byte_end":107454,"line_start":37,"line_end":37,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":107455,"byte_end":107458,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ The insertion order is preserved, with **notable exceptions** like the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":107459,"byte_end":107533,"line_start":39,"line_end":39,"column_start":1,"column_end":75}},{"value":"/ `.remove()` or `.swap_remove()` methods. Methods such as `.sort_by()` of","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":107534,"byte_end":107610,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/ course result in a new order, depending on the sorting order.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":107611,"byte_end":107676,"line_start":41,"line_end":41,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":107677,"byte_end":107680,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ # Indices","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":107681,"byte_end":107694,"line_start":43,"line_end":43,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":107695,"byte_end":107698,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ The values are indexed in a compact range without holes in the range","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":107699,"byte_end":107771,"line_start":45,"line_end":45,"column_start":1,"column_end":73}},{"value":"/ `0..self.len()`. For example, the method `.get_full` looks up the index for","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":107772,"byte_end":107851,"line_start":46,"line_end":46,"column_start":1,"column_end":80}},{"value":"/ a value, and the method `.get_index` looks up the value by index.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":107852,"byte_end":107921,"line_start":47,"line_end":47,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":107922,"byte_end":107925,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":107926,"byte_end":107940,"line_start":49,"line_end":49,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":107941,"byte_end":107944,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":107945,"byte_end":107952,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ use indexmap::IndexSet;","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":107953,"byte_end":107980,"line_start":52,"line_end":52,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":107981,"byte_end":107984,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ // Collects which letters appear in a sentence.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":107985,"byte_end":108036,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"/ let letters: IndexSet<_> = \"a short treatise on fungi\".chars().collect();","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":108037,"byte_end":108114,"line_start":55,"line_end":55,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":108115,"byte_end":108118,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ assert!(letters.contains(&'s'));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":108119,"byte_end":108155,"line_start":57,"line_end":57,"column_start":1,"column_end":37}},{"value":"/ assert!(letters.contains(&'t'));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":108156,"byte_end":108192,"line_start":58,"line_end":58,"column_start":1,"column_end":37}},{"value":"/ assert!(letters.contains(&'u'));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":108193,"byte_end":108229,"line_start":59,"line_end":59,"column_start":1,"column_end":37}},{"value":"/ assert!(!letters.contains(&'y'));","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":108230,"byte_end":108267,"line_start":60,"line_end":60,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":108268,"byte_end":108275,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"cfg(has_std)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":108276,"byte_end":108291,"line_start":62,"line_end":62,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1142},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":109755,"byte_end":109758,"line_start":130,"line_end":130,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexSet<T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set. (Does not allocate.)\n","sig":null,"attributes":[{"value":"/ Create a new set. (Does not allocate.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":109701,"byte_end":109743,"line_start":129,"line_end":129,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1143},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":109996,"byte_end":110009,"line_start":140,"line_end":140,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<IndexSet<T>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set with capacity for `n` elements.\n (Does not allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new set with capacity for `n` elements.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":109845,"byte_end":109897,"line_start":136,"line_end":136,"column_start":5,"column_end":57}},{"value":"/ (Does not allocate if `n` is zero.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":109902,"byte_end":109941,"line_start":137,"line_end":137,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":109946,"byte_end":109949,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":109954,"byte_end":109984,"line_start":139,"line_end":139,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1147},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":110296,"byte_end":110320,"line_start":152,"line_end":152,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<IndexSet<T, S>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set with capacity for `n` elements.\n (Does not allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new set with capacity for `n` elements.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":110145,"byte_end":110197,"line_start":148,"line_end":148,"column_start":5,"column_end":57}},{"value":"/ (Does not allocate if `n` is zero.)","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":110202,"byte_end":110241,"line_start":149,"line_end":149,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":110246,"byte_end":110249,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":110254,"byte_end":110284,"line_start":151,"line_end":151,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1148},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":110619,"byte_end":110630,"line_start":162,"line_end":162,"column_start":18,"column_end":29},"name":"with_hasher","qualname":"<IndexSet<T, S>>::with_hasher","value":"pub const fn with_hasher(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set with `hash_builder`.","sig":null,"attributes":[{"value":"/ Create a new set with `hash_builder`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":110468,"byte_end":110509,"line_start":158,"line_end":158,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":110514,"byte_end":110517,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ This function is `const`, so it","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":110522,"byte_end":110557,"line_start":160,"line_end":160,"column_start":5,"column_end":40}},{"value":"/ can be called in `static` contexts.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":110562,"byte_end":110601,"line_start":161,"line_end":161,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1149},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":110794,"byte_end":110802,"line_start":169,"line_end":169,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexSet<T, S>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time.\n","sig":null,"attributes":[{"value":"/ Computes in **O(1)** time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":110752,"byte_end":110782,"line_start":168,"line_end":168,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1150},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":110922,"byte_end":110928,"line_start":174,"line_end":174,"column_start":12,"column_end":18},"name":"hasher","qualname":"<IndexSet<T, S>>::hasher","value":"pub fn hasher(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the set's `BuildHasher`.\n","sig":null,"attributes":[{"value":"/ Return a reference to the set's `BuildHasher`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":110860,"byte_end":110910,"line_start":173,"line_end":173,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1151},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":111081,"byte_end":111084,"line_start":181,"line_end":181,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexSet<T, S>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of elements in the set.","sig":null,"attributes":[{"value":"/ Return the number of elements in the set.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":110981,"byte_end":111026,"line_start":178,"line_end":178,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":111031,"byte_end":111034,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":111039,"byte_end":111069,"line_start":180,"line_end":180,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1152},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":111241,"byte_end":111249,"line_start":188,"line_end":188,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexSet<T, S>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the set contains no elements.","sig":null,"attributes":[{"value":"/ Returns true if the set contains no elements.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":111137,"byte_end":111186,"line_start":185,"line_end":185,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":111191,"byte_end":111194,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":111199,"byte_end":111229,"line_start":187,"line_end":187,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1153},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":111383,"byte_end":111387,"line_start":193,"line_end":193,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexSet<T, S>>::iter","value":"pub fn iter(&Self) -> Iter<, T>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the set, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the values of the set, in their order","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":111306,"byte_end":111371,"line_start":192,"line_end":192,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1154},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":111609,"byte_end":111614,"line_start":202,"line_end":202,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexSet<T, S>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all elements in the set, while preserving its capacity.","sig":null,"attributes":[{"value":"/ Remove all elements in the set, while preserving its capacity.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":111488,"byte_end":111554,"line_start":199,"line_end":199,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":111559,"byte_end":111562,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":111567,"byte_end":111597,"line_start":201,"line_end":201,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1155},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":111841,"byte_end":111849,"line_start":209,"line_end":209,"column_start":12,"column_end":20},"name":"truncate","qualname":"<IndexSet<T, S>>::truncate","value":"pub fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shortens the set, keeping the first `len` elements and dropping the rest.","sig":null,"attributes":[{"value":"/ Shortens the set, keeping the first `len` elements and dropping the rest.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":111665,"byte_end":111742,"line_start":206,"line_end":206,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":111747,"byte_end":111750,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ If `len` is greater than the set's current length, this has no effect.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":111755,"byte_end":111829,"line_start":208,"line_end":208,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1156},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":112591,"byte_end":112596,"line_start":226,"line_end":226,"column_start":12,"column_end":17},"name":"drain","qualname":"<IndexSet<T, S>>::drain","value":"pub fn drain<R>(&mut Self, R) -> Drain<, T> where R: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Clears the `IndexSet` in the given index range, returning those values\n as a drain iterator.","sig":null,"attributes":[{"value":"/ Clears the `IndexSet` in the given index range, returning those values","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":111918,"byte_end":111992,"line_start":213,"line_end":213,"column_start":5,"column_end":79}},{"value":"/ as a drain iterator.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":111997,"byte_end":112021,"line_start":214,"line_end":214,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":112026,"byte_end":112029,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ The range may be any type that implements `RangeBounds<usize>`,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":112034,"byte_end":112101,"line_start":216,"line_end":216,"column_start":5,"column_end":72}},{"value":"/ including all of the `std::ops::Range*` types, or even a tuple pair of","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":112106,"byte_end":112180,"line_start":217,"line_end":217,"column_start":5,"column_end":79}},{"value":"/ `Bound` start and end values. To drain the set entirely, use `RangeFull`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":112185,"byte_end":112261,"line_start":218,"line_end":218,"column_start":5,"column_end":81}},{"value":"/ like `set.drain(..)`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":112266,"byte_end":112291,"line_start":219,"line_end":219,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":112296,"byte_end":112299,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ This shifts down all entries following the drained range to fill the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":112304,"byte_end":112376,"line_start":221,"line_end":221,"column_start":5,"column_end":77}},{"value":"/ gap, and keeps the allocated memory for reuse.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":112381,"byte_end":112431,"line_start":222,"line_end":222,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":112436,"byte_end":112439,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if the starting point is greater than the end point or if","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":112444,"byte_end":112518,"line_start":224,"line_end":224,"column_start":5,"column_end":79}},{"value":"/ the end point is greater than the length of the set.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":112523,"byte_end":112579,"line_start":225,"line_end":225,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1158},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":113107,"byte_end":113116,"line_start":242,"line_end":242,"column_start":12,"column_end":21},"name":"split_off","qualname":"<IndexSet<T, S>>::split_off","value":"pub fn split_off(&mut Self, usize) -> Self where S: Clone","parent":null,"children":[],"decl_id":null,"docs":" Splits the collection into two at the given index.","sig":null,"attributes":[{"value":"/ Splits the collection into two at the given index.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":112767,"byte_end":112821,"line_start":235,"line_end":235,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":112826,"byte_end":112829,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ Returns a newly allocated set containing the elements in the range","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":112834,"byte_end":112904,"line_start":237,"line_end":237,"column_start":5,"column_end":75}},{"value":"/ `[at, len)`. After the call, the original set will be left containing","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":112909,"byte_end":112982,"line_start":238,"line_end":238,"column_start":5,"column_end":78}},{"value":"/ the elements `[0, at)` with its previous capacity unchanged.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":112987,"byte_end":113051,"line_start":239,"line_end":239,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":113056,"byte_end":113059,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `at > len`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":113064,"byte_end":113095,"line_start":241,"line_end":241,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1162},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":113437,"byte_end":113444,"line_start":260,"line_end":260,"column_start":12,"column_end":19},"name":"reserve","qualname":"<IndexSet<T, S>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserve capacity for `additional` more values.","sig":null,"attributes":[{"value":"/ Reserve capacity for `additional` more values.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":113332,"byte_end":113382,"line_start":257,"line_end":257,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":113387,"byte_end":113390,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":113395,"byte_end":113425,"line_start":259,"line_end":259,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1163},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":113636,"byte_end":113649,"line_start":267,"line_end":267,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<IndexSet<T, S>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the capacity of the set as much as possible.","sig":null,"attributes":[{"value":"/ Shrink the capacity of the set as much as possible.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":113526,"byte_end":113581,"line_start":264,"line_end":264,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":113586,"byte_end":113589,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":113594,"byte_end":113624,"line_start":266,"line_end":266,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1164},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":114060,"byte_end":114066,"line_start":279,"line_end":279,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexSet<T, S>>::insert","value":"pub fn insert(&mut Self, T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Insert the value into the set.","sig":null,"attributes":[{"value":"/ Insert the value into the set.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":113708,"byte_end":113742,"line_start":271,"line_end":271,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":113747,"byte_end":113750,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ If an equivalent item already exists in the set, it returns","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":113755,"byte_end":113818,"line_start":273,"line_end":273,"column_start":5,"column_end":68}},{"value":"/ `false` leaving the original value in the set and without","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":113823,"byte_end":113884,"line_start":274,"line_end":274,"column_start":5,"column_end":66}},{"value":"/ altering its insertion order. Otherwise, it inserts the new","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":113889,"byte_end":113952,"line_start":275,"line_end":275,"column_start":5,"column_end":68}},{"value":"/ item and returns `true`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":113957,"byte_end":113985,"line_start":276,"line_end":276,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":113990,"byte_end":113993,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":113998,"byte_end":114048,"line_start":278,"line_end":278,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1165},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":114604,"byte_end":114615,"line_start":292,"line_end":292,"column_start":12,"column_end":23},"name":"insert_full","qualname":"<IndexSet<T, S>>::insert_full","value":"pub fn insert_full(&mut Self, T) -> (usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Insert the value into the set, and get its index.","sig":null,"attributes":[{"value":"/ Insert the value into the set, and get its index.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":114154,"byte_end":114207,"line_start":283,"line_end":283,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":114212,"byte_end":114215,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ If an equivalent item already exists in the set, it returns","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":114220,"byte_end":114283,"line_start":285,"line_end":285,"column_start":5,"column_end":68}},{"value":"/ the index of the existing item and `false`, leaving the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":114288,"byte_end":114347,"line_start":286,"line_end":286,"column_start":5,"column_end":64}},{"value":"/ original value in the set and without altering its insertion","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":114352,"byte_end":114416,"line_start":287,"line_end":287,"column_start":5,"column_end":69}},{"value":"/ order. Otherwise, it inserts the new item and returns the index","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":114421,"byte_end":114488,"line_start":288,"line_end":288,"column_start":5,"column_end":72}},{"value":"/ of the inserted item and `true`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":114493,"byte_end":114529,"line_start":289,"line_end":289,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":114534,"byte_end":114537,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":114542,"byte_end":114592,"line_start":291,"line_end":291,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1167},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":115105,"byte_end":115115,"line_start":308,"line_end":308,"column_start":12,"column_end":22},"name":"difference","qualname":"<IndexSet<T, S>>::difference","value":"pub fn difference<'a, S2>(&'a Self, &'a IndexSet<T, S2>) -> Difference where\nS2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values that are in `self` but not `other`.","sig":null,"attributes":[{"value":"/ Return an iterator over the values that are in `self` but not `other`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":114937,"byte_end":115011,"line_start":305,"line_end":305,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":115016,"byte_end":115019,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ Values are produced in the same order that they appear in `self`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":115024,"byte_end":115093,"line_start":307,"line_end":307,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1170},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":115564,"byte_end":115584,"line_start":323,"line_end":323,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<IndexSet<T, S>>::symmetric_difference","value":"pub fn symmetric_difference<'a, S2>(&'a Self, &'a IndexSet<T, S2>)\n-> SymmetricDifference where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values that are in `self` or `other`,\n but not in both.","sig":null,"attributes":[{"value":"/ Return an iterator over the values that are in `self` or `other`,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":115320,"byte_end":115389,"line_start":318,"line_end":318,"column_start":5,"column_end":74}},{"value":"/ but not in both.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":115394,"byte_end":115414,"line_start":319,"line_end":319,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":115419,"byte_end":115422,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ Values from `self` are produced in their original order, followed by","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":115427,"byte_end":115499,"line_start":321,"line_end":321,"column_start":5,"column_end":77}},{"value":"/ values from `other` in their original order.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":115504,"byte_end":115552,"line_start":322,"line_end":322,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1173},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":116024,"byte_end":116036,"line_start":338,"line_end":338,"column_start":12,"column_end":24},"name":"intersection","qualname":"<IndexSet<T, S>>::intersection","value":"pub fn intersection<'a, S2>(&'a Self, &'a IndexSet<T, S2>) -> Intersection\nwhere S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values that are in both `self` and `other`.","sig":null,"attributes":[{"value":"/ Return an iterator over the values that are in both `self` and `other`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":115855,"byte_end":115930,"line_start":335,"line_end":335,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":115935,"byte_end":115938,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ Values are produced in the same order that they appear in `self`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":115943,"byte_end":116012,"line_start":337,"line_end":337,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1176},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":116478,"byte_end":116483,"line_start":352,"line_end":352,"column_start":12,"column_end":17},"name":"union","qualname":"<IndexSet<T, S>>::union","value":"pub fn union<'a, S2>(&'a Self, &'a IndexSet<T, S2>) -> Union where\nS2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over all values that are in `self` or `other`.","sig":null,"attributes":[{"value":"/ Return an iterator over all values that are in `self` or `other`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":116245,"byte_end":116314,"line_start":348,"line_end":348,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":116319,"byte_end":116322,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ Values from `self` are produced in their original order, followed by","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":116327,"byte_end":116399,"line_start":350,"line_end":350,"column_start":5,"column_end":77}},{"value":"/ values that are unique to `other` in their original order.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":116404,"byte_end":116466,"line_start":351,"line_end":351,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1179},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":116817,"byte_end":116825,"line_start":364,"line_end":364,"column_start":12,"column_end":20},"name":"contains","qualname":"<IndexSet<T, S>>::contains","value":"pub fn contains<Q: ?Sized>(&Self, &Q) -> bool where Q: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if an equivalent to `value` exists in the set.","sig":null,"attributes":[{"value":"/ Return `true` if an equivalent to `value` exists in the set.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":116688,"byte_end":116752,"line_start":361,"line_end":361,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":116757,"byte_end":116760,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":116765,"byte_end":116805,"line_start":363,"line_end":363,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1181},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":117118,"byte_end":117121,"line_start":375,"line_end":375,"column_start":12,"column_end":15},"name":"get","qualname":"<IndexSet<T, S>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&T> where Q: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the value stored in the set, if it is present,\n else `None`.","sig":null,"attributes":[{"value":"/ Return a reference to the value stored in the set, if it is present,","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":116960,"byte_end":117032,"line_start":371,"line_end":371,"column_start":5,"column_end":77}},{"value":"/ else `None`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":117037,"byte_end":117053,"line_start":372,"line_end":372,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":117058,"byte_end":117061,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":117066,"byte_end":117106,"line_start":374,"line_end":374,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1184},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":117324,"byte_end":117332,"line_start":383,"line_end":383,"column_start":12,"column_end":20},"name":"get_full","qualname":"<IndexSet<T, S>>::get_full","value":"pub fn get_full<Q: ?Sized>(&Self, &Q) -> Option<(usize, &T)> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return item index and value\n","sig":null,"attributes":[{"value":"/ Return item index and value","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":117281,"byte_end":117312,"line_start":382,"line_end":382,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1187},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":117562,"byte_end":117574,"line_start":391,"line_end":391,"column_start":12,"column_end":24},"name":"get_index_of","qualname":"<IndexSet<T, S>>::get_index_of","value":"pub fn get_index_of<Q: ?Sized>(&Self, &Q) -> Option<usize> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return item index, if it exists in the set\n","sig":null,"attributes":[{"value":"/ Return item index, if it exists in the set","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":117504,"byte_end":117550,"line_start":390,"line_end":390,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1189},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":117963,"byte_end":117970,"line_start":403,"line_end":403,"column_start":12,"column_end":19},"name":"replace","qualname":"<IndexSet<T, S>>::replace","value":"pub fn replace(&mut Self, T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set, replacing the existing value, if any, that is\n equal to the given one, without altering its insertion order. Returns\n the replaced value.","sig":null,"attributes":[{"value":"/ Adds a value to the set, replacing the existing value, if any, that is","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":117718,"byte_end":117792,"line_start":398,"line_end":398,"column_start":5,"column_end":79}},{"value":"/ equal to the given one, without altering its insertion order. Returns","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":117797,"byte_end":117870,"line_start":399,"line_end":399,"column_start":5,"column_end":78}},{"value":"/ the replaced value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":117875,"byte_end":117898,"line_start":400,"line_end":400,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":117903,"byte_end":117906,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":117911,"byte_end":117951,"line_start":402,"line_end":402,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1190},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":118324,"byte_end":118336,"line_start":412,"line_end":412,"column_start":12,"column_end":24},"name":"replace_full","qualname":"<IndexSet<T, S>>::replace_full","value":"pub fn replace_full(&mut Self, T) -> (usize, Option<T>)","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set, replacing the existing value, if any, that is\n equal to the given one, without altering its insertion order. Returns\n the index of the item and its replaced value.","sig":null,"attributes":[{"value":"/ Adds a value to the set, replacing the existing value, if any, that is","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":118053,"byte_end":118127,"line_start":407,"line_end":407,"column_start":5,"column_end":79}},{"value":"/ equal to the given one, without altering its insertion order. Returns","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":118132,"byte_end":118205,"line_start":408,"line_end":408,"column_start":5,"column_end":78}},{"value":"/ the index of the item and its replaced value.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":118210,"byte_end":118259,"line_start":409,"line_end":409,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":118264,"byte_end":118267,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":118272,"byte_end":118312,"line_start":411,"line_end":411,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1192},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":118982,"byte_end":118988,"line_start":431,"line_end":431,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexSet<T, S>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> bool where Q: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set, and return `true` if it was present.","sig":null,"attributes":[{"value":"/ Remove the value from the set, and return `true` if it was present.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":118679,"byte_end":118750,"line_start":425,"line_end":425,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":118755,"byte_end":118758,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove(value)`, if you want","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":118763,"byte_end":118833,"line_start":427,"line_end":427,"column_start":5,"column_end":75}},{"value":"/ to preserve the order of the values in the set, use `.shift_remove(value)`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":118838,"byte_end":118917,"line_start":428,"line_end":428,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":118922,"byte_end":118925,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":118930,"byte_end":118970,"line_start":430,"line_end":430,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1194},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":119534,"byte_end":119545,"line_start":447,"line_end":447,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<IndexSet<T, S>>::swap_remove","value":"pub fn swap_remove<Q: ?Sized>(&mut Self, &Q) -> bool where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set, and return `true` if it was present.","sig":null,"attributes":[{"value":"/ Remove the value from the set, and return `true` if it was present.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":119122,"byte_end":119193,"line_start":438,"line_end":438,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":119198,"byte_end":119201,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":119206,"byte_end":119279,"line_start":440,"line_end":440,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":119284,"byte_end":119347,"line_start":441,"line_end":441,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":119352,"byte_end":119407,"line_start":442,"line_end":442,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":119412,"byte_end":119415,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ Return `false` if `value` was not in the set.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":119420,"byte_end":119469,"line_start":444,"line_end":444,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":119474,"byte_end":119477,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":119482,"byte_end":119522,"line_start":446,"line_end":446,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1196},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":120099,"byte_end":120111,"line_start":463,"line_end":463,"column_start":12,"column_end":24},"name":"shift_remove","qualname":"<IndexSet<T, S>>::shift_remove","value":"pub fn shift_remove<Q: ?Sized>(&mut Self, &Q) -> bool where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set, and return `true` if it was present.","sig":null,"attributes":[{"value":"/ Remove the value from the set, and return `true` if it was present.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":119693,"byte_end":119764,"line_start":454,"line_end":454,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":119769,"byte_end":119772,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":119777,"byte_end":119844,"line_start":456,"line_end":456,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":119849,"byte_end":119910,"line_start":457,"line_end":457,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":119915,"byte_end":119972,"line_start":458,"line_end":458,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":119977,"byte_end":119980,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ Return `false` if `value` was not in the set.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":119985,"byte_end":120034,"line_start":460,"line_end":460,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":120039,"byte_end":120042,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":120047,"byte_end":120087,"line_start":462,"line_end":462,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1198},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":120597,"byte_end":120601,"line_start":478,"line_end":478,"column_start":12,"column_end":16},"name":"take","qualname":"<IndexSet<T, S>>::take","value":"pub fn take<Q: ?Sized>(&mut Self, &Q) -> Option<T> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the\n given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":120260,"byte_end":120334,"line_start":470,"line_end":470,"column_start":5,"column_end":79}},{"value":"/ given one.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":120339,"byte_end":120353,"line_start":471,"line_end":471,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":120358,"byte_end":120361,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_take(value)`, if you need to","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":120366,"byte_end":120437,"line_start":473,"line_end":473,"column_start":5,"column_end":76}},{"value":"/ preserve the order of the values in the set, use `.shift_take(value)`","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":120442,"byte_end":120515,"line_start":474,"line_end":474,"column_start":5,"column_end":78}},{"value":"/ instead.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":120520,"byte_end":120532,"line_start":475,"line_end":475,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":120537,"byte_end":120540,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":120545,"byte_end":120585,"line_start":477,"line_end":477,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1200},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":121171,"byte_end":121180,"line_start":495,"line_end":495,"column_start":12,"column_end":21},"name":"swap_take","qualname":"<IndexSet<T, S>>::swap_take","value":"pub fn swap_take<Q: ?Sized>(&mut Self, &Q) -> Option<T> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the\n given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":120738,"byte_end":120812,"line_start":485,"line_end":485,"column_start":5,"column_end":79}},{"value":"/ given one.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":120817,"byte_end":120831,"line_start":486,"line_end":486,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":120836,"byte_end":120839,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":120844,"byte_end":120917,"line_start":488,"line_end":488,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":120922,"byte_end":120985,"line_start":489,"line_end":489,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":120990,"byte_end":121045,"line_start":490,"line_end":490,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":121050,"byte_end":121053,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":121058,"byte_end":121106,"line_start":492,"line_end":492,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":121111,"byte_end":121114,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":121119,"byte_end":121159,"line_start":494,"line_end":494,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1203},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":121773,"byte_end":121783,"line_start":512,"line_end":512,"column_start":12,"column_end":22},"name":"shift_take","qualname":"<IndexSet<T, S>>::shift_take","value":"pub fn shift_take<Q: ?Sized>(&mut Self, &Q) -> Option<T> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the\n given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":121346,"byte_end":121420,"line_start":502,"line_end":502,"column_start":5,"column_end":79}},{"value":"/ given one.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":121425,"byte_end":121439,"line_start":503,"line_end":503,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":121444,"byte_end":121447,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":121452,"byte_end":121519,"line_start":505,"line_end":505,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":121524,"byte_end":121585,"line_start":506,"line_end":506,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":121590,"byte_end":121647,"line_start":507,"line_end":507,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":121652,"byte_end":121655,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":121660,"byte_end":121708,"line_start":509,"line_end":509,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":121713,"byte_end":121716,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":121721,"byte_end":121761,"line_start":511,"line_end":511,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1206},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":122302,"byte_end":122318,"line_start":526,"line_end":526,"column_start":12,"column_end":28},"name":"swap_remove_full","qualname":"<IndexSet<T, S>>::swap_remove_full","value":"pub fn swap_remove_full<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, T)> where\nQ: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set return it and the index it had.","sig":null,"attributes":[{"value":"/ Remove the value from the set return it and the index it had.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":121950,"byte_end":122015,"line_start":519,"line_end":519,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":122020,"byte_end":122023,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":122028,"byte_end":122101,"line_start":521,"line_end":521,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":122106,"byte_end":122169,"line_start":522,"line_end":522,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":122174,"byte_end":122229,"line_start":523,"line_end":523,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":122234,"byte_end":122237,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":122242,"byte_end":122290,"line_start":525,"line_end":525,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1209},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":122846,"byte_end":122863,"line_start":540,"line_end":540,"column_start":12,"column_end":29},"name":"shift_remove_full","qualname":"<IndexSet<T, S>>::shift_remove_full","value":"pub fn shift_remove_full<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, T)> where\nQ: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set return it and the index it had.","sig":null,"attributes":[{"value":"/ Remove the value from the set return it and the index it had.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":122500,"byte_end":122565,"line_start":533,"line_end":533,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":122570,"byte_end":122573,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":122578,"byte_end":122645,"line_start":535,"line_end":535,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":122650,"byte_end":122711,"line_start":536,"line_end":536,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":122716,"byte_end":122773,"line_start":537,"line_end":537,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":122778,"byte_end":122781,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":122786,"byte_end":122834,"line_start":539,"line_end":539,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1212},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":123204,"byte_end":123207,"line_start":552,"line_end":552,"column_start":12,"column_end":15},"name":"pop","qualname":"<IndexSet<T, S>>::pop","value":"pub fn pop(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the last value","sig":null,"attributes":[{"value":"/ Remove the last value","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":123046,"byte_end":123071,"line_start":547,"line_end":547,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":123076,"byte_end":123079,"line_start":548,"line_end":548,"column_start":5,"column_end":8}},{"value":"/ This preserves the order of the remaining elements.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":123084,"byte_end":123139,"line_start":549,"line_end":549,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":123144,"byte_end":123147,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":123152,"byte_end":123192,"line_start":551,"line_end":551,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1214},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":123552,"byte_end":123558,"line_start":563,"line_end":563,"column_start":12,"column_end":18},"name":"retain","qualname":"<IndexSet<T, S>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Scan through each value in the set and keep those where the\n closure `keep` returns `true`.","sig":null,"attributes":[{"value":"/ Scan through each value in the set and keep those where the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":123285,"byte_end":123348,"line_start":556,"line_end":556,"column_start":5,"column_end":68}},{"value":"/ closure `keep` returns `true`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":123353,"byte_end":123387,"line_start":557,"line_end":557,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":123392,"byte_end":123395,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ The elements are visited in order, and remaining elements keep their","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":123400,"byte_end":123472,"line_start":559,"line_end":559,"column_start":5,"column_end":77}},{"value":"/ order.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":123477,"byte_end":123487,"line_start":560,"line_end":560,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":123492,"byte_end":123495,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":123500,"byte_end":123540,"line_start":562,"line_end":562,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1217},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":123820,"byte_end":123824,"line_start":573,"line_end":573,"column_start":12,"column_end":16},"name":"sort","qualname":"<IndexSet<T, S>>::sort","value":"pub fn sort(&mut Self) where T: Ord","parent":null,"children":[],"decl_id":null,"docs":" Sort the set’s values by their default ordering.","sig":null,"attributes":[{"value":"/ Sort the set’s values by their default ordering.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":123694,"byte_end":123748,"line_start":570,"line_end":570,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":123753,"byte_end":123756,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ See [`sort_by`](Self::sort_by) for details.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":123761,"byte_end":123808,"line_start":572,"line_end":572,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1218},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":124081,"byte_end":124088,"line_start":583,"line_end":583,"column_start":12,"column_end":19},"name":"sort_by","qualname":"<IndexSet<T, S>>::sort_by","value":"pub fn sort_by<F>(&mut Self, F) where F: FnMut(&T, &T) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the set’s values in place using the comparison function `cmp`.","sig":null,"attributes":[{"value":"/ Sort the set’s values in place using the comparison function `cmp`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":123908,"byte_end":123981,"line_start":580,"line_end":580,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":123986,"byte_end":123989,"line_start":581,"line_end":581,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n log n)** time and **O(n)** space. The sort is stable.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":123994,"byte_end":124069,"line_start":582,"line_end":582,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1221},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":124383,"byte_end":124392,"line_start":594,"line_end":594,"column_start":12,"column_end":21},"name":"sorted_by","qualname":"<IndexSet<T, S>>::sorted_by","value":"pub fn sorted_by<F>(Self, F) -> IntoIter<T> where F: FnMut(&T, &T) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the values of the set and return a by-value iterator of\n the values with the result.","sig":null,"attributes":[{"value":"/ Sort the values of the set and return a by-value iterator of","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":124235,"byte_end":124299,"line_start":590,"line_end":590,"column_start":5,"column_end":69}},{"value":"/ the values with the result.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":124304,"byte_end":124335,"line_start":591,"line_end":591,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":124340,"byte_end":124343,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ The sort is stable.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":124348,"byte_end":124371,"line_start":593,"line_end":593,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1224},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":124737,"byte_end":124750,"line_start":606,"line_end":606,"column_start":12,"column_end":25},"name":"sort_unstable","qualname":"<IndexSet<T, S>>::sort_unstable","value":"pub fn sort_unstable(&mut Self) where T: Ord","parent":null,"children":[],"decl_id":null,"docs":" Sort the set's values by their default ordering.","sig":null,"attributes":[{"value":"/ Sort the set's values by their default ordering.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":124595,"byte_end":124647,"line_start":603,"line_end":603,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":124652,"byte_end":124655,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ See [`sort_unstable_by`](Self::sort_unstable_by) for details.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":124660,"byte_end":124725,"line_start":605,"line_end":605,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1225},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":124996,"byte_end":125012,"line_start":616,"line_end":616,"column_start":12,"column_end":28},"name":"sort_unstable_by","qualname":"<IndexSet<T, S>>::sort_unstable_by","value":"pub fn sort_unstable_by<F>(&mut Self, F) where F: FnMut(&T, &T) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the set's values in place using the comparison funtion `cmp`.","sig":null,"attributes":[{"value":"/ Sort the set's values in place using the comparison funtion `cmp`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":124843,"byte_end":124913,"line_start":613,"line_end":613,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":124918,"byte_end":124921,"line_start":614,"line_end":614,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n log n)** time. The sort is unstable.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":124926,"byte_end":124984,"line_start":615,"line_end":615,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1228},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":125279,"byte_end":125297,"line_start":625,"line_end":625,"column_start":12,"column_end":30},"name":"sorted_unstable_by","qualname":"<IndexSet<T, S>>::sorted_unstable_by","value":"pub fn sorted_unstable_by<F>(Self, F) -> IntoIter<T> where F: FnMut(&T, &T) ->\nOrdering","parent":null,"children":[],"decl_id":null,"docs":" Sort the values of the set and return a by-value iterator of\n the values with the result.\n","sig":null,"attributes":[{"value":"/ Sort the values of the set and return a by-value iterator of","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":125167,"byte_end":125231,"line_start":623,"line_end":623,"column_start":5,"column_end":69}},{"value":"/ the values with the result.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":125236,"byte_end":125267,"line_start":624,"line_end":624,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1231},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":125688,"byte_end":125695,"line_start":640,"line_end":640,"column_start":12,"column_end":19},"name":"reverse","qualname":"<IndexSet<T, S>>::reverse","value":"pub fn reverse(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reverses the order of the set’s values in place.","sig":null,"attributes":[{"value":"/ Reverses the order of the set’s values in place.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":125560,"byte_end":125614,"line_start":637,"line_end":637,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":125619,"byte_end":125622,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time and **O(1)** space.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":125627,"byte_end":125676,"line_start":639,"line_end":639,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1235},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":125916,"byte_end":125925,"line_start":651,"line_end":651,"column_start":12,"column_end":21},"name":"get_index","qualname":"<IndexSet<T, S>>::get_index","value":"pub fn get_index(&Self, usize) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get a value by index","sig":null,"attributes":[{"value":"/ Get a value by index","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":125777,"byte_end":125801,"line_start":646,"line_end":646,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":125806,"byte_end":125809,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":125814,"byte_end":125861,"line_start":648,"line_end":648,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":125866,"byte_end":125869,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":125874,"byte_end":125904,"line_start":650,"line_end":650,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1236},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":126110,"byte_end":126115,"line_start":658,"line_end":658,"column_start":12,"column_end":17},"name":"first","qualname":"<IndexSet<T, S>>::first","value":"pub fn first(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get the first value","sig":null,"attributes":[{"value":"/ Get the first value","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":126032,"byte_end":126055,"line_start":655,"line_end":655,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":126060,"byte_end":126063,"line_start":656,"line_end":656,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":126068,"byte_end":126098,"line_start":657,"line_end":657,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1237},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":126282,"byte_end":126286,"line_start":665,"line_end":665,"column_start":12,"column_end":16},"name":"last","qualname":"<IndexSet<T, S>>::last","value":"pub fn last(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get the last value","sig":null,"attributes":[{"value":"/ Get the last value","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":126205,"byte_end":126227,"line_start":662,"line_end":662,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":126232,"byte_end":126235,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":126240,"byte_end":126270,"line_start":664,"line_end":664,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1238},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":126743,"byte_end":126760,"line_start":678,"line_end":678,"column_start":12,"column_end":29},"name":"swap_remove_index","qualname":"<IndexSet<T, S>>::swap_remove_index","value":"pub fn swap_remove_index(&mut Self, usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value by index","sig":null,"attributes":[{"value":"/ Remove the value by index","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":126375,"byte_end":126404,"line_start":669,"line_end":669,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":126409,"byte_end":126412,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":126417,"byte_end":126464,"line_start":671,"line_end":671,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":126469,"byte_end":126472,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":126477,"byte_end":126550,"line_start":673,"line_end":673,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":126555,"byte_end":126618,"line_start":674,"line_end":674,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":126623,"byte_end":126678,"line_start":675,"line_end":675,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":126683,"byte_end":126686,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":126691,"byte_end":126731,"line_start":677,"line_end":677,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1240},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":127233,"byte_end":127251,"line_start":691,"line_end":691,"column_start":12,"column_end":30},"name":"shift_remove_index","qualname":"<IndexSet<T, S>>::shift_remove_index","value":"pub fn shift_remove_index(&mut Self, usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value by index","sig":null,"attributes":[{"value":"/ Remove the value by index","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":126871,"byte_end":126900,"line_start":682,"line_end":682,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":126905,"byte_end":126908,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":126913,"byte_end":126960,"line_start":684,"line_end":684,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":126965,"byte_end":126968,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":126973,"byte_end":127040,"line_start":686,"line_end":686,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":127045,"byte_end":127106,"line_start":687,"line_end":687,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":127111,"byte_end":127168,"line_start":688,"line_end":688,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":127173,"byte_end":127176,"line_start":689,"line_end":689,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":127181,"byte_end":127221,"line_start":690,"line_end":690,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1242},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":127485,"byte_end":127497,"line_start":698,"line_end":698,"column_start":12,"column_end":24},"name":"swap_indices","qualname":"<IndexSet<T, S>>::swap_indices","value":"pub fn swap_indices(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swaps the position of two values in the set.","sig":null,"attributes":[{"value":"/ Swaps the position of two values in the set.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":127363,"byte_end":127411,"line_start":695,"line_end":695,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":127416,"byte_end":127419,"line_start":696,"line_end":696,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `a` or `b` are out of bounds.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":127424,"byte_end":127473,"line_start":697,"line_end":697,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":1248},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":128880,"byte_end":128888,"line_start":750,"line_end":750,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":1250}],"decl_id":null,"docs":" An owning iterator over the items of a `IndexSet`.","sig":null,"attributes":[{"value":"/ An owning iterator over the items of a `IndexSet`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":128561,"byte_end":128615,"line_start":743,"line_end":743,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":128616,"byte_end":128619,"line_start":744,"line_end":744,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`IndexSet`]","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":128620,"byte_end":128692,"line_start":745,"line_end":745,"column_start":1,"column_end":73}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":128693,"byte_end":128768,"line_start":746,"line_end":746,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":128769,"byte_end":128772,"line_start":747,"line_end":747,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":128773,"byte_end":128811,"line_start":748,"line_end":748,"column_start":1,"column_end":39}},{"value":"/ [`into_iter`]: struct.IndexSet.html#method.into_iter","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":128812,"byte_end":128868,"line_start":749,"line_end":749,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":1264},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":129767,"byte_end":129771,"line_start":786,"line_end":786,"column_start":12,"column_end":16},"name":"Iter","qualname":"::set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":1267}],"decl_id":null,"docs":" An iterator over the items of a `IndexSet`.","sig":null,"attributes":[{"value":"/ An iterator over the items of a `IndexSet`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":129509,"byte_end":129556,"line_start":779,"line_end":779,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":129557,"byte_end":129560,"line_start":780,"line_end":780,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`IndexSet`].","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":129561,"byte_end":129629,"line_start":781,"line_end":781,"column_start":1,"column_end":69}},{"value":"/ See its documentation for more.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":129630,"byte_end":129665,"line_start":782,"line_end":782,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":129666,"byte_end":129669,"line_start":783,"line_end":783,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":129670,"byte_end":129708,"line_start":784,"line_end":784,"column_start":1,"column_end":39}},{"value":"/ [`iter`]: struct.IndexSet.html#method.iter","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":129709,"byte_end":129755,"line_start":785,"line_end":785,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1285},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":130755,"byte_end":130760,"line_start":829,"line_end":829,"column_start":12,"column_end":17},"name":"Drain","qualname":"::set::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":1288}],"decl_id":null,"docs":" A draining iterator over the items of a `IndexSet`.","sig":null,"attributes":[{"value":"/ A draining iterator over the items of a `IndexSet`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":130486,"byte_end":130541,"line_start":822,"line_end":822,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":130542,"byte_end":130545,"line_start":823,"line_end":823,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`IndexSet`].","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":130546,"byte_end":130615,"line_start":824,"line_end":824,"column_start":1,"column_end":70}},{"value":"/ See its documentation for more.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":130616,"byte_end":130651,"line_start":825,"line_end":825,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":130652,"byte_end":130655,"line_start":826,"line_end":826,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":130656,"byte_end":130694,"line_start":827,"line_end":827,"column_start":1,"column_end":39}},{"value":"/ [`drain`]: struct.IndexSet.html#method.drain","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":130695,"byte_end":130743,"line_start":828,"line_end":828,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1354},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":133752,"byte_end":133763,"line_start":968,"line_end":968,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<IndexSet<T, S>>::is_disjoint","value":"pub fn is_disjoint<S2>(&Self, &IndexSet<T, S2>) -> bool where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if `self` has no elements in common with `other`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":133672,"byte_end":133740,"line_start":967,"line_end":967,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1358},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":134138,"byte_end":134147,"line_start":980,"line_end":980,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<IndexSet<T, S>>::is_subset","value":"pub fn is_subset<S2>(&Self, &IndexSet<T, S2>) -> bool where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all elements of `self` are contained in `other`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all elements of `self` are contained in `other`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":134056,"byte_end":134126,"line_start":979,"line_end":979,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1361},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":134415,"byte_end":134426,"line_start":988,"line_end":988,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<IndexSet<T, S>>::is_superset","value":"pub fn is_superset<S2>(&Self, &IndexSet<T, S2>) -> bool where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all elements of `other` are contained in `self`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all elements of `other` are contained in `self`.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":134333,"byte_end":134403,"line_start":987,"line_end":987,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":1363},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":134852,"byte_end":134862,"line_start":1003,"line_end":1003,"column_start":12,"column_end":22},"name":"Difference","qualname":"::set::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":1367},{"krate":0,"index":1368}],"decl_id":null,"docs":" A lazy iterator producing elements in the difference of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the difference of `IndexSet`s.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":134551,"byte_end":134623,"line_start":996,"line_end":996,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":134624,"byte_end":134627,"line_start":997,"line_end":997,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`difference`] method on [`IndexSet`].","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":134628,"byte_end":134702,"line_start":998,"line_end":998,"column_start":1,"column_end":75}},{"value":"/ See its documentation for more.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":134703,"byte_end":134738,"line_start":999,"line_end":999,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":134739,"byte_end":134742,"line_start":1000,"line_end":1000,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":134743,"byte_end":134781,"line_start":1001,"line_end":1001,"column_start":1,"column_end":39}},{"value":"/ [`difference`]: struct.IndexSet.html#method.difference","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":134782,"byte_end":134840,"line_start":1002,"line_end":1002,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":1391},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":136514,"byte_end":136526,"line_start":1077,"line_end":1077,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::set::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":1395},{"krate":0,"index":1396}],"decl_id":null,"docs":" A lazy iterator producing elements in the intersection of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the intersection of `IndexSet`s.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":136205,"byte_end":136279,"line_start":1070,"line_end":1070,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":136280,"byte_end":136283,"line_start":1071,"line_end":1071,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`intersection`] method on [`IndexSet`].","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":136284,"byte_end":136360,"line_start":1072,"line_end":1072,"column_start":1,"column_end":77}},{"value":"/ See its documentation for more.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":136361,"byte_end":136396,"line_start":1073,"line_end":1073,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":136397,"byte_end":136400,"line_start":1074,"line_end":1074,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":136401,"byte_end":136439,"line_start":1075,"line_end":1075,"column_start":1,"column_end":39}},{"value":"/ [`intersection`]: struct.IndexSet.html#method.intersection","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":136440,"byte_end":136502,"line_start":1076,"line_end":1076,"column_start":1,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":1419},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":138220,"byte_end":138239,"line_start":1151,"line_end":1151,"column_start":12,"column_end":31},"name":"SymmetricDifference","qualname":"::set::SymmetricDifference","value":"SymmetricDifference {  }","parent":null,"children":[{"krate":0,"index":1424}],"decl_id":null,"docs":" A lazy iterator producing elements in the symmetric difference of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the symmetric difference of `IndexSet`s.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":137879,"byte_end":137961,"line_start":1144,"line_end":1144,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":137962,"byte_end":137965,"line_start":1145,"line_end":1145,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`symmetric_difference`] method on","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":137966,"byte_end":138036,"line_start":1146,"line_end":1146,"column_start":1,"column_end":71}},{"value":"/ [`IndexSet`]. See its documentation for more.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":138037,"byte_end":138086,"line_start":1147,"line_end":1147,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":138087,"byte_end":138090,"line_start":1148,"line_end":1148,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":138091,"byte_end":138129,"line_start":1149,"line_end":1149,"column_start":1,"column_end":39}},{"value":"/ [`symmetric_difference`]: struct.IndexSet.html#method.symmetric_difference","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":138130,"byte_end":138208,"line_start":1150,"line_end":1150,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":1458},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":140036,"byte_end":140041,"line_start":1231,"line_end":1231,"column_start":12,"column_end":17},"name":"Union","qualname":"::set::Union","value":"Union {  }","parent":null,"children":[{"krate":0,"index":1462}],"decl_id":null,"docs":" A lazy iterator producing elements in the union of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the union of `IndexSet`s.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":139755,"byte_end":139822,"line_start":1224,"line_end":1224,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":139823,"byte_end":139826,"line_start":1225,"line_end":1225,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`union`] method on [`IndexSet`].","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":139827,"byte_end":139896,"line_start":1226,"line_end":1226,"column_start":1,"column_end":70}},{"value":"/ See its documentation for more.","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":139897,"byte_end":139932,"line_start":1227,"line_end":1227,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":139933,"byte_end":139936,"line_start":1228,"line_end":1228,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":139937,"byte_end":139975,"line_start":1229,"line_end":1229,"column_start":1,"column_end":39}},{"value":"/ [`union`]: struct.IndexSet.html#method.union","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":139976,"byte_end":140024,"line_start":1230,"line_end":1230,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":1544},"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":5215,"byte_end":5220,"line_start":186,"line_end":186,"column_start":10,"column_end":15},"name":"Entry","qualname":"::Entries::Entry","value":"type Entry;","parent":{"krate":0,"index":1543},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\equivalent.rs","byte_start":11208,"byte_end":11209,"line_start":18,"line_end":18,"column_start":46,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":28}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":13039,"byte_end":13047,"line_start":51,"line_end":51,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":61},{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde.rs","byte_start":13950,"byte_end":13958,"line_start":14,"line_end":14,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde.rs","byte_start":14292,"byte_end":14307,"line_start":30,"line_end":30,"column_start":37,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde.rs","byte_start":15029,"byte_end":15037,"line_start":58,"line_end":58,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde.rs","byte_start":15385,"byte_end":15393,"line_start":72,"line_end":72,"column_start":52,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde.rs","byte_start":15817,"byte_end":15825,"line_start":89,"line_end":89,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde.rs","byte_start":16134,"byte_end":16149,"line_start":104,"line_end":104,"column_start":34,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde.rs","byte_start":16827,"byte_end":16835,"line_start":131,"line_end":131,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde.rs","byte_start":17152,"byte_end":17160,"line_start":144,"line_end":144,"column_start":49,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":19248,"byte_end":19258,"line_start":61,"line_end":61,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":99778,"byte_end":99790,"line_start":13,"line_end":13,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":100090,"byte_end":100102,"line_start":21,"line_end":21,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":324},{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":103151,"byte_end":103164,"line_start":103,"line_end":103,"column_start":40,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":103279,"byte_end":103292,"line_start":106,"line_end":106,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":79354,"byte_end":79366,"line_start":58,"line_end":58,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":80052,"byte_end":80064,"line_start":81,"line_end":81,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":420}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":80383,"byte_end":80395,"line_start":94,"line_end":94,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":428}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":80898,"byte_end":80910,"line_start":121,"line_end":121,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":461},{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":92730,"byte_end":92735,"line_start":460,"line_end":460,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":480},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":95792,"byte_end":95797,"line_start":550,"line_end":550,"column_start":51,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":96201,"byte_end":96214,"line_start":562,"line_end":562,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":501}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":97775,"byte_end":97788,"line_start":605,"line_end":605,"column_start":51,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":98267,"byte_end":98278,"line_start":624,"line_end":624,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":98981,"byte_end":98992,"line_start":648,"line_end":648,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":24182,"byte_end":24190,"line_start":81,"line_end":81,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":617},{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":24588,"byte_end":24596,"line_start":100,"line_end":100,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":25120,"byte_end":25128,"line_start":126,"line_end":126,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":633}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":25590,"byte_end":25598,"line_start":144,"line_end":144,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":637},{"krate":0,"index":638}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":26024,"byte_end":26032,"line_start":161,"line_end":161,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":660}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":30715,"byte_end":30723,"line_start":319,"line_end":319,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":674},{"krate":0,"index":676},{"krate":0,"index":678},{"krate":0,"index":680},{"krate":0,"index":682},{"krate":0,"index":684},{"krate":0,"index":686},{"krate":0,"index":688},{"krate":0,"index":690},{"krate":0,"index":692},{"krate":0,"index":694},{"krate":0,"index":696},{"krate":0,"index":698},{"krate":0,"index":700},{"krate":0,"index":702},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":708},{"krate":0,"index":710},{"krate":0,"index":713},{"krate":0,"index":717},{"krate":0,"index":720},{"krate":0,"index":723},{"krate":0,"index":727},{"krate":0,"index":730}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":45179,"byte_end":45187,"line_start":768,"line_end":768,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":743}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":48169,"byte_end":48173,"line_start":860,"line_end":860,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":753},{"krate":0,"index":1550},{"krate":0,"index":1551},{"krate":0,"index":1552},{"krate":0,"index":1553},{"krate":0,"index":1554},{"krate":0,"index":1555}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":48288,"byte_end":48292,"line_start":866,"line_end":866,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1557},{"krate":0,"index":1558}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":48394,"byte_end":48398,"line_start":870,"line_end":870,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":760}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":48502,"byte_end":48506,"line_start":876,"line_end":876,"column_start":30,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":48597,"byte_end":48601,"line_start":879,"line_end":879,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":767}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":48753,"byte_end":48757,"line_start":887,"line_end":887,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":771}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":49258,"byte_end":49266,"line_start":904,"line_end":904,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":779},{"krate":0,"index":1559},{"krate":0,"index":1560},{"krate":0,"index":1561},{"krate":0,"index":1562},{"krate":0,"index":1563},{"krate":0,"index":1564}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":49369,"byte_end":49377,"line_start":910,"line_end":910,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1566},{"krate":0,"index":1567}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":49471,"byte_end":49479,"line_start":914,"line_end":914,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":786}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":49579,"byte_end":49587,"line_start":920,"line_end":920,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":49636,"byte_end":49644,"line_start":922,"line_end":922,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":793}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":50194,"byte_end":50200,"line_start":940,"line_end":940,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":803},{"krate":0,"index":1568},{"krate":0,"index":1569},{"krate":0,"index":1570},{"krate":0,"index":1571},{"krate":0,"index":1572},{"krate":0,"index":1573}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":50317,"byte_end":50323,"line_start":946,"line_end":946,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1575},{"krate":0,"index":1576}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":50427,"byte_end":50433,"line_start":950,"line_end":950,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":810}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":50537,"byte_end":50543,"line_start":956,"line_end":956,"column_start":30,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":50634,"byte_end":50640,"line_start":959,"line_end":959,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":817}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":50794,"byte_end":50800,"line_start":967,"line_end":967,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":821}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":51318,"byte_end":51327,"line_start":984,"line_end":984,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":831},{"krate":0,"index":1577},{"krate":0,"index":1578},{"krate":0,"index":1579},{"krate":0,"index":1580},{"krate":0,"index":1581},{"krate":0,"index":1582}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":51448,"byte_end":51457,"line_start":990,"line_end":990,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1584},{"krate":0,"index":1585}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":51561,"byte_end":51570,"line_start":994,"line_end":994,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":838}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":51674,"byte_end":51683,"line_start":1000,"line_end":1000,"column_start":30,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":52161,"byte_end":52171,"line_start":1015,"line_end":1015,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":849},{"krate":0,"index":1586},{"krate":0,"index":1587},{"krate":0,"index":1588},{"krate":0,"index":1589},{"krate":0,"index":1590},{"krate":0,"index":1591}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":52276,"byte_end":52286,"line_start":1021,"line_end":1021,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1593},{"krate":0,"index":1594}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":52382,"byte_end":52392,"line_start":1025,"line_end":1025,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":52492,"byte_end":52502,"line_start":1031,"line_end":1031,"column_start":30,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":52551,"byte_end":52561,"line_start":1033,"line_end":1033,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":863}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":53106,"byte_end":53110,"line_start":1051,"line_end":1051,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":873},{"krate":0,"index":1595},{"krate":0,"index":1596},{"krate":0,"index":1597},{"krate":0,"index":1598},{"krate":0,"index":1599},{"krate":0,"index":1600}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":53231,"byte_end":53235,"line_start":1057,"line_end":1057,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1602},{"krate":0,"index":1603}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":53334,"byte_end":53338,"line_start":1061,"line_end":1061,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":880}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":53442,"byte_end":53446,"line_start":1067,"line_end":1067,"column_start":30,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":53537,"byte_end":53541,"line_start":1070,"line_end":1070,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":887}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":53705,"byte_end":53709,"line_start":1078,"line_end":1078,"column_start":51,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":891}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":54220,"byte_end":54227,"line_start":1095,"line_end":1095,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":901},{"krate":0,"index":1604},{"krate":0,"index":1605},{"krate":0,"index":1606},{"krate":0,"index":1607},{"krate":0,"index":1608},{"krate":0,"index":1609}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":54355,"byte_end":54362,"line_start":1101,"line_end":1101,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1611},{"krate":0,"index":1612}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":54464,"byte_end":54471,"line_start":1105,"line_end":1105,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":908}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":54575,"byte_end":54582,"line_start":1111,"line_end":1111,"column_start":30,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":55101,"byte_end":55109,"line_start":1126,"line_end":1126,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":919},{"krate":0,"index":1613},{"krate":0,"index":1614},{"krate":0,"index":1615},{"krate":0,"index":1616},{"krate":0,"index":1617},{"krate":0,"index":1618}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":55223,"byte_end":55231,"line_start":1132,"line_end":1132,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1620},{"krate":0,"index":1621}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":55331,"byte_end":55339,"line_start":1136,"line_end":1136,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":926}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":55439,"byte_end":55447,"line_start":1142,"line_end":1142,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":55508,"byte_end":55516,"line_start":1144,"line_end":1144,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":933}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":56076,"byte_end":56081,"line_start":1162,"line_end":1162,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":942},{"krate":0,"index":1622},{"krate":0,"index":1623},{"krate":0,"index":1624},{"krate":0,"index":1625},{"krate":0,"index":1626},{"krate":0,"index":1627}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":56199,"byte_end":56204,"line_start":1168,"line_end":1168,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1629},{"krate":0,"index":1630}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":56308,"byte_end":56313,"line_start":1172,"line_end":1172,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":949}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":56417,"byte_end":56422,"line_start":1178,"line_end":1178,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":56487,"byte_end":56492,"line_start":1180,"line_end":1180,"column_start":51,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":956}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":57133,"byte_end":57141,"line_start":1203,"line_end":1203,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":979}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":57925,"byte_end":57933,"line_start":1235,"line_end":1235,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":985},{"krate":0,"index":986}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":59101,"byte_end":59109,"line_start":1280,"line_end":1280,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":992}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":60186,"byte_end":60194,"line_start":1322,"line_end":1322,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":997},{"krate":0,"index":998}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":61288,"byte_end":61296,"line_start":1364,"line_end":1364,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1003}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":61644,"byte_end":61652,"line_start":1375,"line_end":1375,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1008}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":62285,"byte_end":62293,"line_start":1395,"line_end":1395,"column_start":50,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1015}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":62706,"byte_end":62714,"line_start":1413,"line_end":1413,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1021}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":64013,"byte_end":64021,"line_start":1446,"line_end":1446,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1029}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":64417,"byte_end":64425,"line_start":1460,"line_end":1460,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1036}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":64645,"byte_end":64653,"line_start":1470,"line_end":1470,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":1043}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":65018,"byte_end":65026,"line_start":1487,"line_end":1487,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":108489,"byte_end":108497,"line_start":71,"line_end":71,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1125},{"krate":0,"index":1126}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":108759,"byte_end":108767,"line_start":87,"line_end":87,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1130},{"krate":0,"index":1131},{"krate":0,"index":1132},{"krate":0,"index":1133},{"krate":0,"index":1134}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":109278,"byte_end":109286,"line_start":113,"line_end":113,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1139}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":109683,"byte_end":109691,"line_start":128,"line_end":128,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1142},{"krate":0,"index":1143}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":110124,"byte_end":110132,"line_start":147,"line_end":147,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1147},{"krate":0,"index":1148},{"krate":0,"index":1149},{"krate":0,"index":1150},{"krate":0,"index":1151},{"krate":0,"index":1152},{"krate":0,"index":1153},{"krate":0,"index":1154},{"krate":0,"index":1155},{"krate":0,"index":1156},{"krate":0,"index":1158}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":113267,"byte_end":113275,"line_start":252,"line_end":252,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1162},{"krate":0,"index":1163},{"krate":0,"index":1164},{"krate":0,"index":1165},{"krate":0,"index":1167},{"krate":0,"index":1170},{"krate":0,"index":1173},{"krate":0,"index":1176},{"krate":0,"index":1179},{"krate":0,"index":1181},{"krate":0,"index":1184},{"krate":0,"index":1187},{"krate":0,"index":1189},{"krate":0,"index":1190},{"krate":0,"index":1192},{"krate":0,"index":1194},{"krate":0,"index":1196},{"krate":0,"index":1198},{"krate":0,"index":1200},{"krate":0,"index":1203},{"krate":0,"index":1206},{"krate":0,"index":1209},{"krate":0,"index":1212},{"krate":0,"index":1214},{"krate":0,"index":1217},{"krate":0,"index":1218},{"krate":0,"index":1221},{"krate":0,"index":1224},{"krate":0,"index":1225},{"krate":0,"index":1228},{"krate":0,"index":1231}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":125756,"byte_end":125764,"line_start":645,"line_end":645,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1235},{"krate":0,"index":1236},{"krate":0,"index":1237},{"krate":0,"index":1238},{"krate":0,"index":1240},{"krate":0,"index":1242}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":128264,"byte_end":128272,"line_start":731,"line_end":731,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1246},{"krate":0,"index":1247}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":128954,"byte_end":128962,"line_start":754,"line_end":754,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1253},{"krate":0,"index":1631},{"krate":0,"index":1632},{"krate":0,"index":1633},{"krate":0,"index":1634},{"krate":0,"index":1635},{"krate":0,"index":1636}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":129059,"byte_end":129067,"line_start":760,"line_end":760,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1638},{"krate":0,"index":1639}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":129155,"byte_end":129163,"line_start":764,"line_end":764,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1258}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":129257,"byte_end":129265,"line_start":770,"line_end":770,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":129308,"byte_end":129316,"line_start":772,"line_end":772,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1263}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":129847,"byte_end":129851,"line_start":790,"line_end":790,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1271},{"krate":0,"index":1640},{"krate":0,"index":1641},{"krate":0,"index":1642},{"krate":0,"index":1643},{"krate":0,"index":1644},{"krate":0,"index":1645}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":129960,"byte_end":129964,"line_start":796,"line_end":796,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1647},{"krate":0,"index":1648}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":130060,"byte_end":130064,"line_start":800,"line_end":800,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1276}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":130162,"byte_end":130166,"line_start":806,"line_end":806,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":130196,"byte_end":130200,"line_start":808,"line_end":808,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1281}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":130346,"byte_end":130350,"line_start":816,"line_end":816,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1284}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":130831,"byte_end":130836,"line_start":833,"line_end":833,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1291},{"krate":0,"index":1649},{"krate":0,"index":1650},{"krate":0,"index":1651},{"krate":0,"index":1652},{"krate":0,"index":1653},{"krate":0,"index":1654}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":130937,"byte_end":130942,"line_start":839,"line_end":839,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1656},{"krate":0,"index":1657}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":131034,"byte_end":131039,"line_start":843,"line_end":843,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1296}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":131137,"byte_end":131142,"line_start":849,"line_end":849,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":131189,"byte_end":131194,"line_start":851,"line_end":851,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1301}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":131601,"byte_end":131609,"line_start":867,"line_end":867,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1312},{"krate":0,"index":1313},{"krate":0,"index":1314}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":131828,"byte_end":131836,"line_start":878,"line_end":878,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1318}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":132180,"byte_end":132188,"line_start":892,"line_end":892,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1325}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":132574,"byte_end":132582,"line_start":910,"line_end":910,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1330}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":132833,"byte_end":132841,"line_start":921,"line_end":921,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1337}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":133086,"byte_end":133094,"line_start":932,"line_end":932,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1342}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":133310,"byte_end":133318,"line_start":944,"line_end":944,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1347}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":133532,"byte_end":133540,"line_start":955,"line_end":955,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":133607,"byte_end":133615,"line_start":962,"line_end":962,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1354},{"krate":0,"index":1358},{"krate":0,"index":1361}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":134960,"byte_end":134970,"line_start":1008,"line_end":1008,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1375}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":135404,"byte_end":135414,"line_start":1029,"line_end":1029,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1379}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":135732,"byte_end":135742,"line_start":1044,"line_end":1044,"column_start":30,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":135823,"byte_end":135833,"line_start":1051,"line_end":1051,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1386}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":135999,"byte_end":136009,"line_start":1060,"line_end":1060,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1390}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":136624,"byte_end":136636,"line_start":1082,"line_end":1082,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1401},{"krate":0,"index":1402},{"krate":0,"index":1403}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":137069,"byte_end":137081,"line_start":1103,"line_end":1103,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1407}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":137398,"byte_end":137410,"line_start":1118,"line_end":1118,"column_start":30,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":137491,"byte_end":137503,"line_start":1125,"line_end":1125,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1414}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":137671,"byte_end":137683,"line_start":1134,"line_end":1134,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1418}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":138356,"byte_end":138375,"line_start":1155,"line_end":1155,"column_start":34,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1430},{"krate":0,"index":1431},{"krate":0,"index":1432},{"krate":0,"index":1433}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":138830,"byte_end":138849,"line_start":1179,"line_end":1179,"column_start":41,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1440},{"krate":0,"index":1441}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":139197,"byte_end":139216,"line_start":1197,"line_end":1197,"column_start":35,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":139329,"byte_end":139348,"line_start":1205,"line_end":1205,"column_start":27,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1452}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":139513,"byte_end":139532,"line_start":1213,"line_end":1213,"column_start":32,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1457}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":140137,"byte_end":140142,"line_start":1235,"line_end":1235,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1467},{"krate":0,"index":1468},{"krate":0,"index":1469},{"krate":0,"index":1470}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":140565,"byte_end":140570,"line_start":1258,"line_end":1258,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1476},{"krate":0,"index":1477}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":140886,"byte_end":140891,"line_start":1275,"line_end":1275,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":140972,"byte_end":140977,"line_start":1282,"line_end":1282,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1486}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":141118,"byte_end":141123,"line_start":1290,"line_end":1290,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1490}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":3891,"byte_end":3900,"line_start":120,"line_end":120,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1525}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":4098,"byte_end":4104,"line_start":134,"line_end":134,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1529},{"krate":0,"index":1530}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":4497,"byte_end":4503,"line_start":154,"line_end":154,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1534},{"krate":0,"index":1535},{"krate":0,"index":1536},{"krate":0,"index":1537},{"krate":0,"index":1538},{"krate":0,"index":1539},{"krate":0,"index":1540},{"krate":0,"index":1541},{"krate":0,"index":1542}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":3334,"byte_end":3343,"line_start":95,"line_end":95,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":191}},{"kind":"Mod","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":3364,"byte_end":3367,"line_start":98,"line_end":98,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":280}},{"kind":"Mod","span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":3377,"byte_end":3380,"line_start":99,"line_end":99,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1050}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\equivalent.rs","byte_start":11208,"byte_end":11209,"line_start":18,"line_end":18,"column_start":46,"column_end":47},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":26},"to":{"krate":0,"index":22}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\mutable_keys.rs","byte_start":13039,"byte_end":13047,"line_start":51,"line_end":51,"column_start":31,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":607},"to":{"krate":0,"index":45}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde.rs","byte_start":13950,"byte_end":13958,"line_start":14,"line_end":14,"column_start":29,"column_end":37},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":607},"to":{"krate":16,"index":2102}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde.rs","byte_start":14292,"byte_end":14307,"line_start":30,"line_end":30,"column_start":37,"column_end":52},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":127},"to":{"krate":16,"index":1647}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde.rs","byte_start":15029,"byte_end":15037,"line_start":58,"line_end":58,"column_start":41,"column_end":49},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":607},"to":{"krate":16,"index":1561}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde.rs","byte_start":15385,"byte_end":15393,"line_start":72,"line_end":72,"column_start":52,"column_end":60},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":607},"to":{"krate":16,"index":1779}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde.rs","byte_start":15817,"byte_end":15825,"line_start":89,"line_end":89,"column_start":26,"column_end":34},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1118},"to":{"krate":16,"index":2102}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde.rs","byte_start":16134,"byte_end":16149,"line_start":104,"line_end":104,"column_start":34,"column_end":49},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":165},"to":{"krate":16,"index":1647}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde.rs","byte_start":16827,"byte_end":16835,"line_start":131,"line_end":131,"column_start":38,"column_end":46},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1118},"to":{"krate":16,"index":1561}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde.rs","byte_start":17152,"byte_end":17160,"line_start":144,"line_end":144,"column_start":49,"column_end":57},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1118},"to":{"krate":16,"index":1779}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\serde_seq.rs","byte_start":19248,"byte_end":19258,"line_start":61,"line_end":61,"column_start":37,"column_end":47},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":237},"to":{"krate":16,"index":1647}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":99778,"byte_end":99790,"line_start":13,"line_end":13,"column_start":21,"column_end":33},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":309},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":100090,"byte_end":100102,"line_start":21,"line_end":21,"column_start":12,"column_end":24},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":391},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":103151,"byte_end":103164,"line_start":103,"line_end":103,"column_start":40,"column_end":53},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":327},"to":{"krate":1,"index":3069}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core\\raw.rs","byte_start":103279,"byte_end":103292,"line_start":106,"line_end":106,"column_start":16,"column_end":29},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":327},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":79354,"byte_end":79366,"line_start":58,"line_end":58,"column_start":22,"column_end":34},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":391},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":80052,"byte_end":80064,"line_start":81,"line_end":81,"column_start":27,"column_end":39},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":391},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":80383,"byte_end":80395,"line_start":94,"line_end":94,"column_start":24,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":391},"to":{"krate":0,"index":1543}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":80898,"byte_end":80910,"line_start":121,"line_end":121,"column_start":12,"column_end":24},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":391},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":92730,"byte_end":92735,"line_start":460,"line_end":460,"column_start":16,"column_end":21},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":463},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":95792,"byte_end":95797,"line_start":550,"line_end":550,"column_start":51,"column_end":56},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":463},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":96201,"byte_end":96214,"line_start":562,"line_end":562,"column_start":12,"column_end":25},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":327},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":97775,"byte_end":97788,"line_start":605,"line_end":605,"column_start":51,"column_end":64},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":327},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":98267,"byte_end":98278,"line_start":624,"line_end":624,"column_start":16,"column_end":27},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":506},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map\\core.rs","byte_start":98981,"byte_end":98992,"line_start":648,"line_end":648,"column_start":39,"column_end":50},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":506},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":24182,"byte_end":24190,"line_start":81,"line_end":81,"column_start":25,"column_end":33},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":607},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":24588,"byte_end":24596,"line_start":100,"line_end":100,"column_start":27,"column_end":35},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":607},"to":{"krate":0,"index":1543}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":25120,"byte_end":25128,"line_start":126,"line_end":126,"column_start":30,"column_end":38},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":607},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":25590,"byte_end":25598,"line_start":144,"line_end":144,"column_start":12,"column_end":20},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":607},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":26024,"byte_end":26032,"line_start":161,"line_end":161,"column_start":15,"column_end":23},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":607},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":30715,"byte_end":30723,"line_start":319,"line_end":319,"column_start":15,"column_end":23},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":607},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":45179,"byte_end":45187,"line_start":768,"line_end":768,"column_start":15,"column_end":23},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":607},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":48169,"byte_end":48173,"line_start":860,"line_end":860,"column_start":29,"column_end":33},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":744},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":48288,"byte_end":48292,"line_start":866,"line_end":866,"column_start":36,"column_end":40},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":744},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":48394,"byte_end":48398,"line_start":870,"line_end":870,"column_start":34,"column_end":38},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":744},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":48502,"byte_end":48506,"line_start":876,"line_end":876,"column_start":30,"column_end":34},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":744},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":48597,"byte_end":48601,"line_start":879,"line_end":879,"column_start":22,"column_end":26},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":744},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":48753,"byte_end":48757,"line_start":887,"line_end":887,"column_start":39,"column_end":43},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":744},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":49258,"byte_end":49266,"line_start":904,"line_end":904,"column_start":25,"column_end":33},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":772},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":49369,"byte_end":49377,"line_start":910,"line_end":910,"column_start":36,"column_end":44},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":772},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":49471,"byte_end":49479,"line_start":914,"line_end":914,"column_start":34,"column_end":42},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":772},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":49579,"byte_end":49587,"line_start":920,"line_end":920,"column_start":30,"column_end":38},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":772},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":49636,"byte_end":49644,"line_start":922,"line_end":922,"column_start":39,"column_end":47},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":772},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":50194,"byte_end":50200,"line_start":940,"line_end":940,"column_start":29,"column_end":35},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":794},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":50317,"byte_end":50323,"line_start":946,"line_end":946,"column_start":36,"column_end":42},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":794},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":50427,"byte_end":50433,"line_start":950,"line_end":950,"column_start":34,"column_end":40},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":794},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":50537,"byte_end":50543,"line_start":956,"line_end":956,"column_start":30,"column_end":36},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":794},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":50634,"byte_end":50640,"line_start":959,"line_end":959,"column_start":22,"column_end":28},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":794},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":50794,"byte_end":50800,"line_start":967,"line_end":967,"column_start":39,"column_end":45},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":794},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":51318,"byte_end":51327,"line_start":984,"line_end":984,"column_start":29,"column_end":38},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":822},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":51448,"byte_end":51457,"line_start":990,"line_end":990,"column_start":36,"column_end":45},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":822},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":51561,"byte_end":51570,"line_start":994,"line_end":994,"column_start":34,"column_end":43},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":822},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":51674,"byte_end":51683,"line_start":1000,"line_end":1000,"column_start":30,"column_end":39},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":822},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":52161,"byte_end":52171,"line_start":1015,"line_end":1015,"column_start":25,"column_end":35},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":842},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":52276,"byte_end":52286,"line_start":1021,"line_end":1021,"column_start":36,"column_end":46},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":842},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":52382,"byte_end":52392,"line_start":1025,"line_end":1025,"column_start":34,"column_end":44},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":842},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":52492,"byte_end":52502,"line_start":1031,"line_end":1031,"column_start":30,"column_end":40},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":842},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":52551,"byte_end":52561,"line_start":1033,"line_end":1033,"column_start":39,"column_end":49},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":842},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":53106,"byte_end":53110,"line_start":1051,"line_end":1051,"column_start":29,"column_end":33},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":864},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":53231,"byte_end":53235,"line_start":1057,"line_end":1057,"column_start":36,"column_end":40},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":864},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":53334,"byte_end":53338,"line_start":1061,"line_end":1061,"column_start":34,"column_end":38},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":864},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":53442,"byte_end":53446,"line_start":1067,"line_end":1067,"column_start":30,"column_end":34},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":864},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":53537,"byte_end":53541,"line_start":1070,"line_end":1070,"column_start":22,"column_end":26},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":864},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":53705,"byte_end":53709,"line_start":1078,"line_end":1078,"column_start":51,"column_end":55},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":864},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":54220,"byte_end":54227,"line_start":1095,"line_end":1095,"column_start":29,"column_end":36},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":892},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":54355,"byte_end":54362,"line_start":1101,"line_end":1101,"column_start":36,"column_end":43},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":892},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":54464,"byte_end":54471,"line_start":1105,"line_end":1105,"column_start":34,"column_end":41},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":892},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":54575,"byte_end":54582,"line_start":1111,"line_end":1111,"column_start":30,"column_end":37},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":892},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":55101,"byte_end":55109,"line_start":1126,"line_end":1126,"column_start":25,"column_end":33},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":912},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":55223,"byte_end":55231,"line_start":1132,"line_end":1132,"column_start":36,"column_end":44},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":912},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":55331,"byte_end":55339,"line_start":1136,"line_end":1136,"column_start":34,"column_end":42},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":912},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":55439,"byte_end":55447,"line_start":1142,"line_end":1142,"column_start":30,"column_end":38},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":912},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":55508,"byte_end":55516,"line_start":1144,"line_end":1144,"column_start":51,"column_end":59},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":912},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":56076,"byte_end":56081,"line_start":1162,"line_end":1162,"column_start":25,"column_end":30},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":934},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":56199,"byte_end":56204,"line_start":1168,"line_end":1168,"column_start":36,"column_end":41},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":934},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":56308,"byte_end":56313,"line_start":1172,"line_end":1172,"column_start":34,"column_end":39},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":934},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":56417,"byte_end":56422,"line_start":1178,"line_end":1178,"column_start":30,"column_end":35},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":934},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":56487,"byte_end":56492,"line_start":1180,"line_end":1180,"column_start":51,"column_end":56},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":934},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":57133,"byte_end":57141,"line_start":1203,"line_end":1203,"column_start":32,"column_end":40},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":607},"to":{"krate":1,"index":7790}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":57925,"byte_end":57933,"line_start":1235,"line_end":1235,"column_start":40,"column_end":48},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":607},"to":{"krate":1,"index":3361}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":59101,"byte_end":59109,"line_start":1280,"line_end":1280,"column_start":43,"column_end":51},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":607},"to":{"krate":1,"index":3365}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":60186,"byte_end":60194,"line_start":1322,"line_end":1322,"column_start":32,"column_end":40},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":607},"to":{"krate":1,"index":3361}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":61288,"byte_end":61296,"line_start":1364,"line_end":1364,"column_start":35,"column_end":43},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":607},"to":{"krate":1,"index":3365}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":61644,"byte_end":61652,"line_start":1375,"line_end":1375,"column_start":40,"column_end":48},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":607},"to":{"krate":1,"index":7786}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":62285,"byte_end":62293,"line_start":1395,"line_end":1395,"column_start":50,"column_end":58},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":607},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":62706,"byte_end":62714,"line_start":1413,"line_end":1413,"column_start":34,"column_end":42},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":607},"to":{"krate":1,"index":7799}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":64013,"byte_end":64021,"line_start":1446,"line_end":1446,"column_start":46,"column_end":54},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":607},"to":{"krate":1,"index":7799}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":64417,"byte_end":64425,"line_start":1460,"line_end":1460,"column_start":27,"column_end":35},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":607},"to":{"krate":1,"index":3035}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":64645,"byte_end":64653,"line_start":1470,"line_end":1470,"column_start":60,"column_end":68},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":607},"to":{"krate":1,"index":2709}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\map.rs","byte_start":65018,"byte_end":65026,"line_start":1487,"line_end":1487,"column_start":22,"column_end":30},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":607},"to":{"krate":1,"index":2714}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":108489,"byte_end":108497,"line_start":71,"line_end":71,"column_start":22,"column_end":30},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1118},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":108759,"byte_end":108767,"line_start":87,"line_end":87,"column_start":24,"column_end":32},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1118},"to":{"krate":0,"index":1543}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":109278,"byte_end":109286,"line_start":113,"line_end":113,"column_start":27,"column_end":35},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1118},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":109683,"byte_end":109691,"line_start":128,"line_end":128,"column_start":9,"column_end":17},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1118},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":110124,"byte_end":110132,"line_start":147,"line_end":147,"column_start":12,"column_end":20},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1118},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":113267,"byte_end":113275,"line_start":252,"line_end":252,"column_start":12,"column_end":20},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1118},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":125756,"byte_end":125764,"line_start":645,"line_end":645,"column_start":12,"column_end":20},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1118},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":128264,"byte_end":128272,"line_start":731,"line_end":731,"column_start":29,"column_end":37},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1118},"to":{"krate":1,"index":3361}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":128954,"byte_end":128962,"line_start":754,"line_end":754,"column_start":22,"column_end":30},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1248},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":129059,"byte_end":129067,"line_start":760,"line_end":760,"column_start":33,"column_end":41},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1248},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":129155,"byte_end":129163,"line_start":764,"line_end":764,"column_start":31,"column_end":39},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1248},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":129257,"byte_end":129265,"line_start":770,"line_end":770,"column_start":27,"column_end":35},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1248},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":129308,"byte_end":129316,"line_start":772,"line_end":772,"column_start":36,"column_end":44},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1248},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":129847,"byte_end":129851,"line_start":790,"line_end":790,"column_start":26,"column_end":30},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1264},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":129960,"byte_end":129964,"line_start":796,"line_end":796,"column_start":33,"column_end":37},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1264},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":130060,"byte_end":130064,"line_start":800,"line_end":800,"column_start":31,"column_end":35},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1264},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":130162,"byte_end":130166,"line_start":806,"line_end":806,"column_start":27,"column_end":31},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1264},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":130196,"byte_end":130200,"line_start":808,"line_end":808,"column_start":19,"column_end":23},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1264},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":130346,"byte_end":130350,"line_start":816,"line_end":816,"column_start":36,"column_end":40},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1264},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":130831,"byte_end":130836,"line_start":833,"line_end":833,"column_start":22,"column_end":27},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1285},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":130937,"byte_end":130942,"line_start":839,"line_end":839,"column_start":33,"column_end":38},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1285},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":131034,"byte_end":131039,"line_start":843,"line_end":843,"column_start":31,"column_end":36},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1285},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":131137,"byte_end":131142,"line_start":849,"line_end":849,"column_start":27,"column_end":32},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1285},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":131189,"byte_end":131194,"line_start":851,"line_end":851,"column_start":36,"column_end":41},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1285},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":131601,"byte_end":131609,"line_start":867,"line_end":867,"column_start":29,"column_end":37},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1118},"to":{"krate":1,"index":7790}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":131828,"byte_end":131836,"line_start":878,"line_end":878,"column_start":32,"column_end":40},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1118},"to":{"krate":1,"index":7786}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":132180,"byte_end":132188,"line_start":892,"line_end":892,"column_start":42,"column_end":50},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1118},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":132574,"byte_end":132582,"line_start":910,"line_end":910,"column_start":26,"column_end":34},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1118},"to":{"krate":1,"index":7799}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":132833,"byte_end":132841,"line_start":921,"line_end":921,"column_start":34,"column_end":42},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1118},"to":{"krate":1,"index":7799}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":133086,"byte_end":133094,"line_start":932,"line_end":932,"column_start":24,"column_end":32},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1118},"to":{"krate":1,"index":3035}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":133310,"byte_end":133318,"line_start":944,"line_end":944,"column_start":48,"column_end":56},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1118},"to":{"krate":1,"index":2709}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":133532,"byte_end":133540,"line_start":955,"line_end":955,"column_start":19,"column_end":27},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1118},"to":{"krate":1,"index":2714}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":133607,"byte_end":133615,"line_start":962,"line_end":962,"column_start":12,"column_end":20},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1118},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":134960,"byte_end":134970,"line_start":1008,"line_end":1008,"column_start":29,"column_end":39},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1363},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":135404,"byte_end":135414,"line_start":1029,"line_end":1029,"column_start":36,"column_end":46},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1363},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":135732,"byte_end":135742,"line_start":1044,"line_end":1044,"column_start":30,"column_end":40},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1363},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":135823,"byte_end":135833,"line_start":1051,"line_end":1051,"column_start":22,"column_end":32},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1363},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":135999,"byte_end":136009,"line_start":1060,"line_end":1060,"column_start":27,"column_end":37},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1363},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":136624,"byte_end":136636,"line_start":1082,"line_end":1082,"column_start":29,"column_end":41},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1391},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":137069,"byte_end":137081,"line_start":1103,"line_end":1103,"column_start":36,"column_end":48},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1391},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":137398,"byte_end":137410,"line_start":1118,"line_end":1118,"column_start":30,"column_end":42},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1391},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":137491,"byte_end":137503,"line_start":1125,"line_end":1125,"column_start":22,"column_end":34},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1391},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":137671,"byte_end":137683,"line_start":1134,"line_end":1134,"column_start":27,"column_end":39},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1391},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":138356,"byte_end":138375,"line_start":1155,"line_end":1155,"column_start":34,"column_end":53},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1419},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":138830,"byte_end":138849,"line_start":1179,"line_end":1179,"column_start":41,"column_end":60},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1419},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":139197,"byte_end":139216,"line_start":1197,"line_end":1197,"column_start":35,"column_end":54},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1419},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":139329,"byte_end":139348,"line_start":1205,"line_end":1205,"column_start":27,"column_end":46},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1419},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":139513,"byte_end":139532,"line_start":1213,"line_end":1213,"column_start":32,"column_end":51},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1419},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":140137,"byte_end":140142,"line_start":1235,"line_end":1235,"column_start":29,"column_end":34},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1458},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":140565,"byte_end":140570,"line_start":1258,"line_end":1258,"column_start":36,"column_end":41},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1458},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":140886,"byte_end":140891,"line_start":1275,"line_end":1275,"column_start":30,"column_end":35},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1458},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":140972,"byte_end":140977,"line_start":1282,"line_end":1282,"column_start":22,"column_end":27},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1458},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\set.rs","byte_start":141118,"byte_end":141123,"line_start":1290,"line_end":1290,"column_start":27,"column_end":32},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1458},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":3891,"byte_end":3900,"line_start":120,"line_end":120,"column_start":6,"column_end":15},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1658},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":4098,"byte_end":4104,"line_start":134,"line_end":134,"column_start":22,"column_end":28},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1670},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\trexx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.8.2\\src\\lib.rs","byte_start":4497,"byte_end":4503,"line_start":154,"line_end":154,"column_start":12,"column_end":18},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1670},"to":{"krate":4294967295,"index":4294967295}}]}